/* automatically generated by rust-bindgen */

// All of these should be fixed, but are not going to be until each piece is seen to work
// this means a lot of examples, and a lot of converting of code!

#[allow(dead_code,non_camel_case_types,non_upper_case_globals)]
mod bcm_host {

pub type int8_t = ::libc::c_char;
pub type int16_t = ::libc::c_short;
pub type int32_t = ::libc::c_int;
pub type int64_t = ::libc::c_longlong;
pub type uint8_t = ::libc::c_uchar;
pub type uint16_t = ::libc::c_ushort;
pub type uint32_t = ::libc::c_uint;
pub type uint64_t = ::libc::c_ulonglong;
pub type int_least8_t = ::libc::c_char;
pub type int_least16_t = ::libc::c_short;
pub type int_least32_t = ::libc::c_int;
pub type int_least64_t = ::libc::c_longlong;
pub type uint_least8_t = ::libc::c_uchar;
pub type uint_least16_t = ::libc::c_ushort;
pub type uint_least32_t = ::libc::c_uint;
pub type uint_least64_t = ::libc::c_ulonglong;
pub type int_fast8_t = ::libc::c_char;
pub type int_fast16_t = ::libc::c_int;
pub type int_fast32_t = ::libc::c_int;
pub type int_fast64_t = ::libc::c_longlong;
pub type uint_fast8_t = ::libc::c_uchar;
pub type uint_fast16_t = ::libc::c_uint;
pub type uint_fast32_t = ::libc::c_uint;
pub type uint_fast64_t = ::libc::c_ulonglong;
pub type intptr_t = ::libc::c_int;
pub type uintptr_t = ::libc::c_uint;
pub type intmax_t = ::libc::c_longlong;
pub type uintmax_t = ::libc::c_ulonglong;
pub type ptrdiff_t = ::libc::c_int;
pub type size_t = ::libc::c_uint;
pub type wchar_t = ::libc::c_uint;
pub type __gwchar_t = ::libc::c_uint;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed1 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed1 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed1 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type imaxdiv_t = Struct_Unnamed1;
pub type VCOS_LLTHREAD_ENTRY_FN_T =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void) -> ()>;
pub type VCOS_THREAD_ENTRY_FN_T =
    ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const VCOS_SUCCESS: ::libc::c_uint = 0;
pub const VCOS_EAGAIN: ::libc::c_uint = 1;
pub const VCOS_ENOENT: ::libc::c_uint = 2;
pub const VCOS_ENOSPC: ::libc::c_uint = 3;
pub const VCOS_EINVAL: ::libc::c_uint = 4;
pub const VCOS_EACCESS: ::libc::c_uint = 5;
pub const VCOS_ENOMEM: ::libc::c_uint = 6;
pub const VCOS_ENOSYS: ::libc::c_uint = 7;
pub const VCOS_EEXIST: ::libc::c_uint = 8;
pub const VCOS_ENXIO: ::libc::c_uint = 9;
pub const VCOS_EINTR: ::libc::c_uint = 10;
pub type VCOS_STATUS_T = Enum_Unnamed2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vcos_datestr {
    pub cmsec: uint8_t,
    pub date: uint16_t,
    pub time: uint16_t,
}
impl ::std::clone::Clone for Struct_vcos_datestr {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vcos_datestr {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_DATESTR = Struct_vcos_datestr;
pub type vcos_bool_t = int32_t;
pub type vcos_fourcc_t = int32_t;
pub type fourcc_t = vcos_fourcc_t;
pub type FOURCC_T = vcos_fourcc_t;
pub type __u_char = ::libc::c_uchar;
pub type __u_short = ::libc::c_ushort;
pub type __u_int = ::libc::c_uint;
pub type __u_long = ::libc::c_ulong;
pub type __int8_t = ::libc::c_char;
pub type __uint8_t = ::libc::c_uchar;
pub type __int16_t = ::libc::c_short;
pub type __uint16_t = ::libc::c_ushort;
pub type __int32_t = ::libc::c_int;
pub type __uint32_t = ::libc::c_uint;
pub type __int64_t = ::libc::c_longlong;
pub type __uint64_t = ::libc::c_ulonglong;
pub type __quad_t = ::libc::c_longlong;
pub type __u_quad_t = ::libc::c_ulonglong;
pub type __dev_t = __u_quad_t;
pub type __uid_t = ::libc::c_uint;
pub type __gid_t = ::libc::c_uint;
pub type __ino_t = ::libc::c_ulong;
pub type __ino64_t = __u_quad_t;
pub type __mode_t = ::libc::c_uint;
pub type __nlink_t = ::libc::c_uint;
pub type __off_t = ::libc::c_long;
pub type __off64_t = __quad_t;
pub type __pid_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed3 {
    pub __val: [::libc::c_int; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed3 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed3 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __fsid_t = Struct_Unnamed3;
pub type __clock_t = ::libc::c_long;
pub type __rlim_t = ::libc::c_ulong;
pub type __rlim64_t = __u_quad_t;
pub type __id_t = ::libc::c_uint;
pub type __time_t = ::libc::c_long;
pub type __useconds_t = ::libc::c_uint;
pub type __suseconds_t = ::libc::c_long;
pub type __daddr_t = ::libc::c_int;
pub type __key_t = ::libc::c_int;
pub type __clockid_t = ::libc::c_int;
pub type __timer_t = *mut ::libc::c_void;
pub type __blksize_t = ::libc::c_long;
pub type __blkcnt_t = ::libc::c_long;
pub type __blkcnt64_t = __quad_t;
pub type __fsblkcnt_t = ::libc::c_ulong;
pub type __fsblkcnt64_t = __u_quad_t;
pub type __fsfilcnt_t = ::libc::c_ulong;
pub type __fsfilcnt64_t = __u_quad_t;
pub type __fsword_t = ::libc::c_int;
pub type __ssize_t = ::libc::c_int;
pub type __syscall_slong_t = ::libc::c_long;
pub type __syscall_ulong_t = ::libc::c_ulong;
pub type __loff_t = __off64_t;
pub type __qaddr_t = *mut __quad_t;
pub type __caddr_t = *mut ::libc::c_uchar;
pub type __intptr_t = ::libc::c_int;
pub type __socklen_t = ::libc::c_uint;
pub type time_t = __time_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
impl ::std::clone::Clone for Struct_timespec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timespec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pid_t = __pid_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sched_param {
    pub __sched_priority: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___sched_param {
    pub __sched_priority: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___sched_param {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___sched_param {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __cpu_mask = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub __bits: [__cpu_mask; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type cpu_set_t = Struct_Unnamed4;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type timer_t = __timer_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tm {
    pub tm_sec: ::libc::c_int,
    pub tm_min: ::libc::c_int,
    pub tm_hour: ::libc::c_int,
    pub tm_mday: ::libc::c_int,
    pub tm_mon: ::libc::c_int,
    pub tm_year: ::libc::c_int,
    pub tm_wday: ::libc::c_int,
    pub tm_yday: ::libc::c_int,
    pub tm_isdst: ::libc::c_int,
    pub tm_gmtoff: ::libc::c_long,
    pub tm_zone: *const ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_tm {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tm {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_itimerspec {
    pub it_interval: Struct_timespec,
    pub it_value: Struct_timespec,
}
impl ::std::clone::Clone for Struct_itimerspec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_itimerspec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___locale_data { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct___locale_struct {
    pub __locales: [*mut Struct___locale_data; 13usize],
    pub __ctype_b: *const ::libc::c_ushort,
    pub __ctype_tolower: *const ::libc::c_int,
    pub __ctype_toupper: *const ::libc::c_int,
    pub __names: [*const ::libc::c_uchar; 13usize],
}
impl ::std::clone::Clone for Struct___locale_struct {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___locale_struct {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __locale_t = *mut Struct___locale_struct;
pub type locale_t = __locale_t;
pub type pthread_t = ::libc::c_ulong;
#[repr(C)]
#[derive(Copy)]
pub struct Union_pthread_attr_t {
    pub _bindgen_data_: [u32; 9usize],
}
impl Union_pthread_attr_t {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 36usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_pthread_attr_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_pthread_attr_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_attr_t = Union_pthread_attr_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_internal_slist {
    pub __next: *mut Struct___pthread_internal_slist,
}
impl ::std::clone::Clone for Struct___pthread_internal_slist {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_internal_slist {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_slist_t = Struct___pthread_internal_slist;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed5 {
    pub _bindgen_data_: [u32; 6usize],
}
impl Union_Unnamed5 {
    pub unsafe fn __data(&mut self) -> *mut Struct___pthread_mutex_s {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 24usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed5 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed5 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_mutex_s {
    pub __lock: ::libc::c_int,
    pub __count: ::libc::c_uint,
    pub __owner: ::libc::c_int,
    pub __kind: ::libc::c_int,
    pub __nusers: ::libc::c_uint,
    pub _bindgen_data_1_: [u32; 1usize],
}
impl Struct___pthread_mutex_s {
    pub unsafe fn __spins(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __list(&mut self) -> *mut __pthread_slist_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_1_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Struct___pthread_mutex_s {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_mutex_s {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutex_t = Union_Unnamed5;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed6 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed6 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed6 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed6 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_mutexattr_t = Union_Unnamed6;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed7 {
    pub _bindgen_data_: [u64; 6usize],
}
impl Union_Unnamed7 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed8 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 48usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_longlong {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed7 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed7 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed8 {
    pub __lock: ::libc::c_int,
    pub __futex: ::libc::c_uint,
    pub __total_seq: ::libc::c_ulonglong,
    pub __wakeup_seq: ::libc::c_ulonglong,
    pub __woken_seq: ::libc::c_ulonglong,
    pub __mutex: *mut ::libc::c_void,
    pub __nwaiters: ::libc::c_uint,
    pub __broadcast_seq: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed8 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed8 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_cond_t = Union_Unnamed7;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed9 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed9 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed9 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed9 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_condattr_t = Union_Unnamed9;
pub type pthread_key_t = ::libc::c_uint;
pub type pthread_once_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed10 {
    pub _bindgen_data_: [u32; 8usize],
}
impl Union_Unnamed10 {
    pub unsafe fn __data(&mut self) -> *mut Struct_Unnamed11 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 32usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed10 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed10 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed11 {
    pub __lock: ::libc::c_int,
    pub __nr_readers: ::libc::c_uint,
    pub __readers_wakeup: ::libc::c_uint,
    pub __writer_wakeup: ::libc::c_uint,
    pub __nr_readers_queued: ::libc::c_uint,
    pub __nr_writers_queued: ::libc::c_uint,
    pub __flags: ::libc::c_uchar,
    pub __shared: ::libc::c_uchar,
    pub __pad1: ::libc::c_uchar,
    pub __pad2: ::libc::c_uchar,
    pub __writer: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed11 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed11 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlock_t = Union_Unnamed10;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed12 {
    pub _bindgen_data_: [u32; 2usize],
}
impl Union_Unnamed12 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 8usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed12 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed12 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_rwlockattr_t = Union_Unnamed12;
pub type pthread_spinlock_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed13 {
    pub _bindgen_data_: [u32; 5usize],
}
impl Union_Unnamed13 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 20usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed13 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed13 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrier_t = Union_Unnamed13;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed14 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed14 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 4usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed14 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed14 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type pthread_barrierattr_t = Union_Unnamed14;
pub type __jmp_buf = [::libc::c_int; 64usize];
pub type Enum_Unnamed15 = ::libc::c_uint;
pub const PTHREAD_CREATE_JOINABLE: ::libc::c_uint = 0;
pub const PTHREAD_CREATE_DETACHED: ::libc::c_uint = 1;
pub type Enum_Unnamed16 = ::libc::c_uint;
pub const PTHREAD_MUTEX_TIMED_NP: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE_NP: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK_NP: ::libc::c_uint = 2;
pub const PTHREAD_MUTEX_ADAPTIVE_NP: ::libc::c_uint = 3;
pub const PTHREAD_MUTEX_NORMAL: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_RECURSIVE: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ERRORCHECK: ::libc::c_uint = 2;
pub const PTHREAD_MUTEX_DEFAULT: ::libc::c_uint = 0;
pub type Enum_Unnamed17 = ::libc::c_uint;
pub const PTHREAD_MUTEX_STALLED: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_STALLED_NP: ::libc::c_uint = 0;
pub const PTHREAD_MUTEX_ROBUST: ::libc::c_uint = 1;
pub const PTHREAD_MUTEX_ROBUST_NP: ::libc::c_uint = 1;
pub type Enum_Unnamed18 = ::libc::c_uint;
pub const PTHREAD_PRIO_NONE: ::libc::c_uint = 0;
pub const PTHREAD_PRIO_INHERIT: ::libc::c_uint = 1;
pub const PTHREAD_PRIO_PROTECT: ::libc::c_uint = 2;
pub type Enum_Unnamed19 = ::libc::c_uint;
pub const PTHREAD_RWLOCK_PREFER_READER_NP: ::libc::c_uint = 0;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NP: ::libc::c_uint = 1;
pub const PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP: ::libc::c_uint = 2;
pub const PTHREAD_RWLOCK_DEFAULT_NP: ::libc::c_uint = 0;
pub type Enum_Unnamed20 = ::libc::c_uint;
pub const PTHREAD_INHERIT_SCHED: ::libc::c_uint = 0;
pub const PTHREAD_EXPLICIT_SCHED: ::libc::c_uint = 1;
pub type Enum_Unnamed21 = ::libc::c_uint;
pub const PTHREAD_SCOPE_SYSTEM: ::libc::c_uint = 0;
pub const PTHREAD_SCOPE_PROCESS: ::libc::c_uint = 1;
pub type Enum_Unnamed22 = ::libc::c_uint;
pub const PTHREAD_PROCESS_PRIVATE: ::libc::c_uint = 0;
pub const PTHREAD_PROCESS_SHARED: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__pthread_cleanup_buffer {
    pub __routine: ::std::option::Option<extern "C" fn(arg1:
                                                           *mut ::libc::c_void)
                                             -> ()>,
    pub __arg: *mut ::libc::c_void,
    pub __canceltype: ::libc::c_int,
    pub __prev: *mut Struct__pthread_cleanup_buffer,
}
impl ::std::clone::Clone for Struct__pthread_cleanup_buffer {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__pthread_cleanup_buffer {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed23 = ::libc::c_uint;
pub const PTHREAD_CANCEL_ENABLE: ::libc::c_uint = 0;
pub const PTHREAD_CANCEL_DISABLE: ::libc::c_uint = 1;
pub type Enum_Unnamed24 = ::libc::c_uint;
pub const PTHREAD_CANCEL_DEFERRED: ::libc::c_uint = 0;
pub const PTHREAD_CANCEL_ASYNCHRONOUS: ::libc::c_uint = 1;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed25 {
    pub __cancel_jmp_buf: [Struct_Unnamed26; 1usize],
    pub __pad: [*mut ::libc::c_void; 4usize],
}
impl ::std::clone::Clone for Struct_Unnamed25 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed25 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed26 {
    pub __cancel_jmp_buf: __jmp_buf,
    pub __mask_was_saved: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed26 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed26 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __pthread_unwind_buf_t = Struct_Unnamed25;
#[repr(C)]
#[derive(Copy)]
pub struct Struct___pthread_cleanup_frame {
    pub __cancel_routine: ::std::option::Option<extern "C" fn(arg1:
                                                                  *mut ::libc::c_void)
                                                    -> ()>,
    pub __cancel_arg: *mut ::libc::c_void,
    pub __do_it: ::libc::c_int,
    pub __cancel_type: ::libc::c_int,
}
impl ::std::clone::Clone for Struct___pthread_cleanup_frame {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct___pthread_cleanup_frame {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct___jmp_buf_tag { }
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type id_t = __id_t;
pub type ssize_t = __ssize_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type ulong = ::libc::c_ulong;
pub type ushort = ::libc::c_ushort;
pub type _uint = ::libc::c_uint;
pub type u_int8_t = ::libc::c_uchar;
pub type u_int16_t = ::libc::c_ushort;
pub type u_int32_t = ::libc::c_uint;
pub type u_int64_t = ::libc::c_ulonglong;
pub type register_t = ::libc::c_int;
pub type __sig_atomic_t = ::libc::c_int;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed27 {
    pub __val: [::libc::c_ulong; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed27 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed27 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __sigset_t = Struct_Unnamed27;
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
impl ::std::clone::Clone for Struct_timeval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_timeval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::libc::c_long;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed28 {
    pub __fds_bits: [__fd_mask; 32usize],
}
impl ::std::clone::Clone for Struct_Unnamed28 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed28 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fd_set = Struct_Unnamed28;
pub type fd_mask = __fd_mask;
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed29 {
    pub _bindgen_data_: [u32; 4usize],
}
impl Union_Unnamed29 {
    pub unsafe fn __size(&mut self) -> *mut [::libc::c_uchar; 16usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __align(&mut self) -> *mut ::libc::c_long {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed29 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed29 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sem_t = Union_Unnamed29;
pub type useconds_t = __useconds_t;
pub type socklen_t = __socklen_t;
pub type Enum_Unnamed30 = ::libc::c_uint;
pub const _PC_LINK_MAX: ::libc::c_uint = 0;
pub const _PC_MAX_CANON: ::libc::c_uint = 1;
pub const _PC_MAX_INPUT: ::libc::c_uint = 2;
pub const _PC_NAME_MAX: ::libc::c_uint = 3;
pub const _PC_PATH_MAX: ::libc::c_uint = 4;
pub const _PC_PIPE_BUF: ::libc::c_uint = 5;
pub const _PC_CHOWN_RESTRICTED: ::libc::c_uint = 6;
pub const _PC_NO_TRUNC: ::libc::c_uint = 7;
pub const _PC_VDISABLE: ::libc::c_uint = 8;
pub const _PC_SYNC_IO: ::libc::c_uint = 9;
pub const _PC_ASYNC_IO: ::libc::c_uint = 10;
pub const _PC_PRIO_IO: ::libc::c_uint = 11;
pub const _PC_SOCK_MAXBUF: ::libc::c_uint = 12;
pub const _PC_FILESIZEBITS: ::libc::c_uint = 13;
pub const _PC_REC_INCR_XFER_SIZE: ::libc::c_uint = 14;
pub const _PC_REC_MAX_XFER_SIZE: ::libc::c_uint = 15;
pub const _PC_REC_MIN_XFER_SIZE: ::libc::c_uint = 16;
pub const _PC_REC_XFER_ALIGN: ::libc::c_uint = 17;
pub const _PC_ALLOC_SIZE_MIN: ::libc::c_uint = 18;
pub const _PC_SYMLINK_MAX: ::libc::c_uint = 19;
pub const _PC_2_SYMLINKS: ::libc::c_uint = 20;
pub type Enum_Unnamed31 = ::libc::c_uint;
pub const _SC_ARG_MAX: ::libc::c_uint = 0;
pub const _SC_CHILD_MAX: ::libc::c_uint = 1;
pub const _SC_CLK_TCK: ::libc::c_uint = 2;
pub const _SC_NGROUPS_MAX: ::libc::c_uint = 3;
pub const _SC_OPEN_MAX: ::libc::c_uint = 4;
pub const _SC_STREAM_MAX: ::libc::c_uint = 5;
pub const _SC_TZNAME_MAX: ::libc::c_uint = 6;
pub const _SC_JOB_CONTROL: ::libc::c_uint = 7;
pub const _SC_SAVED_IDS: ::libc::c_uint = 8;
pub const _SC_REALTIME_SIGNALS: ::libc::c_uint = 9;
pub const _SC_PRIORITY_SCHEDULING: ::libc::c_uint = 10;
pub const _SC_TIMERS: ::libc::c_uint = 11;
pub const _SC_ASYNCHRONOUS_IO: ::libc::c_uint = 12;
pub const _SC_PRIORITIZED_IO: ::libc::c_uint = 13;
pub const _SC_SYNCHRONIZED_IO: ::libc::c_uint = 14;
pub const _SC_FSYNC: ::libc::c_uint = 15;
pub const _SC_MAPPED_FILES: ::libc::c_uint = 16;
pub const _SC_MEMLOCK: ::libc::c_uint = 17;
pub const _SC_MEMLOCK_RANGE: ::libc::c_uint = 18;
pub const _SC_MEMORY_PROTECTION: ::libc::c_uint = 19;
pub const _SC_MESSAGE_PASSING: ::libc::c_uint = 20;
pub const _SC_SEMAPHORES: ::libc::c_uint = 21;
pub const _SC_SHARED_MEMORY_OBJECTS: ::libc::c_uint = 22;
pub const _SC_AIO_LISTIO_MAX: ::libc::c_uint = 23;
pub const _SC_AIO_MAX: ::libc::c_uint = 24;
pub const _SC_AIO_PRIO_DELTA_MAX: ::libc::c_uint = 25;
pub const _SC_DELAYTIMER_MAX: ::libc::c_uint = 26;
pub const _SC_MQ_OPEN_MAX: ::libc::c_uint = 27;
pub const _SC_MQ_PRIO_MAX: ::libc::c_uint = 28;
pub const _SC_VERSION: ::libc::c_uint = 29;
pub const _SC_PAGESIZE: ::libc::c_uint = 30;
pub const _SC_RTSIG_MAX: ::libc::c_uint = 31;
pub const _SC_SEM_NSEMS_MAX: ::libc::c_uint = 32;
pub const _SC_SEM_VALUE_MAX: ::libc::c_uint = 33;
pub const _SC_SIGQUEUE_MAX: ::libc::c_uint = 34;
pub const _SC_TIMER_MAX: ::libc::c_uint = 35;
pub const _SC_BC_BASE_MAX: ::libc::c_uint = 36;
pub const _SC_BC_DIM_MAX: ::libc::c_uint = 37;
pub const _SC_BC_SCALE_MAX: ::libc::c_uint = 38;
pub const _SC_BC_STRING_MAX: ::libc::c_uint = 39;
pub const _SC_COLL_WEIGHTS_MAX: ::libc::c_uint = 40;
pub const _SC_EQUIV_CLASS_MAX: ::libc::c_uint = 41;
pub const _SC_EXPR_NEST_MAX: ::libc::c_uint = 42;
pub const _SC_LINE_MAX: ::libc::c_uint = 43;
pub const _SC_RE_DUP_MAX: ::libc::c_uint = 44;
pub const _SC_CHARCLASS_NAME_MAX: ::libc::c_uint = 45;
pub const _SC_2_VERSION: ::libc::c_uint = 46;
pub const _SC_2_C_BIND: ::libc::c_uint = 47;
pub const _SC_2_C_DEV: ::libc::c_uint = 48;
pub const _SC_2_FORT_DEV: ::libc::c_uint = 49;
pub const _SC_2_FORT_RUN: ::libc::c_uint = 50;
pub const _SC_2_SW_DEV: ::libc::c_uint = 51;
pub const _SC_2_LOCALEDEF: ::libc::c_uint = 52;
pub const _SC_PII: ::libc::c_uint = 53;
pub const _SC_PII_XTI: ::libc::c_uint = 54;
pub const _SC_PII_SOCKET: ::libc::c_uint = 55;
pub const _SC_PII_INTERNET: ::libc::c_uint = 56;
pub const _SC_PII_OSI: ::libc::c_uint = 57;
pub const _SC_POLL: ::libc::c_uint = 58;
pub const _SC_SELECT: ::libc::c_uint = 59;
pub const _SC_UIO_MAXIOV: ::libc::c_uint = 60;
pub const _SC_IOV_MAX: ::libc::c_uint = 60;
pub const _SC_PII_INTERNET_STREAM: ::libc::c_uint = 61;
pub const _SC_PII_INTERNET_DGRAM: ::libc::c_uint = 62;
pub const _SC_PII_OSI_COTS: ::libc::c_uint = 63;
pub const _SC_PII_OSI_CLTS: ::libc::c_uint = 64;
pub const _SC_PII_OSI_M: ::libc::c_uint = 65;
pub const _SC_T_IOV_MAX: ::libc::c_uint = 66;
pub const _SC_THREADS: ::libc::c_uint = 67;
pub const _SC_THREAD_SAFE_FUNCTIONS: ::libc::c_uint = 68;
pub const _SC_GETGR_R_SIZE_MAX: ::libc::c_uint = 69;
pub const _SC_GETPW_R_SIZE_MAX: ::libc::c_uint = 70;
pub const _SC_LOGIN_NAME_MAX: ::libc::c_uint = 71;
pub const _SC_TTY_NAME_MAX: ::libc::c_uint = 72;
pub const _SC_THREAD_DESTRUCTOR_ITERATIONS: ::libc::c_uint = 73;
pub const _SC_THREAD_KEYS_MAX: ::libc::c_uint = 74;
pub const _SC_THREAD_STACK_MIN: ::libc::c_uint = 75;
pub const _SC_THREAD_THREADS_MAX: ::libc::c_uint = 76;
pub const _SC_THREAD_ATTR_STACKADDR: ::libc::c_uint = 77;
pub const _SC_THREAD_ATTR_STACKSIZE: ::libc::c_uint = 78;
pub const _SC_THREAD_PRIORITY_SCHEDULING: ::libc::c_uint = 79;
pub const _SC_THREAD_PRIO_INHERIT: ::libc::c_uint = 80;
pub const _SC_THREAD_PRIO_PROTECT: ::libc::c_uint = 81;
pub const _SC_THREAD_PROCESS_SHARED: ::libc::c_uint = 82;
pub const _SC_NPROCESSORS_CONF: ::libc::c_uint = 83;
pub const _SC_NPROCESSORS_ONLN: ::libc::c_uint = 84;
pub const _SC_PHYS_PAGES: ::libc::c_uint = 85;
pub const _SC_AVPHYS_PAGES: ::libc::c_uint = 86;
pub const _SC_ATEXIT_MAX: ::libc::c_uint = 87;
pub const _SC_PASS_MAX: ::libc::c_uint = 88;
pub const _SC_XOPEN_VERSION: ::libc::c_uint = 89;
pub const _SC_XOPEN_XCU_VERSION: ::libc::c_uint = 90;
pub const _SC_XOPEN_UNIX: ::libc::c_uint = 91;
pub const _SC_XOPEN_CRYPT: ::libc::c_uint = 92;
pub const _SC_XOPEN_ENH_I18N: ::libc::c_uint = 93;
pub const _SC_XOPEN_SHM: ::libc::c_uint = 94;
pub const _SC_2_CHAR_TERM: ::libc::c_uint = 95;
pub const _SC_2_C_VERSION: ::libc::c_uint = 96;
pub const _SC_2_UPE: ::libc::c_uint = 97;
pub const _SC_XOPEN_XPG2: ::libc::c_uint = 98;
pub const _SC_XOPEN_XPG3: ::libc::c_uint = 99;
pub const _SC_XOPEN_XPG4: ::libc::c_uint = 100;
pub const _SC_CHAR_BIT: ::libc::c_uint = 101;
pub const _SC_CHAR_MAX: ::libc::c_uint = 102;
pub const _SC_CHAR_MIN: ::libc::c_uint = 103;
pub const _SC_INT_MAX: ::libc::c_uint = 104;
pub const _SC_INT_MIN: ::libc::c_uint = 105;
pub const _SC_LONG_BIT: ::libc::c_uint = 106;
pub const _SC_WORD_BIT: ::libc::c_uint = 107;
pub const _SC_MB_LEN_MAX: ::libc::c_uint = 108;
pub const _SC_NZERO: ::libc::c_uint = 109;
pub const _SC_SSIZE_MAX: ::libc::c_uint = 110;
pub const _SC_SCHAR_MAX: ::libc::c_uint = 111;
pub const _SC_SCHAR_MIN: ::libc::c_uint = 112;
pub const _SC_SHRT_MAX: ::libc::c_uint = 113;
pub const _SC_SHRT_MIN: ::libc::c_uint = 114;
pub const _SC_UCHAR_MAX: ::libc::c_uint = 115;
pub const _SC_UINT_MAX: ::libc::c_uint = 116;
pub const _SC_ULONG_MAX: ::libc::c_uint = 117;
pub const _SC_USHRT_MAX: ::libc::c_uint = 118;
pub const _SC_NL_ARGMAX: ::libc::c_uint = 119;
pub const _SC_NL_LANGMAX: ::libc::c_uint = 120;
pub const _SC_NL_MSGMAX: ::libc::c_uint = 121;
pub const _SC_NL_NMAX: ::libc::c_uint = 122;
pub const _SC_NL_SETMAX: ::libc::c_uint = 123;
pub const _SC_NL_TEXTMAX: ::libc::c_uint = 124;
pub const _SC_XBS5_ILP32_OFF32: ::libc::c_uint = 125;
pub const _SC_XBS5_ILP32_OFFBIG: ::libc::c_uint = 126;
pub const _SC_XBS5_LP64_OFF64: ::libc::c_uint = 127;
pub const _SC_XBS5_LPBIG_OFFBIG: ::libc::c_uint = 128;
pub const _SC_XOPEN_LEGACY: ::libc::c_uint = 129;
pub const _SC_XOPEN_REALTIME: ::libc::c_uint = 130;
pub const _SC_XOPEN_REALTIME_THREADS: ::libc::c_uint = 131;
pub const _SC_ADVISORY_INFO: ::libc::c_uint = 132;
pub const _SC_BARRIERS: ::libc::c_uint = 133;
pub const _SC_BASE: ::libc::c_uint = 134;
pub const _SC_C_LANG_SUPPORT: ::libc::c_uint = 135;
pub const _SC_C_LANG_SUPPORT_R: ::libc::c_uint = 136;
pub const _SC_CLOCK_SELECTION: ::libc::c_uint = 137;
pub const _SC_CPUTIME: ::libc::c_uint = 138;
pub const _SC_THREAD_CPUTIME: ::libc::c_uint = 139;
pub const _SC_DEVICE_IO: ::libc::c_uint = 140;
pub const _SC_DEVICE_SPECIFIC: ::libc::c_uint = 141;
pub const _SC_DEVICE_SPECIFIC_R: ::libc::c_uint = 142;
pub const _SC_FD_MGMT: ::libc::c_uint = 143;
pub const _SC_FIFO: ::libc::c_uint = 144;
pub const _SC_PIPE: ::libc::c_uint = 145;
pub const _SC_FILE_ATTRIBUTES: ::libc::c_uint = 146;
pub const _SC_FILE_LOCKING: ::libc::c_uint = 147;
pub const _SC_FILE_SYSTEM: ::libc::c_uint = 148;
pub const _SC_MONOTONIC_CLOCK: ::libc::c_uint = 149;
pub const _SC_MULTI_PROCESS: ::libc::c_uint = 150;
pub const _SC_SINGLE_PROCESS: ::libc::c_uint = 151;
pub const _SC_NETWORKING: ::libc::c_uint = 152;
pub const _SC_READER_WRITER_LOCKS: ::libc::c_uint = 153;
pub const _SC_SPIN_LOCKS: ::libc::c_uint = 154;
pub const _SC_REGEXP: ::libc::c_uint = 155;
pub const _SC_REGEX_VERSION: ::libc::c_uint = 156;
pub const _SC_SHELL: ::libc::c_uint = 157;
pub const _SC_SIGNALS: ::libc::c_uint = 158;
pub const _SC_SPAWN: ::libc::c_uint = 159;
pub const _SC_SPORADIC_SERVER: ::libc::c_uint = 160;
pub const _SC_THREAD_SPORADIC_SERVER: ::libc::c_uint = 161;
pub const _SC_SYSTEM_DATABASE: ::libc::c_uint = 162;
pub const _SC_SYSTEM_DATABASE_R: ::libc::c_uint = 163;
pub const _SC_TIMEOUTS: ::libc::c_uint = 164;
pub const _SC_TYPED_MEMORY_OBJECTS: ::libc::c_uint = 165;
pub const _SC_USER_GROUPS: ::libc::c_uint = 166;
pub const _SC_USER_GROUPS_R: ::libc::c_uint = 167;
pub const _SC_2_PBS: ::libc::c_uint = 168;
pub const _SC_2_PBS_ACCOUNTING: ::libc::c_uint = 169;
pub const _SC_2_PBS_LOCATE: ::libc::c_uint = 170;
pub const _SC_2_PBS_MESSAGE: ::libc::c_uint = 171;
pub const _SC_2_PBS_TRACK: ::libc::c_uint = 172;
pub const _SC_SYMLOOP_MAX: ::libc::c_uint = 173;
pub const _SC_STREAMS: ::libc::c_uint = 174;
pub const _SC_2_PBS_CHECKPOINT: ::libc::c_uint = 175;
pub const _SC_V6_ILP32_OFF32: ::libc::c_uint = 176;
pub const _SC_V6_ILP32_OFFBIG: ::libc::c_uint = 177;
pub const _SC_V6_LP64_OFF64: ::libc::c_uint = 178;
pub const _SC_V6_LPBIG_OFFBIG: ::libc::c_uint = 179;
pub const _SC_HOST_NAME_MAX: ::libc::c_uint = 180;
pub const _SC_TRACE: ::libc::c_uint = 181;
pub const _SC_TRACE_EVENT_FILTER: ::libc::c_uint = 182;
pub const _SC_TRACE_INHERIT: ::libc::c_uint = 183;
pub const _SC_TRACE_LOG: ::libc::c_uint = 184;
pub const _SC_LEVEL1_ICACHE_SIZE: ::libc::c_uint = 185;
pub const _SC_LEVEL1_ICACHE_ASSOC: ::libc::c_uint = 186;
pub const _SC_LEVEL1_ICACHE_LINESIZE: ::libc::c_uint = 187;
pub const _SC_LEVEL1_DCACHE_SIZE: ::libc::c_uint = 188;
pub const _SC_LEVEL1_DCACHE_ASSOC: ::libc::c_uint = 189;
pub const _SC_LEVEL1_DCACHE_LINESIZE: ::libc::c_uint = 190;
pub const _SC_LEVEL2_CACHE_SIZE: ::libc::c_uint = 191;
pub const _SC_LEVEL2_CACHE_ASSOC: ::libc::c_uint = 192;
pub const _SC_LEVEL2_CACHE_LINESIZE: ::libc::c_uint = 193;
pub const _SC_LEVEL3_CACHE_SIZE: ::libc::c_uint = 194;
pub const _SC_LEVEL3_CACHE_ASSOC: ::libc::c_uint = 195;
pub const _SC_LEVEL3_CACHE_LINESIZE: ::libc::c_uint = 196;
pub const _SC_LEVEL4_CACHE_SIZE: ::libc::c_uint = 197;
pub const _SC_LEVEL4_CACHE_ASSOC: ::libc::c_uint = 198;
pub const _SC_LEVEL4_CACHE_LINESIZE: ::libc::c_uint = 199;
pub const _SC_IPV6: ::libc::c_uint = 235;
pub const _SC_RAW_SOCKETS: ::libc::c_uint = 236;
pub const _SC_V7_ILP32_OFF32: ::libc::c_uint = 237;
pub const _SC_V7_ILP32_OFFBIG: ::libc::c_uint = 238;
pub const _SC_V7_LP64_OFF64: ::libc::c_uint = 239;
pub const _SC_V7_LPBIG_OFFBIG: ::libc::c_uint = 240;
pub const _SC_SS_REPL_MAX: ::libc::c_uint = 241;
pub const _SC_TRACE_EVENT_NAME_MAX: ::libc::c_uint = 242;
pub const _SC_TRACE_NAME_MAX: ::libc::c_uint = 243;
pub const _SC_TRACE_SYS_MAX: ::libc::c_uint = 244;
pub const _SC_TRACE_USER_EVENT_MAX: ::libc::c_uint = 245;
pub const _SC_XOPEN_STREAMS: ::libc::c_uint = 246;
pub const _SC_THREAD_ROBUST_PRIO_INHERIT: ::libc::c_uint = 247;
pub const _SC_THREAD_ROBUST_PRIO_PROTECT: ::libc::c_uint = 248;
pub type Enum_Unnamed32 = ::libc::c_uint;
pub const _CS_PATH: ::libc::c_uint = 0;
pub const _CS_V6_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 1;
pub const _CS_GNU_LIBC_VERSION: ::libc::c_uint = 2;
pub const _CS_GNU_LIBPTHREAD_VERSION: ::libc::c_uint = 3;
pub const _CS_V5_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 4;
pub const _CS_V7_WIDTH_RESTRICTED_ENVS: ::libc::c_uint = 5;
pub const _CS_LFS_CFLAGS: ::libc::c_uint = 1000;
pub const _CS_LFS_LDFLAGS: ::libc::c_uint = 1001;
pub const _CS_LFS_LIBS: ::libc::c_uint = 1002;
pub const _CS_LFS_LINTFLAGS: ::libc::c_uint = 1003;
pub const _CS_LFS64_CFLAGS: ::libc::c_uint = 1004;
pub const _CS_LFS64_LDFLAGS: ::libc::c_uint = 1005;
pub const _CS_LFS64_LIBS: ::libc::c_uint = 1006;
pub const _CS_LFS64_LINTFLAGS: ::libc::c_uint = 1007;
pub const _CS_XBS5_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1100;
pub const _CS_XBS5_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1101;
pub const _CS_XBS5_ILP32_OFF32_LIBS: ::libc::c_uint = 1102;
pub const _CS_XBS5_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1103;
pub const _CS_XBS5_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1104;
pub const _CS_XBS5_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1105;
pub const _CS_XBS5_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1106;
pub const _CS_XBS5_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1107;
pub const _CS_XBS5_LP64_OFF64_CFLAGS: ::libc::c_uint = 1108;
pub const _CS_XBS5_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1109;
pub const _CS_XBS5_LP64_OFF64_LIBS: ::libc::c_uint = 1110;
pub const _CS_XBS5_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1111;
pub const _CS_XBS5_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1112;
pub const _CS_XBS5_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1113;
pub const _CS_XBS5_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1114;
pub const _CS_XBS5_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1115;
pub const _CS_POSIX_V6_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1116;
pub const _CS_POSIX_V6_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1117;
pub const _CS_POSIX_V6_ILP32_OFF32_LIBS: ::libc::c_uint = 1118;
pub const _CS_POSIX_V6_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1119;
pub const _CS_POSIX_V6_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1120;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1121;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1122;
pub const _CS_POSIX_V6_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1123;
pub const _CS_POSIX_V6_LP64_OFF64_CFLAGS: ::libc::c_uint = 1124;
pub const _CS_POSIX_V6_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1125;
pub const _CS_POSIX_V6_LP64_OFF64_LIBS: ::libc::c_uint = 1126;
pub const _CS_POSIX_V6_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1127;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1128;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1129;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1130;
pub const _CS_POSIX_V6_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1131;
pub const _CS_POSIX_V7_ILP32_OFF32_CFLAGS: ::libc::c_uint = 1132;
pub const _CS_POSIX_V7_ILP32_OFF32_LDFLAGS: ::libc::c_uint = 1133;
pub const _CS_POSIX_V7_ILP32_OFF32_LIBS: ::libc::c_uint = 1134;
pub const _CS_POSIX_V7_ILP32_OFF32_LINTFLAGS: ::libc::c_uint = 1135;
pub const _CS_POSIX_V7_ILP32_OFFBIG_CFLAGS: ::libc::c_uint = 1136;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LDFLAGS: ::libc::c_uint = 1137;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LIBS: ::libc::c_uint = 1138;
pub const _CS_POSIX_V7_ILP32_OFFBIG_LINTFLAGS: ::libc::c_uint = 1139;
pub const _CS_POSIX_V7_LP64_OFF64_CFLAGS: ::libc::c_uint = 1140;
pub const _CS_POSIX_V7_LP64_OFF64_LDFLAGS: ::libc::c_uint = 1141;
pub const _CS_POSIX_V7_LP64_OFF64_LIBS: ::libc::c_uint = 1142;
pub const _CS_POSIX_V7_LP64_OFF64_LINTFLAGS: ::libc::c_uint = 1143;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_CFLAGS: ::libc::c_uint = 1144;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LDFLAGS: ::libc::c_uint = 1145;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LIBS: ::libc::c_uint = 1146;
pub const _CS_POSIX_V7_LPBIG_OFFBIG_LINTFLAGS: ::libc::c_uint = 1147;
pub const _CS_V6_ENV: ::libc::c_uint = 1148;
pub const _CS_V7_ENV: ::libc::c_uint = 1149;
pub type sig_atomic_t = __sig_atomic_t;
#[repr(C)]
#[derive(Copy)]
pub struct Union_sigval {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_sigval {
    pub unsafe fn sival_int(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sival_ptr(&mut self) -> *mut *mut ::libc::c_void {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_sigval {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_sigval {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigval_t = Union_sigval;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed33 {
    pub si_signo: ::libc::c_int,
    pub si_errno: ::libc::c_int,
    pub si_code: ::libc::c_int,
    pub _sifields: Union_Unnamed34,
}
impl ::std::clone::Clone for Struct_Unnamed33 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed33 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed34 {
    pub _bindgen_data_: [u32; 29usize],
}
impl Union_Unnamed34 {
    pub unsafe fn _pad(&mut self) -> *mut [::libc::c_int; 29usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _kill(&mut self) -> *mut Struct_Unnamed35 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _timer(&mut self) -> *mut Struct_Unnamed36 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _rt(&mut self) -> *mut Struct_Unnamed37 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigchld(&mut self) -> *mut Struct_Unnamed38 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigfault(&mut self) -> *mut Struct_Unnamed39 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigpoll(&mut self) -> *mut Struct_Unnamed40 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigsys(&mut self) -> *mut Struct_Unnamed41 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed34 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed34 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed35 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
}
impl ::std::clone::Clone for Struct_Unnamed35 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed35 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed36 {
    pub si_tid: ::libc::c_int,
    pub si_overrun: ::libc::c_int,
    pub si_sigval: sigval_t,
}
impl ::std::clone::Clone for Struct_Unnamed36 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed36 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed37 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_sigval: sigval_t,
}
impl ::std::clone::Clone for Struct_Unnamed37 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed37 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed38 {
    pub si_pid: __pid_t,
    pub si_uid: __uid_t,
    pub si_status: ::libc::c_int,
    pub si_utime: __clock_t,
    pub si_stime: __clock_t,
}
impl ::std::clone::Clone for Struct_Unnamed38 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed38 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed39 {
    pub si_addr: *mut ::libc::c_void,
    pub si_addr_lsb: ::libc::c_short,
}
impl ::std::clone::Clone for Struct_Unnamed39 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed39 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed40 {
    pub si_band: ::libc::c_long,
    pub si_fd: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed40 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed40 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed41 {
    pub _call_addr: *mut ::libc::c_void,
    pub _syscall: ::libc::c_int,
    pub _arch: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed41 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed41 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type siginfo_t = Struct_Unnamed33;
pub type Enum_Unnamed42 = ::libc::c_int;
pub const SI_ASYNCNL: ::libc::c_int = -60;
pub const SI_TKILL: ::libc::c_int = -6;
pub const SI_SIGIO: ::libc::c_int = -5;
pub const SI_ASYNCIO: ::libc::c_int = -4;
pub const SI_MESGQ: ::libc::c_int = -3;
pub const SI_TIMER: ::libc::c_int = -2;
pub const SI_QUEUE: ::libc::c_int = -1;
pub const SI_USER: ::libc::c_int = 0;
pub const SI_KERNEL: ::libc::c_int = 128;
pub type Enum_Unnamed43 = ::libc::c_uint;
pub const ILL_ILLOPC: ::libc::c_uint = 1;
pub const ILL_ILLOPN: ::libc::c_uint = 2;
pub const ILL_ILLADR: ::libc::c_uint = 3;
pub const ILL_ILLTRP: ::libc::c_uint = 4;
pub const ILL_PRVOPC: ::libc::c_uint = 5;
pub const ILL_PRVREG: ::libc::c_uint = 6;
pub const ILL_COPROC: ::libc::c_uint = 7;
pub const ILL_BADSTK: ::libc::c_uint = 8;
pub type Enum_Unnamed44 = ::libc::c_uint;
pub const FPE_INTDIV: ::libc::c_uint = 1;
pub const FPE_INTOVF: ::libc::c_uint = 2;
pub const FPE_FLTDIV: ::libc::c_uint = 3;
pub const FPE_FLTOVF: ::libc::c_uint = 4;
pub const FPE_FLTUND: ::libc::c_uint = 5;
pub const FPE_FLTRES: ::libc::c_uint = 6;
pub const FPE_FLTINV: ::libc::c_uint = 7;
pub const FPE_FLTSUB: ::libc::c_uint = 8;
pub type Enum_Unnamed45 = ::libc::c_uint;
pub const SEGV_MAPERR: ::libc::c_uint = 1;
pub const SEGV_ACCERR: ::libc::c_uint = 2;
pub type Enum_Unnamed46 = ::libc::c_uint;
pub const BUS_ADRALN: ::libc::c_uint = 1;
pub const BUS_ADRERR: ::libc::c_uint = 2;
pub const BUS_OBJERR: ::libc::c_uint = 3;
pub const BUS_MCEERR_AR: ::libc::c_uint = 4;
pub const BUS_MCEERR_AO: ::libc::c_uint = 5;
pub type Enum_Unnamed47 = ::libc::c_uint;
pub const TRAP_BRKPT: ::libc::c_uint = 1;
pub const TRAP_TRACE: ::libc::c_uint = 2;
pub type Enum_Unnamed48 = ::libc::c_uint;
pub const CLD_EXITED: ::libc::c_uint = 1;
pub const CLD_KILLED: ::libc::c_uint = 2;
pub const CLD_DUMPED: ::libc::c_uint = 3;
pub const CLD_TRAPPED: ::libc::c_uint = 4;
pub const CLD_STOPPED: ::libc::c_uint = 5;
pub const CLD_CONTINUED: ::libc::c_uint = 6;
pub type Enum_Unnamed49 = ::libc::c_uint;
pub const POLL_IN: ::libc::c_uint = 1;
pub const POLL_OUT: ::libc::c_uint = 2;
pub const POLL_MSG: ::libc::c_uint = 3;
pub const POLL_ERR: ::libc::c_uint = 4;
pub const POLL_PRI: ::libc::c_uint = 5;
pub const POLL_HUP: ::libc::c_uint = 6;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigevent {
    pub sigev_value: sigval_t,
    pub sigev_signo: ::libc::c_int,
    pub sigev_notify: ::libc::c_int,
    pub _sigev_un: Union_Unnamed50,
}
impl ::std::clone::Clone for Struct_sigevent {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigevent {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed50 {
    pub _bindgen_data_: [u32; 13usize],
}
impl Union_Unnamed50 {
    pub unsafe fn _pad(&mut self) -> *mut [::libc::c_int; 13usize] {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _tid(&mut self) -> *mut __pid_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn _sigev_thread(&mut self) -> *mut Struct_Unnamed51 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed50 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed50 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed51 {
    pub _function: ::std::option::Option<extern "C" fn(arg1: sigval_t) -> ()>,
    pub _attribute: *mut pthread_attr_t,
}
impl ::std::clone::Clone for Struct_Unnamed51 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed51 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type sigevent_t = Struct_sigevent;
pub type Enum_Unnamed52 = ::libc::c_uint;
pub const SIGEV_SIGNAL: ::libc::c_uint = 0;
pub const SIGEV_NONE: ::libc::c_uint = 1;
pub const SIGEV_THREAD: ::libc::c_uint = 2;
pub const SIGEV_THREAD_ID: ::libc::c_uint = 4;
pub type __sighandler_t =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int) -> ()>;
pub type sig_t = __sighandler_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaction {
    pub __sigaction_handler: Union_Unnamed53,
    pub sa_mask: __sigset_t,
    pub sa_flags: ::libc::c_int,
    pub sa_restorer: ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::clone::Clone for Struct_sigaction {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaction {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed53 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed53 {
    pub unsafe fn sa_handler(&mut self) -> *mut __sighandler_t {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn sa_sigaction(&mut self)
     ->
         *mut ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                                  arg2: *mut siginfo_t,
                                                  arg3: *mut ::libc::c_void)
                                        -> ()> {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed53 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed53 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigvec {
    pub sv_handler: __sighandler_t,
    pub sv_mask: ::libc::c_int,
    pub sv_flags: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigvec {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigvec {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigcontext {
    pub trap_no: ::libc::c_ulong,
    pub error_code: ::libc::c_ulong,
    pub oldmask: ::libc::c_ulong,
    pub arm_r0: ::libc::c_ulong,
    pub arm_r1: ::libc::c_ulong,
    pub arm_r2: ::libc::c_ulong,
    pub arm_r3: ::libc::c_ulong,
    pub arm_r4: ::libc::c_ulong,
    pub arm_r5: ::libc::c_ulong,
    pub arm_r6: ::libc::c_ulong,
    pub arm_r7: ::libc::c_ulong,
    pub arm_r8: ::libc::c_ulong,
    pub arm_r9: ::libc::c_ulong,
    pub arm_r10: ::libc::c_ulong,
    pub arm_fp: ::libc::c_ulong,
    pub arm_ip: ::libc::c_ulong,
    pub arm_sp: ::libc::c_ulong,
    pub arm_lr: ::libc::c_ulong,
    pub arm_pc: ::libc::c_ulong,
    pub arm_cpsr: ::libc::c_ulong,
    pub fault_address: ::libc::c_ulong,
}
impl ::std::clone::Clone for Struct_sigcontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigcontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_onstack: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_sigstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type Enum_Unnamed54 = ::libc::c_uint;
pub const SS_ONSTACK: ::libc::c_uint = 1;
pub const SS_DISABLE: ::libc::c_uint = 2;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_sigaltstack {
    pub ss_sp: *mut ::libc::c_void,
    pub ss_flags: ::libc::c_int,
    pub ss_size: size_t,
}
impl ::std::clone::Clone for Struct_sigaltstack {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_sigaltstack {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type stack_t = Struct_sigaltstack;
pub type greg_t = ::libc::c_int;
pub type gregset_t = [greg_t; 18usize];
pub type Enum_Unnamed55 = ::libc::c_uint;
pub const REG_R0: ::libc::c_uint = 0;
pub const REG_R1: ::libc::c_uint = 1;
pub const REG_R2: ::libc::c_uint = 2;
pub const REG_R3: ::libc::c_uint = 3;
pub const REG_R4: ::libc::c_uint = 4;
pub const REG_R5: ::libc::c_uint = 5;
pub const REG_R6: ::libc::c_uint = 6;
pub const REG_R7: ::libc::c_uint = 7;
pub const REG_R8: ::libc::c_uint = 8;
pub const REG_R9: ::libc::c_uint = 9;
pub const REG_R10: ::libc::c_uint = 10;
pub const REG_R11: ::libc::c_uint = 11;
pub const REG_R12: ::libc::c_uint = 12;
pub const REG_R13: ::libc::c_uint = 13;
pub const REG_R14: ::libc::c_uint = 14;
pub const REG_R15: ::libc::c_uint = 15;
#[repr(C)]
#[derive(Copy)]
pub struct Struct__libc_fpstate {
    pub fpregs: [Struct_Unnamed56; 8usize],
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub _bindgen_bitfield_2_: ::libc::c_uint,
    pub ftype: [::libc::c_uchar; 8usize],
    pub init_flag: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct__libc_fpstate {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__libc_fpstate {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed56 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
    pub _bindgen_bitfield_2_: ::libc::c_uint,
    pub _bindgen_bitfield_3_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed56 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed56 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type fpregset_t = Struct__libc_fpstate;
pub type mcontext_t = Struct_sigcontext;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_ucontext {
    pub uc_flags: ::libc::c_ulong,
    pub uc_link: *mut Struct_ucontext,
    pub uc_stack: stack_t,
    pub uc_mcontext: mcontext_t,
    pub uc_sigmask: __sigset_t,
    pub uc_regspace: [::libc::c_ulong; 128usize],
}
impl ::std::clone::Clone for Struct_ucontext {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_ucontext {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ucontext_t = Struct_ucontext;
pub type Enum_Unnamed57 = ::libc::c_uint;
pub const P_ALL: ::libc::c_uint = 0;
pub const P_PID: ::libc::c_uint = 1;
pub const P_PGID: ::libc::c_uint = 2;
pub type idtype_t = Enum_Unnamed57;
#[repr(C)]
#[derive(Copy)]
pub struct Union_wait {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_wait {
    pub unsafe fn w_status(&mut self) -> *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_terminated(&mut self) -> *mut Struct_Unnamed58 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __wait_stopped(&mut self) -> *mut Struct_Unnamed59 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_wait {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_wait {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed58 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed58 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed58 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed59 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed59 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed59 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed60 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed60 {
    pub unsafe fn __uptr(&mut self) -> *mut *mut Union_wait {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn __iptr(&mut self) -> *mut *mut ::libc::c_int {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed60 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed60 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __WAIT_STATUS = Union_Unnamed60;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed61 {
    pub quot: ::libc::c_int,
    pub rem: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed61 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed61 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type div_t = Struct_Unnamed61;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed62 {
    pub quot: ::libc::c_long,
    pub rem: ::libc::c_long,
}
impl ::std::clone::Clone for Struct_Unnamed62 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed62 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type ldiv_t = Struct_Unnamed62;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed63 {
    pub quot: ::libc::c_longlong,
    pub rem: ::libc::c_longlong,
}
impl ::std::clone::Clone for Struct_Unnamed63 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed63 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type lldiv_t = Struct_Unnamed63;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_random_data {
    pub fptr: *mut int32_t,
    pub rptr: *mut int32_t,
    pub state: *mut int32_t,
    pub rand_type: ::libc::c_int,
    pub rand_deg: ::libc::c_int,
    pub rand_sep: ::libc::c_int,
    pub end_ptr: *mut int32_t,
}
impl ::std::clone::Clone for Struct_random_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_random_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_drand48_data {
    pub __x: [::libc::c_ushort; 3usize],
    pub __old_x: [::libc::c_ushort; 3usize],
    pub __c: ::libc::c_ushort,
    pub __init: ::libc::c_ushort,
    pub __a: ::libc::c_ulonglong,
}
impl ::std::clone::Clone for Struct_drand48_data {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_drand48_data {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type __compar_fn_t =
    ::std::option::Option<extern "C" fn(arg1: *const ::libc::c_void,
                                        arg2: *const ::libc::c_void)
                              -> ::libc::c_int>;
pub type VCOS_SEMAPHORE_T = sem_t;
pub type VCOS_UNSIGNED = uint32_t;
pub type VCOS_OPTION = uint32_t;
pub type VCOS_TLS_KEY_T = pthread_key_t;
pub type VCOS_ONCE_T = pthread_once_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_LLTHREAD_T {
    pub thread: pthread_t,
}
impl ::std::clone::Clone for Struct_VCOS_LLTHREAD_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_LLTHREAD_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_LLTHREAD_T = Struct_VCOS_LLTHREAD_T;
pub type VCOS_MUTEX_T = pthread_mutex_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed64 {
    pub mutex: VCOS_MUTEX_T,
    pub sem: sem_t,
}
impl ::std::clone::Clone for Struct_Unnamed64 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed64 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_EVENT_T = Struct_Unnamed64;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_TIMER_T {
    pub thread: pthread_t,
    pub lock: pthread_mutex_t,
    pub settings_changed: pthread_cond_t,
    pub quit: ::libc::c_int,
    pub expires: Struct_timespec,
    pub orig_expiration_routine: ::std::option::Option<extern "C" fn(arg1:
                                                                         *mut ::libc::c_void)
                                                           -> ()>,
    pub orig_context: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_VCOS_TIMER_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_TIMER_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_TIMER_T = Struct_VCOS_TIMER_T;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_THREAD_ATTR_T {
    pub ta_stackaddr: *mut ::libc::c_void,
    pub ta_stacksz: VCOS_UNSIGNED,
    pub ta_priority: VCOS_UNSIGNED,
    pub ta_affinity: VCOS_UNSIGNED,
    pub ta_timeslice: VCOS_UNSIGNED,
    pub legacy: VCOS_UNSIGNED,
}
impl ::std::clone::Clone for Struct_VCOS_THREAD_ATTR_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_THREAD_ATTR_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_THREAD_ATTR_T = Struct_VCOS_THREAD_ATTR_T;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_THREAD_EXIT_T {
    pub pfn: ::std::option::Option<extern "C" fn(arg1: *mut ::libc::c_void)
                                       -> ()>,
    pub cxt: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_VCOS_THREAD_EXIT_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_THREAD_EXIT_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_THREAD_EXIT_T = Struct_VCOS_THREAD_EXIT_T;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_THREAD_T {
    pub thread: pthread_t,
    pub entry: VCOS_THREAD_ENTRY_FN_T,
    pub arg: *mut ::libc::c_void,
    pub suspend: VCOS_SEMAPHORE_T,
    pub task_timer: VCOS_TIMER_T,
    pub task_timer_created: ::libc::c_int,
    pub orig_task_timer_expiration_routine: ::std::option::Option<extern "C" fn(arg1:
                                                                                    *mut ::libc::c_void)
                                                                      -> ()>,
    pub orig_task_timer_context: *mut ::libc::c_void,
    pub legacy: VCOS_UNSIGNED,
    pub name: [::libc::c_uchar; 16usize],
    pub dummy: VCOS_UNSIGNED,
    pub at_exit: [VCOS_THREAD_EXIT_T; 4usize],
}
impl ::std::clone::Clone for Struct_VCOS_THREAD_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_THREAD_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_THREAD_T = Struct_VCOS_THREAD_T;
pub enum Struct_VCOS_EVENT_WAITER_T { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_EVENT_FLAGS_T {
    pub events: VCOS_UNSIGNED,
    pub lock: VCOS_MUTEX_T,
    pub waiters: Struct_Unnamed65,
}
impl ::std::clone::Clone for Struct_VCOS_EVENT_FLAGS_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_EVENT_FLAGS_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed65 {
    pub head: *mut Struct_VCOS_EVENT_WAITER_T,
    pub tail: *mut Struct_VCOS_EVENT_WAITER_T,
}
impl ::std::clone::Clone for Struct_Unnamed65 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed65 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_EVENT_FLAGS_T = Struct_VCOS_EVENT_FLAGS_T;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_BLOCKPOOL_HEADER_TAG {
    pub owner: Union_Unnamed66,
}
impl ::std::clone::Clone for Struct_VCOS_BLOCKPOOL_HEADER_TAG {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_BLOCKPOOL_HEADER_TAG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed66 {
    pub _bindgen_data_: [u32; 1usize],
}
impl Union_Unnamed66 {
    pub unsafe fn next(&mut self)
     -> *mut *mut Struct_VCOS_BLOCKPOOL_HEADER_TAG {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn subpool(&mut self)
     -> *mut *mut Struct_VCOS_BLOCKPOOL_SUBPOOL_TAG {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed66 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed66 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_BLOCKPOOL_HEADER_T = Struct_VCOS_BLOCKPOOL_HEADER_TAG;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_BLOCKPOOL_SUBPOOL_TAG {
    pub magic: uint32_t,
    pub free_list: *mut VCOS_BLOCKPOOL_HEADER_T,
    pub mem: *mut ::libc::c_void,
    pub start: *mut ::libc::c_void,
    pub end: *mut ::libc::c_void,
    pub num_blocks: VCOS_UNSIGNED,
    pub available_blocks: VCOS_UNSIGNED,
    pub owner: *mut Struct_VCOS_BLOCKPOOL_TAG,
    pub flags: uint32_t,
}
impl ::std::clone::Clone for Struct_VCOS_BLOCKPOOL_SUBPOOL_TAG {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_BLOCKPOOL_SUBPOOL_TAG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_BLOCKPOOL_SUBPOOL_T = Struct_VCOS_BLOCKPOOL_SUBPOOL_TAG;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_BLOCKPOOL_TAG {
    pub magic: uint32_t,
    pub mutex: VCOS_MUTEX_T,
    pub align: VCOS_UNSIGNED,
    pub flags: VCOS_UNSIGNED,
    pub block_data_size: size_t,
    pub block_size: size_t,
    pub name: *const ::libc::c_uchar,
    pub num_subpools: VCOS_UNSIGNED,
    pub num_extension_blocks: VCOS_UNSIGNED,
    pub subpools: [VCOS_BLOCKPOOL_SUBPOOL_T; 8usize],
}
impl ::std::clone::Clone for Struct_VCOS_BLOCKPOOL_TAG {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_BLOCKPOOL_TAG {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_BLOCKPOOL_T = Struct_VCOS_BLOCKPOOL_TAG;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed67 {
    pub mutex: VCOS_MUTEX_T,
    pub flags: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed67 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed67 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_ATOMIC_FLAGS_T = Struct_Unnamed67;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_REENTRANT_MUTEX_T {
    pub mutex: VCOS_MUTEX_T,
    pub owner: *mut VCOS_THREAD_T,
    pub count: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_VCOS_REENTRANT_MUTEX_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_REENTRANT_MUTEX_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_REENTRANT_MUTEX_T = Struct_VCOS_REENTRANT_MUTEX_T;
pub enum Struct_VCOS_NAMED_SEMAPHORE_IMPL_T { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_NAMED_SEMAPHORE_T {
    pub actual: *mut Struct_VCOS_NAMED_SEMAPHORE_IMPL_T,
    pub sem: *mut VCOS_SEMAPHORE_T,
}
impl ::std::clone::Clone for Struct_VCOS_NAMED_SEMAPHORE_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_NAMED_SEMAPHORE_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_NAMED_SEMAPHORE_T = Struct_VCOS_NAMED_SEMAPHORE_T;
pub type VCOS_QUICKSLOW_MUTEX_T = VCOS_MUTEX_T;
pub type VCOS_ISR_HANDLER_T =
    ::std::option::Option<extern "C" fn(vecnum: VCOS_UNSIGNED) -> ()>;

pub type Enum_VCOS_LOG_LEVEL_T = ::libc::c_uint;
pub const VCOS_LOG_UNINITIALIZED: ::libc::c_uint = 0;
pub const VCOS_LOG_NEVER: ::libc::c_uint = 1;
pub const VCOS_LOG_ERROR: ::libc::c_uint = 2;
pub const VCOS_LOG_WARN: ::libc::c_uint = 3;
pub const VCOS_LOG_INFO: ::libc::c_uint = 4;
pub const VCOS_LOG_TRACE: ::libc::c_uint = 5;
pub type VCOS_LOG_LEVEL_T = Enum_VCOS_LOG_LEVEL_T;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_LOG_CAT_T {
    pub level: VCOS_LOG_LEVEL_T,
    pub name: *const ::libc::c_uchar,
    pub next: *mut Struct_VCOS_LOG_CAT_T,
    pub flags: Struct_Unnamed68,
    pub refcount: ::libc::c_uint,
    pub platform_data: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_VCOS_LOG_CAT_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_LOG_CAT_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed68 {
    pub _bindgen_bitfield_1_: ::libc::c_uint,
}
impl ::std::clone::Clone for Struct_Unnamed68 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed68 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_LOG_CAT_T = Struct_VCOS_LOG_CAT_T;
pub type VCOS_CMD_T = Struct_VCOS_CMD_S;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed69 {
    pub argc: ::libc::c_int,
    pub argv: *mut *mut ::libc::c_uchar,
    pub argv_orig: *mut *mut ::libc::c_uchar,
    pub cmd_entry: *mut VCOS_CMD_T,
    pub cmd_parent_entry: *mut VCOS_CMD_T,
    pub use_log: ::libc::c_int,
    pub result_size: size_t,
    pub result_ptr: *mut ::libc::c_uchar,
    pub result_buf: *mut ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_Unnamed69 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed69 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_CMD_PARAM_T = Struct_Unnamed69;
pub type VCOS_CMD_FUNC_T =
    ::std::option::Option<extern "C" fn(param: *mut VCOS_CMD_PARAM_T)
                              -> VCOS_STATUS_T>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_VCOS_CMD_S {
    pub name: *const ::libc::c_uchar,
    pub args: *const ::libc::c_uchar,
    pub cmd_fn: VCOS_CMD_FUNC_T,
    pub sub_cmd_entry: *mut VCOS_CMD_T,
    pub descr: *const ::libc::c_uchar,
}
impl ::std::clone::Clone for Struct_VCOS_CMD_S {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_VCOS_CMD_S {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCOS_EVENTGROUP_OPERATION_T = VCOS_OPTION;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tag_VC_RECT_T {
    pub x: int32_t,
    pub y: int32_t,
    pub width: int32_t,
    pub height: int32_t,
}
impl ::std::clone::Clone for Struct_tag_VC_RECT_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tag_VC_RECT_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VC_RECT_T = Struct_tag_VC_RECT_T;
pub enum Struct_VC_IMAGE_T { }
pub type VC_IMAGE_T = Struct_VC_IMAGE_T;
pub type Enum_Unnamed70 = ::libc::c_uint;
pub const VC_IMAGE_MIN: ::libc::c_uint = 0;
pub const VC_IMAGE_RGB565: ::libc::c_uint = 1;
pub const VC_IMAGE_1BPP: ::libc::c_uint = 2;
pub const VC_IMAGE_YUV420: ::libc::c_uint = 3;
pub const VC_IMAGE_48BPP: ::libc::c_uint = 4;
pub const VC_IMAGE_RGB888: ::libc::c_uint = 5;
pub const VC_IMAGE_8BPP: ::libc::c_uint = 6;
pub const VC_IMAGE_4BPP: ::libc::c_uint = 7;
pub const VC_IMAGE_3D32: ::libc::c_uint = 8;
pub const VC_IMAGE_3D32B: ::libc::c_uint = 9;
pub const VC_IMAGE_3D32MAT: ::libc::c_uint = 10;
pub const VC_IMAGE_RGB2X9: ::libc::c_uint = 11;
pub const VC_IMAGE_RGB666: ::libc::c_uint = 12;
pub const VC_IMAGE_PAL4_OBSOLETE: ::libc::c_uint = 13;
pub const VC_IMAGE_PAL8_OBSOLETE: ::libc::c_uint = 14;
pub const VC_IMAGE_RGBA32: ::libc::c_uint = 15;
pub const VC_IMAGE_YUV422: ::libc::c_uint = 16;
pub const VC_IMAGE_RGBA565: ::libc::c_uint = 17;
pub const VC_IMAGE_RGBA16: ::libc::c_uint = 18;
pub const VC_IMAGE_YUV_UV: ::libc::c_uint = 19;
pub const VC_IMAGE_TF_RGBA32: ::libc::c_uint = 20;
pub const VC_IMAGE_TF_RGBX32: ::libc::c_uint = 21;
pub const VC_IMAGE_TF_FLOAT: ::libc::c_uint = 22;
pub const VC_IMAGE_TF_RGBA16: ::libc::c_uint = 23;
pub const VC_IMAGE_TF_RGBA5551: ::libc::c_uint = 24;
pub const VC_IMAGE_TF_RGB565: ::libc::c_uint = 25;
pub const VC_IMAGE_TF_YA88: ::libc::c_uint = 26;
pub const VC_IMAGE_TF_BYTE: ::libc::c_uint = 27;
pub const VC_IMAGE_TF_PAL8: ::libc::c_uint = 28;
pub const VC_IMAGE_TF_PAL4: ::libc::c_uint = 29;
pub const VC_IMAGE_TF_ETC1: ::libc::c_uint = 30;
pub const VC_IMAGE_BGR888: ::libc::c_uint = 31;
pub const VC_IMAGE_BGR888_NP: ::libc::c_uint = 32;
pub const VC_IMAGE_BAYER: ::libc::c_uint = 33;
pub const VC_IMAGE_CODEC: ::libc::c_uint = 34;
pub const VC_IMAGE_YUV_UV32: ::libc::c_uint = 35;
pub const VC_IMAGE_TF_Y8: ::libc::c_uint = 36;
pub const VC_IMAGE_TF_A8: ::libc::c_uint = 37;
pub const VC_IMAGE_TF_SHORT: ::libc::c_uint = 38;
pub const VC_IMAGE_TF_1BPP: ::libc::c_uint = 39;
pub const VC_IMAGE_OPENGL: ::libc::c_uint = 40;
pub const VC_IMAGE_YUV444I: ::libc::c_uint = 41;
pub const VC_IMAGE_YUV422PLANAR: ::libc::c_uint = 42;
pub const VC_IMAGE_ARGB8888: ::libc::c_uint = 43;
pub const VC_IMAGE_XRGB8888: ::libc::c_uint = 44;
pub const VC_IMAGE_YUV422YUYV: ::libc::c_uint = 45;
pub const VC_IMAGE_YUV422YVYU: ::libc::c_uint = 46;
pub const VC_IMAGE_YUV422UYVY: ::libc::c_uint = 47;
pub const VC_IMAGE_YUV422VYUY: ::libc::c_uint = 48;
pub const VC_IMAGE_RGBX32: ::libc::c_uint = 49;
pub const VC_IMAGE_RGBX8888: ::libc::c_uint = 50;
pub const VC_IMAGE_BGRX8888: ::libc::c_uint = 51;
pub const VC_IMAGE_YUV420SP: ::libc::c_uint = 52;
pub const VC_IMAGE_YUV444PLANAR: ::libc::c_uint = 53;
pub const VC_IMAGE_TF_U8: ::libc::c_uint = 54;
pub const VC_IMAGE_TF_V8: ::libc::c_uint = 55;
pub const VC_IMAGE_MAX: ::libc::c_uint = 56;
pub const VC_IMAGE_FORCE_ENUM_16BIT: ::libc::c_uint = 65535;
pub type VC_IMAGE_TYPE_T = Enum_Unnamed70;
pub type Enum_Unnamed71 = ::libc::c_uint;
pub const VC_IMAGE_ROT0: ::libc::c_uint = 0;
pub const VC_IMAGE_MIRROR_ROT0: ::libc::c_uint = 1;
pub const VC_IMAGE_MIRROR_ROT180: ::libc::c_uint = 2;
pub const VC_IMAGE_ROT180: ::libc::c_uint = 3;
pub const VC_IMAGE_MIRROR_ROT90: ::libc::c_uint = 4;
pub const VC_IMAGE_ROT270: ::libc::c_uint = 5;
pub const VC_IMAGE_ROT90: ::libc::c_uint = 6;
pub const VC_IMAGE_MIRROR_ROT270: ::libc::c_uint = 7;
pub type VC_IMAGE_TRANSFORM_T = Enum_Unnamed71;
pub type Enum_Unnamed72 = ::libc::c_uint;
pub const VC_IMAGE_BAYER_RGGB: ::libc::c_uint = 0;
pub const VC_IMAGE_BAYER_GBRG: ::libc::c_uint = 1;
pub const VC_IMAGE_BAYER_BGGR: ::libc::c_uint = 2;
pub const VC_IMAGE_BAYER_GRBG: ::libc::c_uint = 3;
pub type VC_IMAGE_BAYER_ORDER_T = Enum_Unnamed72;
pub type Enum_Unnamed73 = ::libc::c_uint;
pub const VC_IMAGE_BAYER_RAW6: ::libc::c_uint = 0;
pub const VC_IMAGE_BAYER_RAW7: ::libc::c_uint = 1;
pub const VC_IMAGE_BAYER_RAW8: ::libc::c_uint = 2;
pub const VC_IMAGE_BAYER_RAW10: ::libc::c_uint = 3;
pub const VC_IMAGE_BAYER_RAW12: ::libc::c_uint = 4;
pub const VC_IMAGE_BAYER_RAW14: ::libc::c_uint = 5;
pub const VC_IMAGE_BAYER_RAW16: ::libc::c_uint = 6;
pub const VC_IMAGE_BAYER_RAW10_8: ::libc::c_uint = 7;
pub const VC_IMAGE_BAYER_RAW12_8: ::libc::c_uint = 8;
pub const VC_IMAGE_BAYER_RAW14_8: ::libc::c_uint = 9;
pub const VC_IMAGE_BAYER_RAW10L: ::libc::c_uint = 11;
pub const VC_IMAGE_BAYER_RAW12L: ::libc::c_uint = 12;
pub const VC_IMAGE_BAYER_RAW14L: ::libc::c_uint = 13;
pub const VC_IMAGE_BAYER_RAW16_BIG_ENDIAN: ::libc::c_uint = 14;
pub const VC_IMAGE_BAYER_RAW4: ::libc::c_uint = 15;
pub type VC_IMAGE_BAYER_FORMAT_T = Enum_Unnamed73;
pub type Enum_Unnamed74 = ::libc::c_uint;
pub const VC_FORMAT_RGB565: ::libc::c_uint = 1;
pub const VC_FORMAT_YUV420: ::libc::c_uint = 3;
pub const VC_FORMAT_RGB888: ::libc::c_uint = 5;
pub const VC_FORMAT_RGBA32: ::libc::c_uint = 15;
pub const VC_FORMAT_RGBA565: ::libc::c_uint = 17;
pub const VC_FORMAT_RGBA16: ::libc::c_uint = 18;
pub const VC_FORMAT_TF_RGBA32: ::libc::c_uint = 20;
pub const VC_FORMAT_TF_RGBA16: ::libc::c_uint = 23;
pub const VC_FORMAT_TF_RGB565: ::libc::c_uint = 25;
pub const VC_FORMAT_BGR888: ::libc::c_uint = 31;
pub const VC_FORMAT_BGR888_NP: ::libc::c_uint = 32;
pub const VC_FORMAT_ARGB8888: ::libc::c_uint = 43;
pub const VC_FORMAT_XRGB8888: ::libc::c_uint = 44;
pub const VC_FORMAT_RANGE_MAX: ::libc::c_uint = 2147483647;
pub type VC_IMAGE_FORMAT_T = Enum_Unnamed74;
pub type Enum_Unnamed75 = ::libc::c_uint;
pub const VC_RESOURCE_TYPE_HOST: ::libc::c_uint = 0;
pub const VC_RESOURCE_TYPE_VIDEOCORE: ::libc::c_uint = 1;
pub const VC_RESOURCE_TYPE_VIDEOCORE_UNCACHED: ::libc::c_uint = 2;
pub type VC_RESOURCE_TYPE_T = Enum_Unnamed75;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed76 {
    pub _type: uint8_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub pitch: uint32_t,
    pub size: uint32_t,
    pub pointer: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed76 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed76 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VC_IMAGE_PARAM_T = Struct_Unnamed76;
pub type Enum_Unnamed77 = ::libc::c_uint;
pub const VC_DISPMANX_GET_DEVICES: ::libc::c_uint = 0;
pub const VC_DISPMANX_GET_DEVICE_NAME: ::libc::c_uint = 1;
pub const VC_DISPMANX_GET_MODES: ::libc::c_uint = 2;
pub const VC_DISPMANX_GET_MODE_INFO: ::libc::c_uint = 3;
pub const VC_DISPMANX_DISPLAY_QUERY_IMAGE_FORMATS: ::libc::c_uint = 4;
pub const VC_DISPMANX_RESOURCE_CREATE: ::libc::c_uint = 5;
pub const VC_DISPMANX_RESOURCE_WRITE_DATA: ::libc::c_uint = 6;
pub const VC_DISPMANX_RESOURCE_DELETE: ::libc::c_uint = 7;
pub const VC_DISPMANX_DISPLAY_OPEN: ::libc::c_uint = 8;
pub const VC_DISPMANX_DISPLAY_OPEN_MODE: ::libc::c_uint = 9;
pub const VC_DISPMANX_DISPLAY_OPEN_OFFSCREEN: ::libc::c_uint = 10;
pub const VC_DISPMANX_DISPLAY_RECONFIGURE: ::libc::c_uint = 11;
pub const VC_DISPMANX_DISPLAY_SET_DESTINATION: ::libc::c_uint = 12;
pub const VC_DISPMANX_DISPLAY_SET_BACKGROUND: ::libc::c_uint = 13;
pub const VC_DISPMANX_DISPLAY_GET_INFO: ::libc::c_uint = 14;
pub const VC_DISPMANX_DISPLAY_CLOSE: ::libc::c_uint = 15;
pub const VC_DISPMANX_UPDATE_START: ::libc::c_uint = 16;
pub const VC_DISPMANX_ELEMENT_ADD: ::libc::c_uint = 17;
pub const VC_DISPMANX_ELEMENT_CHANGE_SOURCE: ::libc::c_uint = 18;
pub const VC_DISPMANX_ELEMENT_MODIFIED: ::libc::c_uint = 19;
pub const VC_DISPMANX_ELEMENT_REMOVE: ::libc::c_uint = 20;
pub const VC_DISPMANX_UPDATE_SUBMIT: ::libc::c_uint = 21;
pub const VC_DISPMANX_UPDATE_SUBMIT_SYNC: ::libc::c_uint = 22;
pub const VC_DISPMANX_SNAPSHOT: ::libc::c_uint = 23;
pub const VC_CMD_END_OF_LIST: ::libc::c_uint = 24;
pub type VC_CMD_CODE_T = Enum_Unnamed77;
pub type INTERFACE_EXECUTE_FN_T =
    ::std::option::Option<extern "C" fn(arg1: ::libc::c_int,
                                        arg2: ::libc::c_int) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed78 {
    pub response: int32_t,
    pub ndevices: uint32_t,
    pub dummy: [uint32_t; 2usize],
    pub names: [[uint8_t; 16usize]; 8usize],
}
impl ::std::clone::Clone for Struct_Unnamed78 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed78 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_GET_DEVICES_RESP_T = Struct_Unnamed78;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed79 {
    pub device: uint32_t,
    pub dummy: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed79 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed79 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_GET_MODES_PARAM_T = Struct_Unnamed79;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed80 {
    pub display: uint32_t,
    pub mode: uint32_t,
    pub dummy: [uint32_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed80 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed80 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_GET_MODE_INFO_PARAM_T = Struct_Unnamed80;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed81 {
    pub _type: uint32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub dummy: [uint32_t; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed81 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed81 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_RESOURCE_CREATE_PARAM_T = Struct_Unnamed81;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed82 {
    pub junk: ::libc::c_int,
}
impl ::std::clone::Clone for Struct_Unnamed82 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed82 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_RESOURCE_WRITE_DATA_PARAM_T = Struct_Unnamed82;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed83 {
    pub handle: uint32_t,
    pub dummy: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed83 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed83 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_RESOURCE_DELETE_PARAM_T = Struct_Unnamed83;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed84 {
    pub device: uint32_t,
    pub dummy: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed84 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed84 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_OPEN_PARAM_T = Struct_Unnamed84;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed85 {
    pub device: uint32_t,
    pub mode: uint32_t,
    pub dummy: [uint32_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed85 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed85 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_OPEN_MODE_PARAM_T = Struct_Unnamed85;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed86 {
    pub dest: uint32_t,
    pub orientation: uint32_t,
    pub dummy: [uint32_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed86 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed86 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_OPEN_OFFSCREEN_PARAM_T = Struct_Unnamed86;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed87 {
    pub display: uint32_t,
    pub dest: uint32_t,
    pub dummy: [uint32_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed87 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed87 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_SET_DESTINATION_PARAM_T = Struct_Unnamed87;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed88 {
    pub display: uint32_t,
    pub update: uint32_t,
    pub colour: uint32_t,
    pub dummy: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed88 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed88 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_SET_BACKGROUND_PARAM_T = Struct_Unnamed88;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed89 {
    pub display: uint32_t,
    pub dummy: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed89 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed89 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_GET_INFO_PARAM_T = Struct_Unnamed89;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed90 {
    pub read_response: uint32_t,
    pub width: int32_t,
    pub height: int32_t,
    pub aspect_pixwidth: int32_t,
    pub aspect_pixheight: int32_t,
    pub fieldrate_num: int32_t,
    pub fieldrate_denom: int32_t,
    pub fields_per_frame: int32_t,
    pub transform: uint32_t,
    pub dummy: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed90 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed90 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_GET_INFO_RESP_T = Struct_Unnamed90;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed91 {
    pub priority: int32_t,
    pub dummy: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed91 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed91 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_UPDATE_START_PARAM_T = Struct_Unnamed91;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed92 {
    pub update: uint32_t,
    pub display: uint32_t,
    pub layer: int32_t,
    pub transform: uint32_t,
    pub src_resource: uint32_t,
    pub dest_x: uint16_t,
    pub dest_y: uint16_t,
    pub dest_width: uint16_t,
    pub dest_height: uint16_t,
    pub src_x: uint16_t,
    pub src_y: uint16_t,
    pub src_width: uint16_t,
    pub src_height: uint16_t,
    pub flags: uint32_t,
    pub opacity: uint32_t,
    pub mask_resource: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed92 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed92 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_ELEMENT_ADD_PARAM_T = Struct_Unnamed92;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed93 {
    pub update: uint32_t,
    pub element: uint32_t,
    pub src_resource: uint32_t,
    pub dummy: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed93 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed93 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_ELEMENT_CHANGE_SOURCE_PARAM_T = Struct_Unnamed93;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed94 {
    pub update: uint32_t,
    pub element: uint32_t,
    pub x: uint16_t,
    pub y: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_Unnamed94 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed94 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_ELEMENT_MODIFIED_PARAM_T = Struct_Unnamed94;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed95 {
    pub update: uint32_t,
    pub element: uint32_t,
    pub dummy: [uint32_t; 2usize],
}
impl ::std::clone::Clone for Struct_Unnamed95 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed95 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_ELEMENT_REMOVE_PARAM_T = Struct_Unnamed95;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed96 {
    pub update: uint32_t,
    pub dummy: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed96 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed96 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_UPDATE_SUBMIT_PARAM_T = Struct_Unnamed96;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed97 {
    pub update: uint32_t,
    pub dummy: [uint32_t; 3usize],
}
impl ::std::clone::Clone for Struct_Unnamed97 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed97 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_UPDATE_SUBMIT_SYNC_PARAM_T = Struct_Unnamed97;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed98 {
    pub display: uint32_t,
    pub snapshot_resource: uint32_t,
    pub transform: uint32_t,
    pub dummy: [uint32_t; 1usize],
}
impl ::std::clone::Clone for Struct_Unnamed98 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed98 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_SNAPSHOT_PARAM_T = Struct_Unnamed98;
pub type Enum_Unnamed99 = ::libc::c_uint;
pub const VCOS_DISPLAY_INPUT_FORMAT_INVALID: ::libc::c_uint = 0;
pub const VCOS_DISPLAY_INPUT_FORMAT_RGB888: ::libc::c_uint = 1;
pub const VCOS_DISPLAY_INPUT_FORMAT_RGB565: ::libc::c_uint = 2;
pub type VCOS_DISPLAY_INPUT_FORMAT_T = Enum_Unnamed99;
pub type DISPLAY_INPUT_FORMAT_T = VCOS_DISPLAY_INPUT_FORMAT_T;
pub type Enum_Unnamed100 = ::libc::c_uint;
pub const DISPLAY_3D_UNSUPPORTED: ::libc::c_uint = 0;
pub const DISPLAY_3D_INTERLEAVED: ::libc::c_uint = 1;
pub const DISPLAY_3D_SBS_FULL_AUTO: ::libc::c_uint = 2;
pub const DISPLAY_3D_SBS_HALF_HORIZ: ::libc::c_uint = 3;
pub const DISPLAY_3D_TB_HALF: ::libc::c_uint = 4;
pub const DISPLAY_3D_FORMAT_MAX: ::libc::c_uint = 5;
pub type DISPLAY_3D_FORMAT_T = Enum_Unnamed100;
pub type Enum_Unnamed101 = ::libc::c_uint;
pub const DISPLAY_INTERFACE_MIN: ::libc::c_uint = 0;
pub const DISPLAY_INTERFACE_SMI: ::libc::c_uint = 1;
pub const DISPLAY_INTERFACE_DPI: ::libc::c_uint = 2;
pub const DISPLAY_INTERFACE_DSI: ::libc::c_uint = 3;
pub const DISPLAY_INTERFACE_LVDS: ::libc::c_uint = 4;
pub const DISPLAY_INTERFACE_MAX: ::libc::c_uint = 5;
pub type DISPLAY_INTERFACE_T = Enum_Unnamed101;
pub type Enum_Unnamed102 = ::libc::c_uint;
pub const DISPLAY_DITHER_NONE: ::libc::c_uint = 0;
pub const DISPLAY_DITHER_RGB666: ::libc::c_uint = 1;
pub const DISPLAY_DITHER_RGB565: ::libc::c_uint = 2;
pub const DISPLAY_DITHER_RGB555: ::libc::c_uint = 3;
pub const DISPLAY_DITHER_MAX: ::libc::c_uint = 4;
pub type DISPLAY_DITHER_T = Enum_Unnamed102;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed103 {
    pub _type: DISPLAY_INTERFACE_T,
    pub width: uint32_t,
    pub height: uint32_t,
    pub input_format: DISPLAY_INPUT_FORMAT_T,
    pub interlaced: uint32_t,
    pub output_dither: DISPLAY_DITHER_T,
    pub pixel_freq: uint32_t,
    pub line_rate: uint32_t,
    pub format_3d: DISPLAY_3D_FORMAT_T,
    pub use_pixelvalve_1: uint32_t,
    pub dsi_video_mode: uint32_t,
    pub hvs_channel: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed103 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed103 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPLAY_INFO_T = Struct_Unnamed103;
pub type DISPMANX_DISPLAY_HANDLE_T = uint32_t;
pub type DISPMANX_UPDATE_HANDLE_T = uint32_t;
pub type DISPMANX_ELEMENT_HANDLE_T = uint32_t;
pub type DISPMANX_RESOURCE_HANDLE_T = uint32_t;
pub type DISPMANX_PROTECTION_T = uint32_t;
pub type Enum_Unnamed104 = ::libc::c_int;
pub const DISPMANX_SUCCESS: ::libc::c_int = 0;
pub const DISPMANX_INVALID: ::libc::c_int = -1;
pub type DISPMANX_STATUS_T = Enum_Unnamed104;
pub type Enum_Unnamed105 = ::libc::c_uint;
pub const DISPMANX_NO_ROTATE: ::libc::c_uint = 0;
pub const DISPMANX_ROTATE_90: ::libc::c_uint = 1;
pub const DISPMANX_ROTATE_180: ::libc::c_uint = 2;
pub const DISPMANX_ROTATE_270: ::libc::c_uint = 3;
pub const DISPMANX_FLIP_HRIZ: ::libc::c_uint = 65536;
pub const DISPMANX_FLIP_VERT: ::libc::c_uint = 131072;
pub const DISPMANX_SNAPSHOT_NO_YUV: ::libc::c_uint = 16777216;
pub const DISPMANX_SNAPSHOT_NO_RGB: ::libc::c_uint = 33554432;
pub const DISPMANX_SNAPSHOT_FILL: ::libc::c_uint = 67108864;
pub const DISPMANX_SNAPSHOT_SWAP_RED_BLUE: ::libc::c_uint = 134217728;
pub const DISPMANX_SNAPSHOT_PACK: ::libc::c_uint = 268435456;
pub type DISPMANX_TRANSFORM_T = Enum_Unnamed105;
pub type Enum_Unnamed106 = ::libc::c_uint;
pub const DISPMANX_FLAGS_ALPHA_FROM_SOURCE: ::libc::c_uint = 0;
pub const DISPMANX_FLAGS_ALPHA_FIXED_ALL_PIXELS: ::libc::c_uint = 1;
pub const DISPMANX_FLAGS_ALPHA_FIXED_NON_ZERO: ::libc::c_uint = 2;
pub const DISPMANX_FLAGS_ALPHA_FIXED_EXCEED_0X07: ::libc::c_uint = 3;
pub const DISPMANX_FLAGS_ALPHA_PREMULT: ::libc::c_uint = 65536;
pub const DISPMANX_FLAGS_ALPHA_MIX: ::libc::c_uint = 131072;
pub type DISPMANX_FLAGS_ALPHA_T = Enum_Unnamed106;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed107 {
    pub flags: DISPMANX_FLAGS_ALPHA_T,
    pub opacity: uint32_t,
    pub mask: *mut VC_IMAGE_T,
}
impl ::std::clone::Clone for Struct_Unnamed107 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed107 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_ALPHA_T = Struct_Unnamed107;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed108 {
    pub flags: DISPMANX_FLAGS_ALPHA_T,
    pub opacity: uint32_t,
    pub mask: DISPMANX_RESOURCE_HANDLE_T,
}
impl ::std::clone::Clone for Struct_Unnamed108 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed108 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VC_DISPMANX_ALPHA_T = Struct_Unnamed108;
pub type Enum_Unnamed109 = ::libc::c_uint;
pub const DISPMANX_FLAGS_CLAMP_NONE: ::libc::c_uint = 0;
pub const DISPMANX_FLAGS_CLAMP_LUMA_TRANSPARENT: ::libc::c_uint = 1;
pub const DISPMANX_FLAGS_CLAMP_CHROMA_TRANSPARENT: ::libc::c_uint = 2;
pub const DISPMANX_FLAGS_CLAMP_TRANSPARENT: ::libc::c_uint = 3;
pub type DISPMANX_FLAGS_CLAMP_T = Enum_Unnamed109;
pub type Enum_Unnamed110 = ::libc::c_uint;
pub const DISPMANX_FLAGS_KEYMASK_OVERRIDE: ::libc::c_uint = 1;
pub const DISPMANX_FLAGS_KEYMASK_SMOOTH: ::libc::c_uint = 2;
pub const DISPMANX_FLAGS_KEYMASK_CR_INV: ::libc::c_uint = 4;
pub const DISPMANX_FLAGS_KEYMASK_CB_INV: ::libc::c_uint = 8;
pub const DISPMANX_FLAGS_KEYMASK_YY_INV: ::libc::c_uint = 16;
pub type DISPMANX_FLAGS_KEYMASK_T = Enum_Unnamed110;
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed111 {
    pub _bindgen_data_: [u8; 6usize],
}
impl Union_Unnamed111 {
    pub unsafe fn yuv(&mut self) -> *mut Struct_Unnamed112 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn rgb(&mut self) -> *mut Struct_Unnamed113 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed111 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed111 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed112 {
    pub yy_upper: uint8_t,
    pub yy_lower: uint8_t,
    pub cr_upper: uint8_t,
    pub cr_lower: uint8_t,
    pub cb_upper: uint8_t,
    pub cb_lower: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed112 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed112 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed113 {
    pub red_upper: uint8_t,
    pub red_lower: uint8_t,
    pub blue_upper: uint8_t,
    pub blue_lower: uint8_t,
    pub green_upper: uint8_t,
    pub green_lower: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed113 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed113 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_CLAMP_KEYS_T = Union_Unnamed111;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed114 {
    pub mode: DISPMANX_FLAGS_CLAMP_T,
    pub key_mask: DISPMANX_FLAGS_KEYMASK_T,
    pub key_value: DISPMANX_CLAMP_KEYS_T,
    pub replace_value: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed114 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed114 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_CLAMP_T = Struct_Unnamed114;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed115 {
    pub width: int32_t,
    pub height: int32_t,
    pub transform: DISPMANX_TRANSFORM_T,
    pub input_format: DISPLAY_INPUT_FORMAT_T,
}
impl ::std::clone::Clone for Struct_Unnamed115 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed115 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_MODEINFO_T = Struct_Unnamed115;
pub type DISPMANX_CALLBACK_FUNC_T =
    ::std::option::Option<extern "C" fn(u: DISPMANX_UPDATE_HANDLE_T,
                                        arg: *mut ::libc::c_void) -> ()>;
pub type DISPMANX_PROGRESS_CALLBACK_FUNC_T =
    ::std::option::Option<extern "C" fn(u: DISPMANX_UPDATE_HANDLE_T,
                                        line: uint32_t,
                                        arg: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_tag_DISPMANX_DISPLAY_FUNCS_T {
    pub get_hvs_config: ::std::option::Option<extern "C" fn(instance:
                                                                *mut ::libc::c_void,
                                                            pchan:
                                                                *mut uint32_t,
                                                            poptions:
                                                                *mut uint32_t,
                                                            info:
                                                                *mut DISPLAY_INFO_T,
                                                            bg_colour:
                                                                *mut uint32_t,
                                                            test_mode:
                                                                *mut uint32_t)
                                                  -> int32_t>,
    pub get_gamma_params: ::std::option::Option<extern "C" fn(instance:
                                                                  *mut ::libc::c_void,
                                                              gain:
                                                                  *mut int32_t,
                                                              offset:
                                                                  *mut int32_t,
                                                              gamma:
                                                                  *mut int32_t)
                                                    -> int32_t>,
    pub get_oled_params: ::std::option::Option<extern "C" fn(instance:
                                                                 *mut ::libc::c_void,
                                                             poffsets:
                                                                 *mut uint32_t,
                                                             coeffs:
                                                                 *mut uint32_t)
                                                   -> int32_t>,
    pub get_dither: ::std::option::Option<extern "C" fn(instance:
                                                            *mut ::libc::c_void,
                                                        dither_depth:
                                                            *mut uint32_t,
                                                        dither_type:
                                                            *mut uint32_t)
                                              -> int32_t>,
    pub get_info: ::std::option::Option<extern "C" fn(instance:
                                                          *mut ::libc::c_void,
                                                      info:
                                                          *mut DISPMANX_MODEINFO_T)
                                            -> int32_t>,
    pub open: ::std::option::Option<extern "C" fn(instance:
                                                      *mut ::libc::c_void)
                                        -> int32_t>,
    pub close: ::std::option::Option<extern "C" fn(instance:
                                                       *mut ::libc::c_void)
                                         -> int32_t>,
    pub dlist_updated: ::std::option::Option<extern "C" fn(instance:
                                                               *mut ::libc::c_void,
                                                           fifo_reg:
                                                               *mut uint32_t)
                                                 -> ()>,
    pub eof_callback: ::std::option::Option<extern "C" fn(instance:
                                                              *mut ::libc::c_void)
                                                -> ()>,
    pub get_input_format: ::std::option::Option<extern "C" fn(instance:
                                                                  *mut ::libc::c_void)
                                                    ->
                                                        DISPLAY_INPUT_FORMAT_T>,
    pub suspend_resume: ::std::option::Option<extern "C" fn(instance:
                                                                *mut ::libc::c_void,
                                                            up: ::libc::c_int)
                                                  -> int32_t>,
    pub get_3d_format: ::std::option::Option<extern "C" fn(instance:
                                                               *mut ::libc::c_void)
                                                 -> DISPLAY_3D_FORMAT_T>,
}
impl ::std::clone::Clone for Struct_tag_DISPMANX_DISPLAY_FUNCS_T {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_tag_DISPMANX_DISPLAY_FUNCS_T {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type DISPMANX_DISPLAY_FUNCS_T = Struct_tag_DISPMANX_DISPLAY_FUNCS_T;
pub type Enum_Unnamed116 = ::libc::c_uint;
pub const VCHI_FLAGS_NONE: ::libc::c_uint = 0;
pub const VCHI_FLAGS_BLOCK_UNTIL_OP_COMPLETE: ::libc::c_uint = 1;
pub const VCHI_FLAGS_CALLBACK_WHEN_OP_COMPLETE: ::libc::c_uint = 2;
pub const VCHI_FLAGS_BLOCK_UNTIL_QUEUED: ::libc::c_uint = 4;
pub const VCHI_FLAGS_ALLOW_PARTIAL: ::libc::c_uint = 8;
pub const VCHI_FLAGS_BLOCK_UNTIL_DATA_READ: ::libc::c_uint = 16;
pub const VCHI_FLAGS_CALLBACK_WHEN_DATA_READ: ::libc::c_uint = 32;
pub const VCHI_FLAGS_ALIGN_SLOT: ::libc::c_uint = 128;
pub const VCHI_FLAGS_BULK_AUX_QUEUED: ::libc::c_uint = 65536;
pub const VCHI_FLAGS_BULK_AUX_COMPLETE: ::libc::c_uint = 131072;
pub const VCHI_FLAGS_BULK_DATA_QUEUED: ::libc::c_uint = 262144;
pub const VCHI_FLAGS_BULK_DATA_COMPLETE: ::libc::c_uint = 524288;
pub const VCHI_FLAGS_INTERNAL: ::libc::c_uint = 16711680;
pub type VCHI_FLAGS_T = Enum_Unnamed116;
pub type Enum_Unnamed117 = ::libc::c_int;
pub const VCHI_CRC_NOTHING: ::libc::c_int = -1;
pub const VCHI_CRC_PER_SERVICE: ::libc::c_int = 0;
pub const VCHI_CRC_EVERYTHING: ::libc::c_int = 1;
pub type VCHI_CRC_CONTROL_T = Enum_Unnamed117;
pub type Enum_Unnamed118 = ::libc::c_uint;
pub const VCHI_CALLBACK_REASON_MIN: ::libc::c_uint = 0;
pub const VCHI_CALLBACK_MSG_AVAILABLE: ::libc::c_uint = 1;
pub const VCHI_CALLBACK_MSG_SENT: ::libc::c_uint = 2;
pub const VCHI_CALLBACK_MSG_SPACE_AVAILABLE: ::libc::c_uint = 3;
pub const VCHI_CALLBACK_BULK_RECEIVED: ::libc::c_uint = 4;
pub const VCHI_CALLBACK_BULK_SENT: ::libc::c_uint = 5;
pub const VCHI_CALLBACK_BULK_RX_SPACE_AVAILABLE: ::libc::c_uint = 6;
pub const VCHI_CALLBACK_BULK_TX_SPACE_AVAILABLE: ::libc::c_uint = 7;
pub const VCHI_CALLBACK_SERVICE_CLOSED: ::libc::c_uint = 8;
pub const VCHI_CALLBACK_SENT_XOFF: ::libc::c_uint = 9;
pub const VCHI_CALLBACK_SENT_XON: ::libc::c_uint = 10;
pub const VCHI_CALLBACK_BULK_DATA_READ: ::libc::c_uint = 11;
pub const VCHI_CALLBACK_PEER_OFF: ::libc::c_uint = 12;
pub const VCHI_CALLBACK_PEER_SUSPENDED: ::libc::c_uint = 13;
pub const VCHI_CALLBACK_PEER_ON: ::libc::c_uint = 14;
pub const VCHI_CALLBACK_PEER_RESUMED: ::libc::c_uint = 15;
pub const VCHI_CALLBACK_FORCED_POWER_OFF: ::libc::c_uint = 16;
pub const VCHI_CALLBACK_REASON_MAX: ::libc::c_uint = 17;
pub type VCHI_CALLBACK_REASON_T = Enum_Unnamed118;
pub type Enum_Unnamed119 = ::libc::c_uint;
pub const VCHI_SERVICE_OPTION_MIN: ::libc::c_uint = 0;
pub const VCHI_SERVICE_OPTION_TRACE: ::libc::c_uint = 1;
pub const VCHI_SERVICE_OPTION_MAX: ::libc::c_uint = 2;
pub type VCHI_SERVICE_OPTION_T = Enum_Unnamed119;
pub type VCHI_CALLBACK_T =
    ::std::option::Option<extern "C" fn(callback_param: *mut ::libc::c_void,
                                        reason: VCHI_CALLBACK_REASON_T,
                                        handle: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vchi_msg_vector {
    pub vec_base: *const ::libc::c_void,
    pub vec_len: int32_t,
}
impl ::std::clone::Clone for Struct_vchi_msg_vector {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vchi_msg_vector {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCHI_MSG_VECTOR_T = Struct_vchi_msg_vector;
pub type VCHI_CONNECTION_API_T = Struct_opaque_vchi_connection_api_t;
pub type VCHI_MESSAGE_DRIVER_T = Struct_opaque_vchi_message_driver_t;
pub enum Struct_opaque_vchi_service_t { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed120 {
    pub service: *mut Struct_opaque_vchi_service_t,
    pub last: *mut ::libc::c_void,
    pub next: *mut ::libc::c_void,
    pub remove: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed120 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed120 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCHI_MSG_ITER_T = Struct_Unnamed120;
pub type Enum_message_event_type = ::libc::c_uint;
pub const MESSAGE_EVENT_NONE: ::libc::c_uint = 0;
pub const MESSAGE_EVENT_NOP: ::libc::c_uint = 1;
pub const MESSAGE_EVENT_MESSAGE: ::libc::c_uint = 2;
pub const MESSAGE_EVENT_SLOT_COMPLETE: ::libc::c_uint = 3;
pub const MESSAGE_EVENT_RX_BULK_PAUSED: ::libc::c_uint = 4;
pub const MESSAGE_EVENT_RX_BULK_COMPLETE: ::libc::c_uint = 5;
pub const MESSAGE_EVENT_TX_COMPLETE: ::libc::c_uint = 6;
pub const MESSAGE_EVENT_MSG_DISCARDED: ::libc::c_uint = 7;
pub type MESSAGE_EVENT_TYPE_T = Enum_message_event_type;
pub type Enum_vchi_msg_flags = ::libc::c_uint;
pub const VCHI_MSG_FLAGS_NONE: ::libc::c_uint = 0;
pub const VCHI_MSG_FLAGS_TERMINATE_DMA: ::libc::c_uint = 1;
pub type VCHI_MSG_FLAGS_T = Enum_vchi_msg_flags;
pub type Enum_message_tx_channel = ::libc::c_uint;
pub const MESSAGE_TX_CHANNEL_MESSAGE: ::libc::c_uint = 0;
pub const MESSAGE_TX_CHANNEL_BULK: ::libc::c_uint = 1;
pub type MESSAGE_TX_CHANNEL_T = Enum_message_tx_channel;
pub type Enum_message_rx_channel = ::libc::c_uint;
pub const MESSAGE_RX_CHANNEL_MESSAGE: ::libc::c_uint = 0;
pub const MESSAGE_RX_CHANNEL_BULK: ::libc::c_uint = 1;
pub type MESSAGE_RX_CHANNEL_T = Enum_message_rx_channel;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rx_msg_slot_info {
    pub next: *mut Struct_rx_msg_slot_info,
    pub addr: *mut uint8_t,
    pub len: uint32_t,
    pub write_ptr: uint32_t,
    pub read_ptr: uint32_t,
    pub active: ::libc::c_int,
    pub msgs_parsed: uint32_t,
    pub msgs_released: uint32_t,
    pub state: *mut ::libc::c_void,
    pub ref_count: [uint8_t; 36usize],
}
impl ::std::clone::Clone for Struct_rx_msg_slot_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rx_msg_slot_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RX_MSG_SLOTINFO_T = Struct_rx_msg_slot_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rx_bulk_slotinfo_t {
    pub next: *mut Struct_rx_bulk_slotinfo_t,
    pub blocking: *mut VCOS_SEMAPHORE_T,
    pub addr: *mut ::libc::c_void,
    pub len: uint32_t,
    pub service: *mut ::libc::c_void,
    pub handle: *mut ::libc::c_void,
    pub flags: VCHI_FLAGS_T,
}
impl ::std::clone::Clone for Struct_rx_bulk_slotinfo_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rx_bulk_slotinfo_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RX_BULK_SLOTINFO_T = Struct_rx_bulk_slotinfo_t;
pub enum Struct_message_info { }
#[repr(C)]
#[derive(Copy)]
pub struct Struct_rx_message_info {
    pub next: *mut Struct_message_info,
    pub addr: *mut uint8_t,
    pub len: uint32_t,
    pub slot: *mut RX_MSG_SLOTINFO_T,
    pub tx_timestamp: uint32_t,
    pub rx_timestamp: uint32_t,
}
impl ::std::clone::Clone for Struct_rx_message_info {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_rx_message_info {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type RX_MESSAGE_INFO_T = Struct_rx_message_info;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed121 {
    pub _type: MESSAGE_EVENT_TYPE_T,
    pub message: Struct_Unnamed122,
    pub rx_msg: *mut RX_MSG_SLOTINFO_T,
    pub rx_bulk: *mut RX_BULK_SLOTINFO_T,
    pub tx_handle: *mut ::libc::c_void,
    pub tx_channel: MESSAGE_TX_CHANNEL_T,
}
impl ::std::clone::Clone for Struct_Unnamed121 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed121 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed122 {
    pub addr: *mut ::libc::c_void,
    pub slot_delta: uint16_t,
    pub len: uint32_t,
    pub slot: *mut RX_MSG_SLOTINFO_T,
    pub service: vcos_fourcc_t,
    pub tx_timestamp: uint32_t,
    pub rx_timestamp: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed122 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed122 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type MESSAGE_EVENT_T = Struct_Unnamed121;
pub type VCHI_MESSAGE_DRIVER_EVENT_CALLBACK_T =
    extern "C" fn(state: *mut ::libc::c_void) -> ();
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed123 {
    pub event_callback: *mut ::std::option::Option<extern "C" fn() -> ()>,
}
impl ::std::clone::Clone for Struct_Unnamed123 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed123 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCHI_MESSAGE_DRIVER_OPEN_T = Struct_Unnamed123;
pub enum Struct_opaque_mhandle_t { }
pub type VCHI_MDRIVER_HANDLE_T = *mut Struct_opaque_mhandle_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_opaque_vchi_message_driver_t {
    pub open: ::std::option::Option<extern "C" fn(params:
                                                      *mut VCHI_MESSAGE_DRIVER_OPEN_T,
                                                  state: *mut ::libc::c_void)
                                        -> *mut VCHI_MDRIVER_HANDLE_T>,
    pub suspending: ::std::option::Option<extern "C" fn(handle:
                                                            *mut VCHI_MDRIVER_HANDLE_T)
                                              -> int32_t>,
    pub resumed: ::std::option::Option<extern "C" fn(handle:
                                                         *mut VCHI_MDRIVER_HANDLE_T)
                                           -> int32_t>,
    pub power_control: ::std::option::Option<extern "C" fn(handle:
                                                               *mut VCHI_MDRIVER_HANDLE_T,
                                                           arg1:
                                                               MESSAGE_TX_CHANNEL_T,
                                                           enable:
                                                               vcos_bool_t)
                                                 -> int32_t>,
    pub add_msg_rx_slot: ::std::option::Option<extern "C" fn(handle:
                                                                 *mut VCHI_MDRIVER_HANDLE_T,
                                                             slot:
                                                                 *mut RX_MSG_SLOTINFO_T)
                                                   -> int32_t>,
    pub add_bulk_rx: ::std::option::Option<extern "C" fn(handle:
                                                             *mut VCHI_MDRIVER_HANDLE_T,
                                                         data:
                                                             *mut ::libc::c_void,
                                                         len: uint32_t,
                                                         slot:
                                                             *mut RX_BULK_SLOTINFO_T)
                                               -> int32_t>,
    pub send: ::std::option::Option<extern "C" fn(handle:
                                                      *mut VCHI_MDRIVER_HANDLE_T,
                                                  channel:
                                                      MESSAGE_TX_CHANNEL_T,
                                                  data: *const ::libc::c_void,
                                                  len: uint32_t,
                                                  flags: VCHI_MSG_FLAGS_T,
                                                  send_handle:
                                                      *mut ::libc::c_void)
                                        -> int32_t>,
    pub next_event: ::std::option::Option<extern "C" fn(handle:
                                                            *mut VCHI_MDRIVER_HANDLE_T,
                                                        event:
                                                            *mut MESSAGE_EVENT_T)
                                              -> ()>,
    pub enable: ::std::option::Option<extern "C" fn(handle:
                                                        *mut VCHI_MDRIVER_HANDLE_T)
                                          -> int32_t>,
    pub form_message: ::std::option::Option<extern "C" fn(handle:
                                                              *mut VCHI_MDRIVER_HANDLE_T,
                                                          service_id:
                                                              vcos_fourcc_t,
                                                          vector:
                                                              *mut VCHI_MSG_VECTOR_T,
                                                          count: uint32_t,
                                                          address:
                                                              *mut ::libc::c_void,
                                                          length_avail:
                                                              uint32_t,
                                                          max_total_length:
                                                              uint32_t,
                                                          pad_to_fill:
                                                              vcos_bool_t,
                                                          allow_partial:
                                                              vcos_bool_t)
                                                -> int32_t>,
    pub update_message: ::std::option::Option<extern "C" fn(handle:
                                                                *mut VCHI_MDRIVER_HANDLE_T,
                                                            dest:
                                                                *mut ::libc::c_void,
                                                            slot_count:
                                                                *mut int16_t)
                                                  -> int32_t>,
    pub buffer_aligned: ::std::option::Option<extern "C" fn(handle:
                                                                *mut VCHI_MDRIVER_HANDLE_T,
                                                            tx: ::libc::c_int,
                                                            uncached:
                                                                ::libc::c_int,
                                                            address:
                                                                *const ::libc::c_void,
                                                            length: uint32_t)
                                                  -> int32_t>,
    pub allocate_buffer: ::std::option::Option<extern "C" fn(handle:
                                                                 *mut VCHI_MDRIVER_HANDLE_T,
                                                             length:
                                                                 *mut uint32_t)
                                                   -> *mut ::libc::c_void>,
    pub free_buffer: ::std::option::Option<extern "C" fn(handle:
                                                             *mut VCHI_MDRIVER_HANDLE_T,
                                                         address:
                                                             *mut ::libc::c_void)
                                               -> ()>,
    pub rx_slot_size: ::std::option::Option<extern "C" fn(handle:
                                                              *mut VCHI_MDRIVER_HANDLE_T,
                                                          msg_size:
                                                              ::libc::c_int)
                                                -> ::libc::c_int>,
    pub tx_slot_size: ::std::option::Option<extern "C" fn(handle:
                                                              *mut VCHI_MDRIVER_HANDLE_T,
                                                          msg_size:
                                                              ::libc::c_int)
                                                -> ::libc::c_int>,
    pub tx_supports_terminate: ::std::option::Option<extern "C" fn(handle:
                                                                       *const VCHI_MDRIVER_HANDLE_T,
                                                                   channel:
                                                                       MESSAGE_TX_CHANNEL_T)
                                                         -> vcos_bool_t>,
    pub tx_bulk_chunk_size: ::std::option::Option<extern "C" fn(handle:
                                                                    *const VCHI_MDRIVER_HANDLE_T,
                                                                channel:
                                                                    MESSAGE_TX_CHANNEL_T)
                                                      -> uint32_t>,
    pub tx_alignment: ::std::option::Option<extern "C" fn(handle:
                                                              *const VCHI_MDRIVER_HANDLE_T,
                                                          channel:
                                                              MESSAGE_TX_CHANNEL_T)
                                                -> ::libc::c_int>,
    pub rx_alignment: ::std::option::Option<extern "C" fn(handle:
                                                              *const VCHI_MDRIVER_HANDLE_T,
                                                          channel:
                                                              MESSAGE_RX_CHANNEL_T)
                                                -> ::libc::c_int>,
    pub form_bulk_aux: ::std::option::Option<extern "C" fn(handle:
                                                               *mut VCHI_MDRIVER_HANDLE_T,
                                                           channel:
                                                               MESSAGE_TX_CHANNEL_T,
                                                           data:
                                                               *const ::libc::c_void,
                                                           len: uint32_t,
                                                           chunk_size:
                                                               uint32_t,
                                                           aux_data:
                                                               *mut *const ::libc::c_void,
                                                           aux_len:
                                                               *mut int32_t)
                                                 -> ()>,
    pub debug: ::std::option::Option<extern "C" fn(handle:
                                                       *mut VCHI_MDRIVER_HANDLE_T)
                                         -> ()>,
}
impl ::std::clone::Clone for Struct_opaque_vchi_message_driver_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_opaque_vchi_message_driver_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub enum Struct_opaque_vchi_connection_connected_service_handle_t { }
pub type VCHI_CONNECTION_SERVICE_HANDLE_T =
    *mut Struct_opaque_vchi_connection_connected_service_handle_t;
pub enum Struct_opaque_vchi_connection_info_t { }
pub type VCHI_CONNECTION_STATE_T = Struct_opaque_vchi_connection_info_t;
pub type VCHI_CONNECTION_T = Struct_vchi_connection_t;
pub type VCHI_CONNECTION_INIT_T =
    ::std::option::Option<extern "C" fn(connection:
                                            *mut Struct_vchi_connection_t,
                                        driver: *const VCHI_MESSAGE_DRIVER_T)
                              -> *mut VCHI_CONNECTION_STATE_T>;
pub type VCHI_CONNECTION_CRC_CONTROL_T =
    ::std::option::Option<extern "C" fn(state_handle:
                                            *mut VCHI_CONNECTION_STATE_T,
                                        control: VCHI_CRC_CONTROL_T)
                              -> int32_t>;
pub type VCHI_CONNECTION_SERVICE_CONNECT_T =
    ::std::option::Option<extern "C" fn(state_handle:
                                            *mut VCHI_CONNECTION_STATE_T,
                                        service_id: vcos_fourcc_t,
                                        rx_fifo_size: uint32_t,
                                        tx_fifo_size: uint32_t,
                                        server: ::libc::c_int,
                                        callback: VCHI_CALLBACK_T,
                                        callback_param: *mut ::libc::c_void,
                                        want_crc: vcos_bool_t,
                                        want_unaligned_bulk_rx: vcos_bool_t,
                                        want_unaligned_bulk_tx: vcos_bool_t,
                                        service_handle:
                                            *mut VCHI_CONNECTION_SERVICE_HANDLE_T)
                              -> int32_t>;
pub type VCHI_CONNECTION_SERVICE_DISCONNECT_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T)
                              -> int32_t>;
pub type VCHI_CONNECTION_SERVICE_QUEUE_MESSAGE_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        data: *const ::libc::c_void,
                                        data_size: uint32_t,
                                        flags: VCHI_FLAGS_T,
                                        msg_handle: *mut ::libc::c_void)
                              -> int32_t>;
pub type VCHI_CONNECTION_SERVICE_QUEUE_MESSAGEV_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        vector: *mut VCHI_MSG_VECTOR_T,
                                        count: uint32_t, flags: VCHI_FLAGS_T,
                                        msg_handle: *mut ::libc::c_void)
                              -> int32_t>;
pub type VCHI_CONNECTION_SERVICE_DEQUEUE_MESSAGE_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        data: *mut ::libc::c_void,
                                        max_data_size_to_read: uint32_t,
                                        actual_msg_size: *mut uint32_t,
                                        flags: VCHI_FLAGS_T) -> int32_t>;
pub type VCHI_CONNECTION_SERVICE_PEEK_MESSAGE_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        data: *mut *mut ::libc::c_void,
                                        msg_size: *mut uint32_t,
                                        flags: VCHI_FLAGS_T) -> int32_t>;
pub type VCHI_CONNECTION_SERVICE_HOLD_MESSAGE_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        data: *mut *mut ::libc::c_void,
                                        msg_size: *mut uint32_t,
                                        flags: VCHI_FLAGS_T,
                                        message_handle:
                                            *mut *mut ::libc::c_void)
                              -> int32_t>;
pub type VCHI_CONNECTION_SERVICE_LOOKAHEAD_MESSAGE_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        iter: *mut VCHI_MSG_ITER_T,
                                        flags: VCHI_FLAGS_T) -> int32_t>;
pub type VCHI_CONNECTION_HELD_MSG_RELEASE_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        message_handle: *mut ::libc::c_void)
                              -> int32_t>;
pub type VCHI_CONNECTION_HELD_MSG_INFO_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        message_handle: *mut ::libc::c_void,
                                        data: *mut *mut ::libc::c_void,
                                        msg_size: *mut int32_t,
                                        tx_timestamp: *mut uint32_t,
                                        rx_timestamp: *mut uint32_t)
                              -> int32_t>;
pub type VCHI_CONNECTION_MSG_ITER_HAS_NEXT_T =
    ::std::option::Option<extern "C" fn(service:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        iter: *const VCHI_MSG_ITER_T)
                              -> vcos_bool_t>;
pub type VCHI_CONNECTION_MSG_ITER_NEXT_T =
    ::std::option::Option<extern "C" fn(service:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        iter: *mut VCHI_MSG_ITER_T,
                                        data: *mut *mut ::libc::c_void,
                                        msg_size: *mut uint32_t) -> int32_t>;
pub type VCHI_CONNECTION_MSG_ITER_REMOVE_T =
    ::std::option::Option<extern "C" fn(service:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        iter: *mut VCHI_MSG_ITER_T)
                              -> int32_t>;
pub type VCHI_CONNECTION_MSG_ITER_HOLD_T =
    ::std::option::Option<extern "C" fn(service:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        iter: *mut VCHI_MSG_ITER_T,
                                        msg_handle: *mut *mut ::libc::c_void)
                              -> int32_t>;
pub type VCHI_CONNECTION_BULK_QUEUE_TRANSMIT_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        data_src: *const ::libc::c_void,
                                        data_size: uint32_t,
                                        flags: VCHI_FLAGS_T,
                                        bulk_handle: *mut ::libc::c_void)
                              -> int32_t>;
pub type VCHI_CONNECTION_BULK_QUEUE_RECEIVE_T =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        data_dst: *mut ::libc::c_void,
                                        data_size: uint32_t,
                                        flags: VCHI_FLAGS_T,
                                        bulk_handle: *mut ::libc::c_void)
                              -> int32_t>;
pub type VCHI_CONNECTION_SERVER_PRESENT =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T,
                                        service_id: vcos_fourcc_t,
                                        peer_flags: int32_t) -> int32_t>;
pub type VCHI_CONNECTION_RX_SLOTS_AVAILABLE =
    ::std::option::Option<extern "C" fn(state: *const VCHI_CONNECTION_STATE_T)
                              -> ::libc::c_int>;
pub type VCHI_CONNECTION_RX_SLOT_SIZE =
    ::std::option::Option<extern "C" fn(state: *const VCHI_CONNECTION_STATE_T)
                              -> uint32_t>;
pub type VCHI_CONNECTION_RX_BULK_BUFFER_ADDED =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T,
                                        service: vcos_fourcc_t,
                                        length: uint32_t,
                                        channel: MESSAGE_TX_CHANNEL_T,
                                        channel_params: uint32_t,
                                        data_length: uint32_t,
                                        data_offset: uint32_t) -> ()>;
pub type VCHI_CONNECTION_FLOW_CONTROL =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T,
                                        service_id: vcos_fourcc_t,
                                        xoff: int32_t) -> ()>;
pub type VCHI_CONNECTION_SERVER_AVAILABLE_REPLY =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T,
                                        service_id: vcos_fourcc_t,
                                        flags: uint32_t) -> ()>;
pub type VCHI_CONNECTION_BULK_AUX_RECEIVED =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T)
                              -> ()>;
pub type VCHI_CONNECTION_BULK_AUX_TRANSMITTED =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T,
                                        handle: *mut ::libc::c_void) -> ()>;
pub type VCHI_CONNECTION_INFO =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T,
                                        protocol_version: uint32_t,
                                        slot_size: uint32_t,
                                        num_slots: uint32_t,
                                        min_bulk_size: uint32_t) -> ()>;
pub type VCHI_CONNECTION_DISCONNECT =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T,
                                        flags: uint32_t) -> ()>;
pub type VCHI_CONNECTION_POWER_CONTROL =
    ::std::option::Option<extern "C" fn(state: *mut VCHI_CONNECTION_STATE_T,
                                        channel: MESSAGE_TX_CHANNEL_T,
                                        enable: vcos_bool_t) -> ()>;
pub type VCHI_BUFFER_ALLOCATE =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        length: *mut uint32_t)
                              -> *mut ::libc::c_void>;
pub type VCHI_BUFFER_FREE =
    ::std::option::Option<extern "C" fn(service_handle:
                                            VCHI_CONNECTION_SERVICE_HANDLE_T,
                                        address: *mut ::libc::c_void) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_opaque_vchi_connection_api_t {
    pub init: VCHI_CONNECTION_INIT_T,
    pub crc_control: VCHI_CONNECTION_CRC_CONTROL_T,
    pub service_connect: VCHI_CONNECTION_SERVICE_CONNECT_T,
    pub service_disconnect: VCHI_CONNECTION_SERVICE_DISCONNECT_T,
    pub service_queue_msg: VCHI_CONNECTION_SERVICE_QUEUE_MESSAGE_T,
    pub service_queue_msgv: VCHI_CONNECTION_SERVICE_QUEUE_MESSAGEV_T,
    pub service_dequeue_msg: VCHI_CONNECTION_SERVICE_DEQUEUE_MESSAGE_T,
    pub service_peek_msg: VCHI_CONNECTION_SERVICE_PEEK_MESSAGE_T,
    pub service_hold_msg: VCHI_CONNECTION_SERVICE_HOLD_MESSAGE_T,
    pub service_look_ahead_msg: VCHI_CONNECTION_SERVICE_LOOKAHEAD_MESSAGE_T,
    pub held_msg_release: VCHI_CONNECTION_HELD_MSG_RELEASE_T,
    pub held_msg_info: VCHI_CONNECTION_HELD_MSG_INFO_T,
    pub msg_iter_has_next: VCHI_CONNECTION_MSG_ITER_HAS_NEXT_T,
    pub msg_iter_next: VCHI_CONNECTION_MSG_ITER_NEXT_T,
    pub msg_iter_remove: VCHI_CONNECTION_MSG_ITER_REMOVE_T,
    pub msg_iter_hold: VCHI_CONNECTION_MSG_ITER_HOLD_T,
    pub bulk_queue_transmit: VCHI_CONNECTION_BULK_QUEUE_TRANSMIT_T,
    pub bulk_queue_receive: VCHI_CONNECTION_BULK_QUEUE_RECEIVE_T,
    pub server_present: VCHI_CONNECTION_SERVER_PRESENT,
    pub connection_rx_slots_available: VCHI_CONNECTION_RX_SLOTS_AVAILABLE,
    pub connection_rx_slot_size: VCHI_CONNECTION_RX_SLOT_SIZE,
    pub rx_bulk_buffer_added: VCHI_CONNECTION_RX_BULK_BUFFER_ADDED,
    pub flow_control: VCHI_CONNECTION_FLOW_CONTROL,
    pub server_available_reply: VCHI_CONNECTION_SERVER_AVAILABLE_REPLY,
    pub bulk_aux_received: VCHI_CONNECTION_BULK_AUX_RECEIVED,
    pub bulk_aux_transmitted: VCHI_CONNECTION_BULK_AUX_TRANSMITTED,
    pub connection_info: VCHI_CONNECTION_INFO,
    pub disconnect: VCHI_CONNECTION_DISCONNECT,
    pub power_control: VCHI_CONNECTION_POWER_CONTROL,
    pub buffer_allocate: VCHI_BUFFER_ALLOCATE,
    pub buffer_free: VCHI_BUFFER_FREE,
}
impl ::std::clone::Clone for Struct_opaque_vchi_connection_api_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_opaque_vchi_connection_api_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vchi_connection_t {
    pub api: *const VCHI_CONNECTION_API_T,
    pub state: *mut VCHI_CONNECTION_STATE_T,
    pub sem: VCOS_SEMAPHORE_T,
}
impl ::std::clone::Clone for Struct_vchi_connection_t {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vchi_connection_t {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCHI_MEM_HANDLE_T = int32_t;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed124 {
    pub version: uint32_t,
    pub version_min: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed124 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed124 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCHI_VERSION_T = Struct_Unnamed124;
pub type Enum_Unnamed125 = ::libc::c_uint;
pub const VCHI_VEC_POINTER: ::libc::c_uint = 0;
pub const VCHI_VEC_HANDLE: ::libc::c_uint = 1;
pub const VCHI_VEC_LIST: ::libc::c_uint = 2;
pub type VCHI_MSG_VECTOR_TYPE_T = Enum_Unnamed125;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_vchi_msg_vector_ex {
    pub _type: VCHI_MSG_VECTOR_TYPE_T,
    pub u: Union_Unnamed126,
}
impl ::std::clone::Clone for Struct_vchi_msg_vector_ex {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_vchi_msg_vector_ex {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed126 {
    pub _bindgen_data_: [u32; 3usize],
}
impl Union_Unnamed126 {
    pub unsafe fn handle(&mut self) -> *mut Struct_Unnamed127 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn ptr(&mut self) -> *mut Struct_Unnamed128 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn list(&mut self) -> *mut Struct_Unnamed129 {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed126 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed126 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed127 {
    pub handle: VCHI_MEM_HANDLE_T,
    pub offset: uint32_t,
    pub vec_len: int32_t,
}
impl ::std::clone::Clone for Struct_Unnamed127 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed127 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed128 {
    pub vec_base: *const ::libc::c_void,
    pub vec_len: int32_t,
}
impl ::std::clone::Clone for Struct_Unnamed128 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed128 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed129 {
    pub vec: *mut Struct_vchi_msg_vector_ex,
    pub vec_len: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed129 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed129 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCHI_MSG_VECTOR_EX_T = Struct_vchi_msg_vector_ex;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed130 {
    pub service: *mut Struct_opaque_vchi_service_t,
    pub message: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_Unnamed130 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed130 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VCHI_HELD_MSG_T = Struct_Unnamed130;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed131 {
    pub version: VCHI_VERSION_T,
    pub service_id: vcos_fourcc_t,
    pub connection: *mut VCHI_CONNECTION_T,
    pub rx_fifo_size: uint32_t,
    pub tx_fifo_size: uint32_t,
    pub callback: VCHI_CALLBACK_T,
    pub callback_param: *mut ::libc::c_void,
    pub want_unaligned_bulk_rx: vcos_bool_t,
    pub want_unaligned_bulk_tx: vcos_bool_t,
    pub want_crc: vcos_bool_t,
}
impl ::std::clone::Clone for Struct_Unnamed131 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed131 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SERVICE_CREATION_T = Struct_Unnamed131;
pub enum Struct_opaque_vchi_instance_handle_t { }
pub type VCHI_INSTANCE_T = *mut Struct_opaque_vchi_instance_handle_t;
pub type VCHI_SERVICE_HANDLE_T = ::libc::c_uint;
pub type VCHI_SERVICE_INIT =
    ::std::option::Option<extern "C" fn(initialise_instance: VCHI_INSTANCE_T,
                                        connections:
                                            *mut *mut VCHI_CONNECTION_T,
                                        num_connections: uint32_t) -> ()>;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_service_info_tag {
    pub vll_filename: *const ::libc::c_uchar,
    pub init: VCHI_SERVICE_INIT,
    pub vll_handle: *mut ::libc::c_void,
}
impl ::std::clone::Clone for Struct_service_info_tag {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_service_info_tag {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SERVICE_INFO_T = Struct_service_info_tag;
pub type uint8p8_t = ::libc::c_ushort;
pub type sint8p8_t = ::libc::c_short;
pub type uint4p12_t = ::libc::c_ushort;
pub type sint4p12_t = ::libc::c_short;
pub type sint0p16_t = ::libc::c_short;
pub type sint8p0_t = ::libc::c_char;
pub type uint0p8_t = ::libc::c_uchar;
pub type int24p8_t = ::libc::c_long;
pub type Enum_bool_e = ::libc::c_uint;
pub const VC_FALSE: ::libc::c_uint = 0;
pub const VC_TRUE: ::libc::c_uint = 1;
pub type VC_BOOL_T = Enum_bool_e;
pub type Enum_Unnamed132 = ::libc::c_uint;
pub const HDMI_PROPERTY_PIXEL_ENCODING: ::libc::c_uint = 0;
pub const HDMI_PROPERTY_PIXEL_CLOCK_TYPE: ::libc::c_uint = 1;
pub const HDMI_PROPERTY_CONTENT_TYPE: ::libc::c_uint = 2;
pub const HDMI_PROPERTY_FUZZY_MATCH: ::libc::c_uint = 3;
pub const HDMI_PROPERTY_3D_STRUCTURE: ::libc::c_uint = 4;
pub const HDMI_PROPERTY_MAX: ::libc::c_uint = 5;
pub type HDMI_PROPERTY_T = Enum_Unnamed132;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed133 {
    pub property: HDMI_PROPERTY_T,
    pub param1: uint32_t,
    pub param2: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed133 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed133 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HDMI_PROPERTY_PARAM_T = Struct_Unnamed133;
pub type Enum_Unnamed134 = ::libc::c_uint;
pub const HDMI_PIXEL_ENCODING_DEFAULT: ::libc::c_uint = 0;
pub const HDMI_PIXEL_ENCODING_RGB_LIMITED: ::libc::c_uint = 1;
pub const HDMI_PIXEL_ENCODING_RGB_FULL: ::libc::c_uint = 2;
pub const HDMI_PIXEL_ENCODING_YCbCr444_LIMITED: ::libc::c_uint = 3;
pub const HDMI_PIXEL_ENCODING_YCbCr444_FULL: ::libc::c_uint = 4;
pub const HDMI_PIXEL_ENCODING_YCbCr422_LIMITED: ::libc::c_uint = 5;
pub const HDMI_PIXEL_ENCODING_YCbCr422_FULL: ::libc::c_uint = 6;
pub const HDMI_PIXEL_ENCODING_MAX: ::libc::c_uint = 7;
pub type HDMI_PIXEL_ENCODING_T = Enum_Unnamed134;
pub type Enum_Unnamed135 = ::libc::c_uint;
pub const HDMI_PIXEL_CLOCK_TYPE_PAL: ::libc::c_uint = 0;
pub const HDMI_PIXEL_CLOCK_TYPE_NTSC: ::libc::c_uint = 1;
pub const HDMI_PIXEL_CLOCK_TYPE_MAX: ::libc::c_uint = 2;
pub type HDMI_PIXEL_CLOCK_TYPE_T = Enum_Unnamed135;
pub type Enum_Unnamed136 = ::libc::c_uint;
pub const EDID_ContentType_NODATA: ::libc::c_uint = 0;
pub const EDID_ContentType_Graphics: ::libc::c_uint = 1;
pub const EDID_ContentType_Photo: ::libc::c_uint = 2;
pub const EDID_ContentType_Cinema: ::libc::c_uint = 3;
pub const EDID_ContentType_Game: ::libc::c_uint = 4;
pub const EDID_ContentType_MAX: ::libc::c_uint = 5;
pub type EDID_ContentType_T = Enum_Unnamed136;
pub type Enum_Unnamed137 = ::libc::c_uint;
pub const EDID_FUZZY_MATCH_DISABLED: ::libc::c_uint = 0;
pub const EDID_FUZZY_MATCH_ENABLED: ::libc::c_uint = 1;
pub const EDID_FUZZY_MATCH_MAX: ::libc::c_uint = 2;
pub type EDID_FuzzyMatch_T = Enum_Unnamed137;
pub type Enum_Unnamed138 = ::libc::c_uint;
pub const HDMI_3D_FORMAT_NONE: ::libc::c_uint = 0;
pub const HDMI_3D_FORMAT_SBS_HALF: ::libc::c_uint = 128;
pub const HDMI_3D_FORMAT_TB_HALF: ::libc::c_uint = 64;
pub const HDMI_3D_FORMAT_INVALID: ::libc::c_uint = 65535;
pub type HDMI_3D_FORMAT_T = Enum_Unnamed138;
pub type VC_HDMI_BOOL_T = ::libc::c_int;
pub type Enum_Unnamed139 = ::libc::c_uint;
pub const HDMI_RES_GROUP_INVALID: ::libc::c_uint = 0;
pub const HDMI_RES_GROUP_CEA: ::libc::c_uint = 1;
pub const HDMI_RES_GROUP_DMT: ::libc::c_uint = 2;
pub const HDMI_RES_GROUP_CEA_3D: ::libc::c_uint = 3;
pub type HDMI_RES_GROUP_T = Enum_Unnamed139;
pub type Enum_Unnamed140 = ::libc::c_uint;
pub const HDMI_ASPECT_UNKNOWN: ::libc::c_uint = 0;
pub const HDMI_ASPECT_4_3: ::libc::c_uint = 1;
pub const HDMI_ASPECT_14_9: ::libc::c_uint = 2;
pub const HDMI_ASPECT_16_9: ::libc::c_uint = 3;
pub const HDMI_ASPECT_5_4: ::libc::c_uint = 4;
pub const HDMI_ASPECT_16_10: ::libc::c_uint = 5;
pub const HDMI_ASPECT_15_9: ::libc::c_uint = 6;
pub const HDMI_ASPECT_64_27: ::libc::c_uint = 7;
pub const HDMI_ASPECT_21_9: ::libc::c_uint = 7;
pub type HDMI_ASPECT_T = Enum_Unnamed140;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed141 {
    pub aspect: uint16_t,
    pub vertical_bar_present: uint16_t,
    pub left_bar_width: uint16_t,
    pub right_bar_width: uint16_t,
    pub horizontal_bar_present: uint16_t,
    pub top_bar_height: uint16_t,
    pub bottom_bar_height: uint16_t,
    pub overscan_flags: uint8_t,
}
impl ::std::clone::Clone for Struct_Unnamed141 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed141 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HDMI_DISPLAY_OPTIONS_T = Struct_Unnamed141;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed142 {
    pub state: uint32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub frame_rate: uint16_t,
    pub scan_mode: uint16_t,
    pub group: uint32_t,
    pub mode: uint32_t,
    pub pixel_rep: uint16_t,
    pub aspect_ratio: uint16_t,
    pub display_options: HDMI_DISPLAY_OPTIONS_T,
    pub pixel_encoding: uint16_t,
    pub format_3d: uint16_t,
}
impl ::std::clone::Clone for Struct_Unnamed142 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed142 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HDMI_DISPLAY_STATE_T = Struct_Unnamed142;
pub type Enum_Unnamed143 = ::libc::c_uint;
pub const HDMI_CP_NONE: ::libc::c_uint = 0;
pub const HDMI_CP_HDCP: ::libc::c_uint = 1;
pub type HDMI_CP_MODE_T = Enum_Unnamed143;
pub type Enum_Unnamed144 = ::libc::c_uint;
pub const HDMI_MODE_OFF: ::libc::c_uint = 0;
pub const HDMI_MODE_DVI: ::libc::c_uint = 1;
pub const HDMI_MODE_HDMI: ::libc::c_uint = 2;
pub const HDMI_MODE_3D: ::libc::c_uint = 3;
pub type HDMI_MODE_T = Enum_Unnamed144;
pub type Enum_Unnamed145 = ::libc::c_uint;
pub const HDMI_SPD_TYPE_UNKNOWN: ::libc::c_uint = 0;
pub const HDMI_SPD_TYPE_STB: ::libc::c_uint = 1;
pub const HDMI_SPD_TYPE_DVD: ::libc::c_uint = 2;
pub const HDMI_SPD_TYPE_DVHS: ::libc::c_uint = 3;
pub const HDMI_SPD_TYPE_HDD_RECORDER: ::libc::c_uint = 4;
pub const HDMI_SPD_TYPE_DVC: ::libc::c_uint = 5;
pub const HDMI_SPD_TYPE_DSC: ::libc::c_uint = 6;
pub const HDMI_SPD_TYPE_VCD: ::libc::c_uint = 7;
pub const HDMI_SPD_TYPE_GAME: ::libc::c_uint = 8;
pub const HDMI_SPD_TYPE_PC: ::libc::c_uint = 9;
pub const HDMI_SPD_TYPE_BD: ::libc::c_uint = 10;
pub const HDMI_SPD_TYPE_SACD: ::libc::c_uint = 11;
pub const HDMI_SPD_TYPE_HDDVD: ::libc::c_uint = 12;
pub const HDMI_SPD_TYPE_PMP: ::libc::c_uint = 13;
pub type HDMI_SPD_TYPE_CODE_T = Enum_Unnamed145;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed146 {
    pub manufacturer: *mut ::libc::c_uchar,
    pub description: *mut ::libc::c_uchar,
    pub _type: HDMI_SPD_TYPE_CODE_T,
}
impl ::std::clone::Clone for Struct_Unnamed146 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed146 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type HDMI_SPD_DATA_T = Struct_Unnamed146;
pub type Enum_Unnamed147 = ::libc::c_uint;
pub const HDMI_CEA_VGA: ::libc::c_uint = 1;
pub const HDMI_CEA_480p60: ::libc::c_uint = 2;
pub const HDMI_CEA_480p60H: ::libc::c_uint = 3;
pub const HDMI_CEA_720p60: ::libc::c_uint = 4;
pub const HDMI_CEA_1080i60: ::libc::c_uint = 5;
pub const HDMI_CEA_480i60: ::libc::c_uint = 6;
pub const HDMI_CEA_480i60H: ::libc::c_uint = 7;
pub const HDMI_CEA_240p60: ::libc::c_uint = 8;
pub const HDMI_CEA_240p60H: ::libc::c_uint = 9;
pub const HDMI_CEA_480i60_4x: ::libc::c_uint = 10;
pub const HDMI_CEA_480i60_4xH: ::libc::c_uint = 11;
pub const HDMI_CEA_240p60_4x: ::libc::c_uint = 12;
pub const HDMI_CEA_240p60_4xH: ::libc::c_uint = 13;
pub const HDMI_CEA_480p60_2x: ::libc::c_uint = 14;
pub const HDMI_CEA_480p60_2xH: ::libc::c_uint = 15;
pub const HDMI_CEA_1080p60: ::libc::c_uint = 16;
pub const HDMI_CEA_576p50: ::libc::c_uint = 17;
pub const HDMI_CEA_576p50H: ::libc::c_uint = 18;
pub const HDMI_CEA_720p50: ::libc::c_uint = 19;
pub const HDMI_CEA_1080i50: ::libc::c_uint = 20;
pub const HDMI_CEA_576i50: ::libc::c_uint = 21;
pub const HDMI_CEA_576i50H: ::libc::c_uint = 22;
pub const HDMI_CEA_288p50: ::libc::c_uint = 23;
pub const HDMI_CEA_288p50H: ::libc::c_uint = 24;
pub const HDMI_CEA_576i50_4x: ::libc::c_uint = 25;
pub const HDMI_CEA_576i50_4xH: ::libc::c_uint = 26;
pub const HDMI_CEA_288p50_4x: ::libc::c_uint = 27;
pub const HDMI_CEA_288p50_4xH: ::libc::c_uint = 28;
pub const HDMI_CEA_576p50_2x: ::libc::c_uint = 29;
pub const HDMI_CEA_576p50_2xH: ::libc::c_uint = 30;
pub const HDMI_CEA_1080p50: ::libc::c_uint = 31;
pub const HDMI_CEA_1080p24: ::libc::c_uint = 32;
pub const HDMI_CEA_1080p25: ::libc::c_uint = 33;
pub const HDMI_CEA_1080p30: ::libc::c_uint = 34;
pub const HDMI_CEA_480p60_4x: ::libc::c_uint = 35;
pub const HDMI_CEA_480p60_4xH: ::libc::c_uint = 36;
pub const HDMI_CEA_576p50_4x: ::libc::c_uint = 37;
pub const HDMI_CEA_576p50_4xH: ::libc::c_uint = 38;
pub const HDMI_CEA_1080i50_rb: ::libc::c_uint = 39;
pub const HDMI_CEA_1080i100: ::libc::c_uint = 40;
pub const HDMI_CEA_720p100: ::libc::c_uint = 41;
pub const HDMI_CEA_576p100: ::libc::c_uint = 42;
pub const HDMI_CEA_576p100H: ::libc::c_uint = 43;
pub const HDMI_CEA_576i100: ::libc::c_uint = 44;
pub const HDMI_CEA_576i100H: ::libc::c_uint = 45;
pub const HDMI_CEA_1080i120: ::libc::c_uint = 46;
pub const HDMI_CEA_720p120: ::libc::c_uint = 47;
pub const HDMI_CEA_480p120: ::libc::c_uint = 48;
pub const HDMI_CEA_480p120H: ::libc::c_uint = 49;
pub const HDMI_CEA_480i120: ::libc::c_uint = 50;
pub const HDMI_CEA_480i120H: ::libc::c_uint = 51;
pub const HDMI_CEA_576p200: ::libc::c_uint = 52;
pub const HDMI_CEA_576p200H: ::libc::c_uint = 53;
pub const HDMI_CEA_576i200: ::libc::c_uint = 54;
pub const HDMI_CEA_576i200H: ::libc::c_uint = 55;
pub const HDMI_CEA_480p240: ::libc::c_uint = 56;
pub const HDMI_CEA_480p240H: ::libc::c_uint = 57;
pub const HDMI_CEA_480i240: ::libc::c_uint = 58;
pub const HDMI_CEA_480i240H: ::libc::c_uint = 59;
pub const HDMI_CEA_720p24: ::libc::c_uint = 60;
pub const HDMI_CEA_720p25: ::libc::c_uint = 61;
pub const HDMI_CEA_720p30: ::libc::c_uint = 62;
pub const HDMI_CEA_1080p120: ::libc::c_uint = 63;
pub const HDMI_CEA_1080p100: ::libc::c_uint = 64;
pub const HDMI_CEA_OFF: ::libc::c_uint = 255;
pub type HDMI_CEA_RES_CODE_T = Enum_Unnamed147;
pub type Enum_Unnamed148 = ::libc::c_uint;
pub const HDMI_DMT_640x350_85: ::libc::c_uint = 1;
pub const HDMI_DMT_640x400_85: ::libc::c_uint = 2;
pub const HDMI_DMT_IBM_VGA_85: ::libc::c_uint = 3;
pub const HDMI_DMT_VGA_60: ::libc::c_uint = 4;
pub const HDMI_DMT_VGA_72: ::libc::c_uint = 5;
pub const HDMI_DMT_VGA_75: ::libc::c_uint = 6;
pub const HDMI_DMT_VGA_85: ::libc::c_uint = 7;
pub const HDMI_DMT_SVGA_56: ::libc::c_uint = 8;
pub const HDMI_DMT_SVGA_60: ::libc::c_uint = 9;
pub const HDMI_DMT_SVGA_72: ::libc::c_uint = 10;
pub const HDMI_DMT_SVGA_75: ::libc::c_uint = 11;
pub const HDMI_DMT_SVGA_85: ::libc::c_uint = 12;
pub const HDMI_DMT_SVGA_120: ::libc::c_uint = 13;
pub const HDMI_DMT_848x480_60: ::libc::c_uint = 14;
pub const HDMI_DMT_XGA_43: ::libc::c_uint = 15;
pub const HDMI_DMT_XGA_60: ::libc::c_uint = 16;
pub const HDMI_DMT_XGA_70: ::libc::c_uint = 17;
pub const HDMI_DMT_XGA_75: ::libc::c_uint = 18;
pub const HDMI_DMT_XGA_85: ::libc::c_uint = 19;
pub const HDMI_DMT_XGA_120: ::libc::c_uint = 20;
pub const HDMI_DMT_XGAP_75: ::libc::c_uint = 21;
pub const HDMI_DMT_WXGA_RB: ::libc::c_uint = 22;
pub const HDMI_DMT_WXGA_60: ::libc::c_uint = 23;
pub const HDMI_DMT_WXGA_75: ::libc::c_uint = 24;
pub const HDMI_DMT_WXGA_85: ::libc::c_uint = 25;
pub const HDMI_DMT_WXGA_120: ::libc::c_uint = 26;
pub const HDMI_DMT_1280x800_RB: ::libc::c_uint = 27;
pub const HDMI_DMT_1280x800_60: ::libc::c_uint = 28;
pub const HDMI_DMT_1280x800_75: ::libc::c_uint = 29;
pub const HDMI_DMT_1280x800_85: ::libc::c_uint = 30;
pub const HDMI_DMT_1280x800_120: ::libc::c_uint = 31;
pub const HDMI_DMT_1280x960_60: ::libc::c_uint = 32;
pub const HDMI_DMT_1280x960_85: ::libc::c_uint = 33;
pub const HDMI_DMT_1280x960_120: ::libc::c_uint = 34;
pub const HDMI_DMT_SXGA_60: ::libc::c_uint = 35;
pub const HDMI_DMT_SXGA_75: ::libc::c_uint = 36;
pub const HDMI_DMT_SXGA_85: ::libc::c_uint = 37;
pub const HDMI_DMT_SXGA_120: ::libc::c_uint = 38;
pub const HDMI_DMT_1360x768_60: ::libc::c_uint = 39;
pub const HDMI_DMT_1360x768_120: ::libc::c_uint = 40;
pub const HDMI_DMT_SXGAP_RB: ::libc::c_uint = 41;
pub const HDMI_DMT_SXGAP_60: ::libc::c_uint = 42;
pub const HDMI_DMT_SXGAP_75: ::libc::c_uint = 43;
pub const HDMI_DMT_SXGAP_85: ::libc::c_uint = 44;
pub const HDMI_DMT_SXGAP_120: ::libc::c_uint = 45;
pub const HDMI_DMT_1440x900_RB: ::libc::c_uint = 46;
pub const HDMI_DMT_1440x900_60: ::libc::c_uint = 47;
pub const HDMI_DMT_1440x900_75: ::libc::c_uint = 48;
pub const HDMI_DMT_1440x900_85: ::libc::c_uint = 49;
pub const HDMI_DMT_1440x900_120: ::libc::c_uint = 50;
pub const HDMI_DMT_UXGA_60: ::libc::c_uint = 51;
pub const HDMI_DMT_UXGA_65: ::libc::c_uint = 52;
pub const HDMI_DMT_UXGA_70: ::libc::c_uint = 53;
pub const HDMI_DMT_UXGA_75: ::libc::c_uint = 54;
pub const HDMI_DMT_UXGA_85: ::libc::c_uint = 55;
pub const HDMI_DMT_UXGA_120: ::libc::c_uint = 56;
pub const HDMI_DMT_SWXGAP_RB: ::libc::c_uint = 57;
pub const HDMI_DMT_SWXGAP_60: ::libc::c_uint = 58;
pub const HDMI_DMT_SWXGAP_75: ::libc::c_uint = 59;
pub const HDMI_DMT_SWXGAP_85: ::libc::c_uint = 60;
pub const HDMI_DMT_SWXGAP_120: ::libc::c_uint = 61;
pub const HDMI_DMT_1792x1344_60: ::libc::c_uint = 62;
pub const HDMI_DMT_1792x1344_75: ::libc::c_uint = 63;
pub const HDMI_DMT_1792x1344_120: ::libc::c_uint = 64;
pub const HDMI_DMT_1856x1392_60: ::libc::c_uint = 65;
pub const HDMI_DMT_1856x1392_75: ::libc::c_uint = 66;
pub const HDMI_DMT_1856x1392_120: ::libc::c_uint = 67;
pub const HDMI_DMT_WUXGA_RB: ::libc::c_uint = 68;
pub const HDMI_DMT_WUXGA_60: ::libc::c_uint = 69;
pub const HDMI_DMT_WUXGA_75: ::libc::c_uint = 70;
pub const HDMI_DMT_WUXGA_85: ::libc::c_uint = 71;
pub const HDMI_DMT_WUXGA_120: ::libc::c_uint = 72;
pub const HDMI_DMT_1920x1440_60: ::libc::c_uint = 73;
pub const HDMI_DMT_1920x1440_75: ::libc::c_uint = 74;
pub const HDMI_DMT_1920x1440_120: ::libc::c_uint = 75;
pub const HDMI_DMT_2560x1600_RB: ::libc::c_uint = 76;
pub const HDMI_DMT_2560x1600_60: ::libc::c_uint = 77;
pub const HDMI_DMT_2560x1600_75: ::libc::c_uint = 78;
pub const HDMI_DMT_2560x1600_85: ::libc::c_uint = 78;
pub const HDMI_DMT_2560x1600_120: ::libc::c_uint = 80;
pub const HDMI_DMT_1366x768_60: ::libc::c_uint = 81;
pub const HDMI_DMT_1080p_60: ::libc::c_uint = 82;
pub const HDMI_DMT_1600x900_RB: ::libc::c_uint = 83;
pub const HDMI_DMT_2048x1152_RB: ::libc::c_uint = 84;
pub const HDMI_DMT_720p_60: ::libc::c_uint = 85;
pub const HDMI_DMT_1366x768_RB: ::libc::c_uint = 86;
pub const HDMI_DMT_OFF: ::libc::c_uint = 255;
pub type HDMI_DMT_RES_CODE_T = Enum_Unnamed148;
pub type Enum_Unnamed149 = ::libc::c_uint;
pub const HDMI_NONINTERLACED: ::libc::c_uint = 0;
pub const HDMI_INTERLACED: ::libc::c_uint = 1;
pub type HDMI_INTERLACED_T = Enum_Unnamed149;
pub type Enum_Unnamed150 = ::libc::c_uint;
pub const HDMI_MODE_MATCH_NONE: ::libc::c_uint = 0;
pub const HDMI_MODE_MATCH_FRAMERATE: ::libc::c_uint = 1;
pub const HDMI_MODE_MATCH_RESOLUTION: ::libc::c_uint = 2;
pub const HDMI_MODE_MATCH_SCANMODE: ::libc::c_uint = 4;
pub type EDID_MODE_MATCH_FLAG_T = Enum_Unnamed150;
pub type Enum_Unnamed151 = ::libc::c_uint;
pub const EDID_AUDIO_NO_SUPPORT: ::libc::c_uint = 1;
pub const EDID_AUDIO_CHAN_UNSUPPORTED: ::libc::c_uint = 2;
pub const EDID_AUDIO_FS_UNSUPPORTED: ::libc::c_uint = 4;
pub const EDID_AUDIO_BR_UNSUPPORTED: ::libc::c_uint = 8;
pub const EDID_AUDIO_SAMP_UNSUPPORTED: ::libc::c_uint = 16;
pub type EDID_AUDIO_SUPPORT_FLAG_T = Enum_Unnamed151;
pub type Enum_Unnamed152 = ::libc::c_uint;
pub const EDID_AudioFormat_eReserved: ::libc::c_uint = 0;
pub const EDID_AudioFormat_ePCM: ::libc::c_uint = 1;
pub const EDID_AudioFormat_eAC3: ::libc::c_uint = 2;
pub const EDID_AudioFormat_eMPEG1: ::libc::c_uint = 3;
pub const EDID_AudioFormat_eMP3: ::libc::c_uint = 4;
pub const EDID_AudioFormat_eMPEG2: ::libc::c_uint = 5;
pub const EDID_AudioFormat_eAAC: ::libc::c_uint = 6;
pub const EDID_AudioFormat_eDTS: ::libc::c_uint = 7;
pub const EDID_AudioFormat_eATRAC: ::libc::c_uint = 8;
pub const EDID_AudioFormat_eDSD: ::libc::c_uint = 9;
pub const EDID_AudioFormat_eEAC3: ::libc::c_uint = 10;
pub const EDID_AudioFormat_eDTS_HD: ::libc::c_uint = 11;
pub const EDID_AudioFormat_eMLP: ::libc::c_uint = 12;
pub const EDID_AudioFormat_eDST: ::libc::c_uint = 13;
pub const EDID_AudioFormat_eWMAPRO: ::libc::c_uint = 14;
pub const EDID_AudioFormat_eExtended: ::libc::c_uint = 15;
pub const EDID_AudioFormat_eMaxCount: ::libc::c_uint = 16;
pub type EDID_AudioFormat = Enum_Unnamed152;
pub type Enum_Unnamed153 = ::libc::c_uint;
pub const EDID_AudioCodingExtension_NONE: ::libc::c_uint = 0;
pub const EDID_AudioCodingExtension_HEAAC: ::libc::c_uint = 1;
pub const EDID_AudioCodingExtension_HEAAC2: ::libc::c_uint = 2;
pub const EDID_AudioCodingExtension_MPEGSUR: ::libc::c_uint = 3;
pub const EDID_AudioCodingExtension_max: ::libc::c_uint = 4;
pub type EDID_AudioCodingExtension = Enum_Unnamed153;
pub type Enum_Unnamed154 = ::libc::c_uint;
pub const EDID_AudioSampleRate_eReferToHeader: ::libc::c_uint = 0;
pub const EDID_AudioSampleRate_e32KHz: ::libc::c_uint = 1;
pub const EDID_AudioSampleRate_e44KHz: ::libc::c_uint = 2;
pub const EDID_AudioSampleRate_e48KHz: ::libc::c_uint = 4;
pub const EDID_AudioSampleRate_e88KHz: ::libc::c_uint = 8;
pub const EDID_AudioSampleRate_e96KHz: ::libc::c_uint = 16;
pub const EDID_AudioSampleRate_e176KHz: ::libc::c_uint = 32;
pub const EDID_AudioSampleRate_e192KHz: ::libc::c_uint = 64;
pub type EDID_AudioSampleRate = Enum_Unnamed154;
pub type Enum_Unnamed155 = ::libc::c_uint;
pub const EDID_AudioSampleSize_refertoheader: ::libc::c_uint = 0;
pub const EDID_AudioSampleSize_16bit: ::libc::c_uint = 1;
pub const EDID_AudioSampleSize_20bit: ::libc::c_uint = 2;
pub const EDID_AudioSampleSize_24bit: ::libc::c_uint = 4;
pub type EDID_AudioSampleSize = Enum_Unnamed155;
pub type Enum_Unnamed156 = ::libc::c_uint;
pub const EDID_AudioLFEFB_UNKNOWN: ::libc::c_uint = 0;
pub const EDID_AudioLFEFB_0dB: ::libc::c_uint = 1;
pub const EDID_AudioLFEFB_10dB: ::libc::c_uint = 2;
pub type EDID_AudioLFEFB = Enum_Unnamed156;
pub type Enum_Unnamed157 = ::libc::c_uint;
pub const HDMI_3D_STRUCT_NONE: ::libc::c_uint = 0;
pub const HDMI_3D_STRUCT_FRAME_PACKING: ::libc::c_uint = 1;
pub const HDMI_3D_STRUCT_FIELD_ALTERNATIVE: ::libc::c_uint = 2;
pub const HDMI_3D_STRUCT_LINE_ALTERNATIVE: ::libc::c_uint = 4;
pub const HDMI_3D_STRUCT_SIDE_BY_SIDE_FULL: ::libc::c_uint = 8;
pub const HDMI_3D_STRUCT_L_DEPTH: ::libc::c_uint = 16;
pub const HDMI_3D_STRUCT_L_DEPTH_GRAPHICS_GRAPHICS_DEPTH: ::libc::c_uint = 32;
pub const HDMI_3D_STRUCT_TOP_AND_BOTTOM: ::libc::c_uint = 64;
pub const HDMI_3D_STRUCT_SIDE_BY_SIDE_HALF_HORIZONTAL: ::libc::c_uint = 128;
pub const HDMI_3D_STRUCT_SIDE_BY_SIDE_HALF_ODD_LEFT_ODD_RIGHT: ::libc::c_uint
          =
    256;
pub const HDMI_3D_STRUCT_SIDE_BY_SIDE_HALF_ODD_LEFT_EVEN_RIGHT: ::libc::c_uint
          =
    512;
pub const HDMI_3D_STRUCT_SIDE_BY_SIDE_HALF_EVEN_LEFT_ODD_RIGHT: ::libc::c_uint
          =
    1024;
pub const HDMI_3D_STRUCT_SIDE_BY_SIDE_HALF_EVEN_LEFT_EVEN_RIGHT:
          ::libc::c_uint =
    2048;
pub type HDMI_3D_STRUCT_T = Enum_Unnamed157;
pub type Enum_Unnamed158 = ::libc::c_uint;
pub const VC_HDMI_UNPLUGGED: ::libc::c_uint = 1;
pub const VC_HDMI_ATTACHED: ::libc::c_uint = 2;
pub const VC_HDMI_DVI: ::libc::c_uint = 4;
pub const VC_HDMI_HDMI: ::libc::c_uint = 8;
pub const VC_HDMI_HDCP_UNAUTH: ::libc::c_uint = 16;
pub const VC_HDMI_HDCP_AUTH: ::libc::c_uint = 32;
pub const VC_HDMI_HDCP_KEY_DOWNLOAD: ::libc::c_uint = 64;
pub const VC_HDMI_HDCP_SRM_DOWNLOAD: ::libc::c_uint = 128;
pub const VC_HDMI_CHANGING_MODE: ::libc::c_uint = 256;
pub type VC_HDMI_NOTIFY_T = Enum_Unnamed158;
pub type HDMI_CALLBACK_T =
    ::std::option::Option<extern "C" fn(client_p: *mut ::libc::c_void,
                                        reason: VC_HDMI_NOTIFY_T,
                                        param1: uint32_t, param2: uint32_t)
                              -> ()>;
pub type Enum_Unnamed159 = ::libc::c_uint;
pub const VC_HDMI_SUCCESS: ::libc::c_uint = 0;
pub const VC_HDMI_ERROR_FORMAT_UNSUPPORTED: ::libc::c_uint = 1;
pub const VC_HDMI_ERROR_INVALID_FORMAT: ::libc::c_uint = 2;
pub const VC_HDMI_ERROR_INVALID_PROPERTY: ::libc::c_uint = 3;
pub const VC_HDMI_ERROR_OUT_OF_RANGE: ::libc::c_uint = 4;
pub const VC_HDMI_ERROR_INVALID_INFOFRAME: ::libc::c_uint = 5;
pub type VC_HDMI_ERROR_T = Enum_Unnamed159;
pub type HDMI_RESULT_T = VC_HDMI_ERROR_T;
pub type Enum_SDTV_COLOUR_ = ::libc::c_uint;
pub const SDTV_COLOUR_UNKNOWN: ::libc::c_uint = 0;
pub const SDTV_COLOUR_RGB: ::libc::c_uint = 4;
pub const SDTV_COLOUR_YPRPB: ::libc::c_uint = 8;
pub const SDTV_COLOUR_FORCE_32BIT: ::libc::c_uint = -2147483648;
pub type SDTV_COLOUR_T = Enum_SDTV_COLOUR_;
pub type Enum_SDTV_MODE_T_ = ::libc::c_uint;
pub const SDTV_MODE_NTSC: ::libc::c_uint = 0;
pub const SDTV_MODE_NTSC_J: ::libc::c_uint = 1;
pub const SDTV_MODE_PAL: ::libc::c_uint = 2;
pub const SDTV_MODE_PAL_M: ::libc::c_uint = 3;
pub const SDTV_MODE_FORMAT_MASK: ::libc::c_uint = 3;
pub const SDTV_MODE_OUTPUT_MASK: ::libc::c_uint = 12;
pub const SDTV_MODE_YPRPB_480i: ::libc::c_uint = 8;
pub const SDTV_MODE_RGB_480i: ::libc::c_uint = 4;
pub const SDTV_MODE_YPRPB_576i: ::libc::c_uint = 10;
pub const SDTV_MODE_RGB_576i: ::libc::c_uint = 6;
pub const SDTV_MODE_OFF: ::libc::c_uint = 240;
pub const SDTV_MODE_FORCE_32BIT: ::libc::c_uint = -2147483648;
pub type SDTV_MODE_T = Enum_SDTV_MODE_T_;
pub type Enum_SDTV_ASPECT_T_ = ::libc::c_uint;
pub const SDTV_ASPECT_UNKNOWN: ::libc::c_uint = 0;
pub const SDTV_ASPECT_4_3: ::libc::c_uint = 1;
pub const SDTV_ASPECT_14_9: ::libc::c_uint = 2;
pub const SDTV_ASPECT_16_9: ::libc::c_uint = 3;
pub const SDTV_ASPECTFORCE_32BIT: ::libc::c_uint = -2147483648;
pub type SDTV_ASPECT_T = Enum_SDTV_ASPECT_T_;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_SDTV_OPTIONS_T_ {
    pub aspect: SDTV_ASPECT_T,
}
impl ::std::clone::Clone for Struct_SDTV_OPTIONS_T_ {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_SDTV_OPTIONS_T_ {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SDTV_OPTIONS_T = Struct_SDTV_OPTIONS_T_;
pub type Enum_Unnamed160 = ::libc::c_uint;
pub const SDTV_CP_NONE: ::libc::c_uint = 0;
pub const SDTV_CP_MACROVISION_TYPE1: ::libc::c_uint = 1;
pub const SDTV_CP_MACROVISION_TYPE2: ::libc::c_uint = 2;
pub const SDTV_CP_MACROVISION_TYPE3: ::libc::c_uint = 3;
pub const SDTV_CP_MACROVISION_TEST1: ::libc::c_uint = 4;
pub const SDTV_CP_MACROVISION_TEST2: ::libc::c_uint = 5;
pub const SDTV_CP_CGMS_COPYFREE: ::libc::c_uint = 6;
pub const SDTV_CP_CGMS_COPYNOMORE: ::libc::c_uint = 7;
pub const SDTV_CP_CGMS_COPYONCE: ::libc::c_uint = 8;
pub const SDTV_CP_CGMS_COPYNEVER: ::libc::c_uint = 9;
pub const SDTV_CP_WSS_COPYFREE: ::libc::c_uint = 10;
pub const SDTV_CP_WSS_COPYRIGHT_COPYFREE: ::libc::c_uint = 11;
pub const SDTV_CP_WSS_NOCOPY: ::libc::c_uint = 12;
pub const SDTV_CP_WSS_COPYRIGHT_NOCOPY: ::libc::c_uint = 13;
pub const SDTV_CP_FORCE_32BIT: ::libc::c_uint = -2147483648;
pub type SDTV_CP_MODE_T = Enum_Unnamed160;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed161 {
    pub state: uint32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub frame_rate: uint16_t,
    pub scan_mode: uint16_t,
    pub mode: SDTV_MODE_T,
    pub display_options: SDTV_OPTIONS_T,
    pub colour: SDTV_COLOUR_T,
    pub cp_mode: SDTV_CP_MODE_T,
}
impl ::std::clone::Clone for Struct_Unnamed161 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed161 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type SDTV_DISPLAY_STATE_T = Struct_Unnamed161;
pub type Enum_Unnamed162 = ::libc::c_uint;
pub const VC_SDTV_UNPLUGGED: ::libc::c_uint = 65536;
pub const VC_SDTV_ATTACHED: ::libc::c_uint = 131072;
pub const VC_SDTV_NTSC: ::libc::c_uint = 262144;
pub const VC_SDTV_PAL: ::libc::c_uint = 524288;
pub const VC_SDTV_CP_INACTIVE: ::libc::c_uint = 1048576;
pub const VC_SDTV_CP_ACTIVE: ::libc::c_uint = 2097152;
pub type VC_SDTV_NOTIFY_T = Enum_Unnamed162;
pub type Enum_Unnamed163 = ::libc::c_uint;
pub const VC_TV_GET_STATE: ::libc::c_uint = 0;
pub const VC_TV_HDMI_ON_PREFERRED: ::libc::c_uint = 1;
pub const VC_TV_HDMI_ON_BEST: ::libc::c_uint = 2;
pub const VC_TV_HDMI_ON_EXPLICIT: ::libc::c_uint = 3;
pub const VC_TV_SDTV_ON: ::libc::c_uint = 4;
pub const VC_TV_OFF: ::libc::c_uint = 5;
pub const VC_TV_QUERY_SUPPORTED_MODES: ::libc::c_uint = 6;
pub const VC_TV_QUERY_MODE_SUPPORT: ::libc::c_uint = 7;
pub const VC_TV_QUERY_AUDIO_SUPPORT: ::libc::c_uint = 8;
pub const VC_TV_ENABLE_COPY_PROTECT: ::libc::c_uint = 9;
pub const VC_TV_DISABLE_COPY_PROTECT: ::libc::c_uint = 10;
pub const VC_TV_SHOW_INFO: ::libc::c_uint = 11;
pub const VC_TV_GET_AV_LATENCY: ::libc::c_uint = 12;
pub const VC_TV_HDCP_SET_KEY: ::libc::c_uint = 13;
pub const VC_TV_HDCP_SET_SRM: ::libc::c_uint = 14;
pub const VC_TV_SET_SPD: ::libc::c_uint = 15;
pub const VC_TV_SET_DISPLAY_OPTIONS: ::libc::c_uint = 16;
pub const VC_TV_TEST_MODE_START: ::libc::c_uint = 17;
pub const VC_TV_TEST_MODE_STOP: ::libc::c_uint = 18;
pub const VC_TV_DDC_READ: ::libc::c_uint = 19;
pub const VC_TV_SET_ATTACHED: ::libc::c_uint = 20;
pub const VC_TV_SET_PROP: ::libc::c_uint = 21;
pub const VC_TV_GET_PROP: ::libc::c_uint = 22;
pub const VC_TV_GET_DISPLAY_STATE: ::libc::c_uint = 23;
pub const VC_TV_QUERY_SUPPORTED_MODES_ACTUAL: ::libc::c_uint = 24;
pub const VC_TV_GET_DEVICE_ID: ::libc::c_uint = 25;
pub const VC_TV_END_OF_LIST: ::libc::c_uint = 26;
pub type VC_TV_CMD_CODE_T = Enum_Unnamed163;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed164 {
    pub state: uint32_t,
    pub width: uint32_t,
    pub height: uint32_t,
    pub frame_rate: uint16_t,
    pub scan_mode: uint16_t,
}
impl ::std::clone::Clone for Struct_Unnamed164 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed164 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_GET_STATE_RESP_T = Struct_Unnamed164;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed165 {
    pub ret: int32_t,
}
impl ::std::clone::Clone for Struct_Unnamed165 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed165 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_GENERAL_RESP_T = Struct_Unnamed165;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed166 {
    pub in_3d: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed166 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed166 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_HDMI_ON_PREFERRED_PARAM_T = Struct_Unnamed166;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed167 {
    pub width: uint32_t,
    pub height: uint32_t,
    pub frame_rate: uint32_t,
    pub scan_mode: uint32_t,
    pub match_flags: uint32_t,
    pub in_3d: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed167 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed167 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_HDMI_ON_BEST_PARAM_T = Struct_Unnamed167;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed168 {
    pub hdmi_mode: uint32_t,
    pub group: uint32_t,
    pub mode: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed168 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed168 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_HDMI_ON_EXPLICIT_PARAM_T = Struct_Unnamed168;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed169 {
    pub mode: uint32_t,
    pub aspect: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed169 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed169 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_SDTV_ON_PARAM_T = Struct_Unnamed169;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed170 {
    pub _bindgen_bitfield_1_: uint32_t,
    pub _bindgen_bitfield_2_: uint32_t,
    pub _bindgen_bitfield_3_: uint32_t,
    pub _bindgen_bitfield_4_: uint32_t,
    pub _bindgen_bitfield_5_: uint32_t,
    pub _bindgen_bitfield_6_: uint32_t,
    pub frame_rate: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
    pub pixel_freq: uint32_t,
    pub struct_3d_mask: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed170 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed170 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_SUPPORTED_MODE_NEW_T = Struct_Unnamed170;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed171 {
    pub _bindgen_bitfield_1_: uint16_t,
    pub _bindgen_bitfield_2_: uint16_t,
    pub _bindgen_bitfield_3_: uint16_t,
    pub frame_rate: uint16_t,
    pub width: uint16_t,
    pub height: uint16_t,
}
impl ::std::clone::Clone for Struct_Unnamed171 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed171 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_SUPPORTED_MODE_T = Struct_Unnamed171;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed172 {
    pub num_supported_modes: uint32_t,
    pub preferred_group: uint32_t,
    pub preferred_mode: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed172 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed172 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_QUERY_SUPPORTED_MODES_RESP_T = Struct_Unnamed172;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed173 {
    pub group: uint32_t,
    pub mode: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed173 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed173 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_QUERY_MODE_SUPPORT_PARAM_T = Struct_Unnamed173;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed174 {
    pub audio_format: uint32_t,
    pub num_channels: uint32_t,
    pub fs: uint32_t,
    pub bitrate: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed174 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed174 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_QUERY_AUDIO_SUPPORT_PARAM_T = Struct_Unnamed174;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed175 {
    pub cp_mode: uint32_t,
    pub timeout: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed175 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed175 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_ENABLE_COPY_PROTECT_PARAM_T = Struct_Unnamed175;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed176 {
    pub visible: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed176 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed176 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_SHOW_INFO_PARAM_T = Struct_Unnamed176;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed177 {
    pub key: [uint8_t; 328usize],
}
impl ::std::clone::Clone for Struct_Unnamed177 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed177 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_HDCP_SET_KEY_PARAM_T = Struct_Unnamed177;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed178 {
    pub num_keys: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed178 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed178 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_HDCP_SET_SRM_PARAM_T = Struct_Unnamed178;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed179 {
    pub manufacturer: [::libc::c_uchar; 8usize],
    pub description: [::libc::c_uchar; 16usize],
    pub _type: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed179 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed179 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_SET_SPD_PARAM_T = Struct_Unnamed179;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed180 {
    pub aspect: uint32_t,
    pub vertical_bar_present: uint32_t,
    pub left_bar_width: uint32_t,
    pub right_bar_width: uint32_t,
    pub horizontal_bar_present: uint32_t,
    pub top_bar_height: uint32_t,
    pub bottom_bar_height: uint32_t,
    pub overscan_flags: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed180 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed180 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_SET_DISPLAY_OPTIONS_PARAM_T = Struct_Unnamed180;
pub type Enum_Unnamed181 = ::libc::c_uint;
pub const TV_TEST_MODE_DISABLED: ::libc::c_uint = 0;
pub const TV_TEST_MODE_SOLID_BACKGND: ::libc::c_uint = 1;
pub const TV_TEST_MODE_SOLID_VERTICAL: ::libc::c_uint = 2;
pub const TV_TEST_MODE_SHADED_VERTICAL: ::libc::c_uint = 3;
pub const TV_TEST_MODE_SHADED_WHITE_V: ::libc::c_uint = 4;
pub const TV_TEST_MODE_SHADED_WHITE_H: ::libc::c_uint = 5;
pub const TV_TEST_MODE_SHADED_RGB: ::libc::c_uint = 6;
pub const TV_TEST_MODE_WALKING: ::libc::c_uint = 7;
pub const TV_TEST_MODE_DELAYED: ::libc::c_uint = 8;
pub const TV_TEST_MODE_HVD: ::libc::c_uint = 9;
pub const TV_TEST_MODE_ODD_CH: ::libc::c_uint = 10;
pub const TV_TEST_MODE_EVEN_CH: ::libc::c_uint = 11;
pub const TV_TEST_MODE_32x32: ::libc::c_uint = 12;
pub const TV_TEST_MODE_WYCGMRBK_SOLID: ::libc::c_uint = 13;
pub const TV_TEST_MODE_WYCGMRBK_SHADED: ::libc::c_uint = 14;
pub const TV_TEST_MODE_32x32_DIAGONAL: ::libc::c_uint = 15;
pub type TV_TEST_MODE_T = Enum_Unnamed181;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed182 {
    pub colour: uint32_t,
    pub test_mode: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed182 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed182 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_TEST_MODE_START_PARAM_T = Struct_Unnamed182;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed183 {
    pub offset: uint32_t,
    pub length: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed183 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed183 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_DDC_READ_PARAM_T = Struct_Unnamed183;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed184 {
    pub ret: int32_t,
    pub property: HDMI_PROPERTY_PARAM_T,
}
impl ::std::clone::Clone for Struct_Unnamed184 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed184 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_GET_PROP_PARAM_T = Struct_Unnamed184;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed185 {
    pub state: uint32_t,
    pub display: Union_Unnamed186,
}
impl ::std::clone::Clone for Struct_Unnamed185 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed185 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
#[repr(C)]
#[derive(Copy)]
pub struct Union_Unnamed186 {
    pub _bindgen_data_: [u32; 12usize],
}
impl Union_Unnamed186 {
    pub unsafe fn sdtv(&mut self) -> *mut SDTV_DISPLAY_STATE_T {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
    pub unsafe fn hdmi(&mut self) -> *mut HDMI_DISPLAY_STATE_T {
        let raw: *mut u8 = ::std::mem::transmute(&self._bindgen_data_);
        ::std::mem::transmute(raw.offset(0))
    }
}
impl ::std::clone::Clone for Union_Unnamed186 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Union_Unnamed186 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_DISPLAY_STATE_T = Struct_Unnamed185;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed187 {
    pub vendor: [::libc::c_uchar; 4usize],
    pub monitor_name: [::libc::c_uchar; 14usize],
    pub serial_num: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed187 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed187 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type TV_DEVICE_ID_T = Struct_Unnamed187;
pub type TVSERVICE_CALLBACK_T =
    ::std::option::Option<extern "C" fn(callback_data: *mut ::libc::c_void,
                                        reason: uint32_t, param1: uint32_t,
                                        param2: uint32_t) -> ()>;
pub type Enum_CEC_AllDevices = ::libc::c_uint;
pub const CEC_AllDevices_eTV: ::libc::c_uint = 0;
pub const CEC_AllDevices_eRec1: ::libc::c_uint = 1;
pub const CEC_AllDevices_eRec2: ::libc::c_uint = 2;
pub const CEC_AllDevices_eSTB1: ::libc::c_uint = 3;
pub const CEC_AllDevices_eDVD1: ::libc::c_uint = 4;
pub const CEC_AllDevices_eAudioSystem: ::libc::c_uint = 5;
pub const CEC_AllDevices_eSTB2: ::libc::c_uint = 6;
pub const CEC_AllDevices_eSTB3: ::libc::c_uint = 7;
pub const CEC_AllDevices_eDVD2: ::libc::c_uint = 8;
pub const CEC_AllDevices_eRec3: ::libc::c_uint = 9;
pub const CEC_AllDevices_eSTB4: ::libc::c_uint = 10;
pub const CEC_AllDevices_eDVD3: ::libc::c_uint = 11;
pub const CEC_AllDevices_eRsvd3: ::libc::c_uint = 12;
pub const CEC_AllDevices_eRsvd4: ::libc::c_uint = 13;
pub const CEC_AllDevices_eFreeUse: ::libc::c_uint = 14;
pub const CEC_AllDevices_eUnRegistered: ::libc::c_uint = 15;
pub type CEC_AllDevices_T = Enum_CEC_AllDevices;
pub type Enum_CEC_DeviceTypes = ::libc::c_uint;
pub const CEC_DeviceType_TV: ::libc::c_uint = 0;
pub const CEC_DeviceType_Rec: ::libc::c_uint = 1;
pub const CEC_DeviceType_Reserved: ::libc::c_uint = 2;
pub const CEC_DeviceType_Tuner: ::libc::c_uint = 3;
pub const CEC_DeviceType_Playback: ::libc::c_uint = 4;
pub const CEC_DeviceType_Audio: ::libc::c_uint = 5;
pub const CEC_DeviceType_Switch: ::libc::c_uint = 6;
pub const CEC_DeviceType_VidProc: ::libc::c_uint = 7;
pub const CEC_DeviceType_Invalid: ::libc::c_uint = 15;
pub type CEC_DEVICE_TYPE_T = Enum_CEC_DeviceTypes;
pub type Enum_Unnamed188 = ::libc::c_uint;
pub const CEC_Opcode_FeatureAbort: ::libc::c_uint = 0;
pub const CEC_Opcode_ImageViewOn: ::libc::c_uint = 4;
pub const CEC_Opcode_TunerStepIncrement: ::libc::c_uint = 5;
pub const CEC_Opcode_TunerStepDecrement: ::libc::c_uint = 6;
pub const CEC_Opcode_TunerDeviceStatus: ::libc::c_uint = 7;
pub const CEC_Opcode_GiveTunerDeviceStatus: ::libc::c_uint = 8;
pub const CEC_Opcode_RecordOn: ::libc::c_uint = 9;
pub const CEC_Opcode_RecordStatus: ::libc::c_uint = 10;
pub const CEC_Opcode_RecordOff: ::libc::c_uint = 11;
pub const CEC_Opcode_TextViewOn: ::libc::c_uint = 13;
pub const CEC_Opcode_RecordTVScreen: ::libc::c_uint = 15;
pub const CEC_Opcode_GiveDeckStatus: ::libc::c_uint = 26;
pub const CEC_Opcode_DeckStatus: ::libc::c_uint = 27;
pub const CEC_Opcode_SetMenuLanguage: ::libc::c_uint = 50;
pub const CEC_Opcode_ClearAnalogTimer: ::libc::c_uint = 51;
pub const CEC_Opcode_SetAnalogTimer: ::libc::c_uint = 52;
pub const CEC_Opcode_TimerStatus: ::libc::c_uint = 53;
pub const CEC_Opcode_Standby: ::libc::c_uint = 54;
pub const CEC_Opcode_Play: ::libc::c_uint = 65;
pub const CEC_Opcode_DeckControl: ::libc::c_uint = 66;
pub const CEC_Opcode_TimerClearedStatus: ::libc::c_uint = 67;
pub const CEC_Opcode_UserControlPressed: ::libc::c_uint = 68;
pub const CEC_Opcode_UserControlReleased: ::libc::c_uint = 69;
pub const CEC_Opcode_GiveOSDName: ::libc::c_uint = 70;
pub const CEC_Opcode_SetOSDName: ::libc::c_uint = 71;
pub const CEC_Opcode_SetOSDString: ::libc::c_uint = 100;
pub const CEC_Opcode_SetTimerProgramTitle: ::libc::c_uint = 103;
pub const CEC_Opcode_SystemAudioModeRequest: ::libc::c_uint = 112;
pub const CEC_Opcode_GiveAudioStatus: ::libc::c_uint = 113;
pub const CEC_Opcode_SetSystemAudioMode: ::libc::c_uint = 114;
pub const CEC_Opcode_ReportAudioStatus: ::libc::c_uint = 122;
pub const CEC_Opcode_GiveSystemAudioModeStatus: ::libc::c_uint = 125;
pub const CEC_Opcode_SystemAudioModeStatus: ::libc::c_uint = 126;
pub const CEC_Opcode_RoutingChange: ::libc::c_uint = 128;
pub const CEC_Opcode_RoutingInformation: ::libc::c_uint = 129;
pub const CEC_Opcode_ActiveSource: ::libc::c_uint = 130;
pub const CEC_Opcode_GivePhysicalAddress: ::libc::c_uint = 131;
pub const CEC_Opcode_ReportPhysicalAddress: ::libc::c_uint = 132;
pub const CEC_Opcode_RequestActiveSource: ::libc::c_uint = 133;
pub const CEC_Opcode_SetStreamPath: ::libc::c_uint = 134;
pub const CEC_Opcode_DeviceVendorID: ::libc::c_uint = 135;
pub const CEC_Opcode_VendorCommand: ::libc::c_uint = 137;
pub const CEC_Opcode_VendorRemoteButtonDown: ::libc::c_uint = 138;
pub const CEC_Opcode_VendorRemoteButtonUp: ::libc::c_uint = 139;
pub const CEC_Opcode_GiveDeviceVendorID: ::libc::c_uint = 140;
pub const CEC_Opcode_MenuRequest: ::libc::c_uint = 141;
pub const CEC_Opcode_MenuStatus: ::libc::c_uint = 142;
pub const CEC_Opcode_GiveDevicePowerStatus: ::libc::c_uint = 143;
pub const CEC_Opcode_ReportPowerStatus: ::libc::c_uint = 144;
pub const CEC_Opcode_GetMenuLanguage: ::libc::c_uint = 145;
pub const CEC_Opcode_SelectAnalogService: ::libc::c_uint = 146;
pub const CEC_Opcode_SelectDigitalService: ::libc::c_uint = 147;
pub const CEC_Opcode_SetDigitalTimer: ::libc::c_uint = 151;
pub const CEC_Opcode_ClearDigitalTimer: ::libc::c_uint = 153;
pub const CEC_Opcode_SetAudioRate: ::libc::c_uint = 154;
pub const CEC_Opcode_InactiveSource: ::libc::c_uint = 157;
pub const CEC_Opcode_CECVersion: ::libc::c_uint = 158;
pub const CEC_Opcode_GetCECVersion: ::libc::c_uint = 159;
pub const CEC_Opcode_VendorCommandWithID: ::libc::c_uint = 160;
pub const CEC_Opcode_ClearExternalTimer: ::libc::c_uint = 161;
pub const CEC_Opcode_SetExternalTimer: ::libc::c_uint = 162;
pub const CEC_Opcode_ReportShortAudioDescriptor: ::libc::c_uint = 163;
pub const CEC_Opcode_RequestShortAudioDescriptor: ::libc::c_uint = 164;
pub const CEC_Opcode_InitARC: ::libc::c_uint = 192;
pub const CEC_Opcode_ReportARCInited: ::libc::c_uint = 193;
pub const CEC_Opcode_ReportARCTerminated: ::libc::c_uint = 194;
pub const CEC_Opcode_RequestARCInit: ::libc::c_uint = 195;
pub const CEC_Opcode_RequestARCTermination: ::libc::c_uint = 196;
pub const CEC_Opcode_TerminateARC: ::libc::c_uint = 197;
pub const CEC_Opcode_CDC: ::libc::c_uint = 248;
pub const CEC_Opcode_Abort: ::libc::c_uint = 255;
pub type CEC_OPCODE_T = Enum_Unnamed188;
pub type Enum_Unnamed189 = ::libc::c_uint;
pub const CEC_Abort_Reason_Unrecognised_Opcode: ::libc::c_uint = 0;
pub const CEC_Abort_Reason_Wrong_Mode: ::libc::c_uint = 1;
pub const CEC_Abort_Reason_Cannot_Provide_Source: ::libc::c_uint = 2;
pub const CEC_Abort_Reason_Invalid_Operand: ::libc::c_uint = 3;
pub const CEC_Abort_Reason_Refused: ::libc::c_uint = 4;
pub const CEC_Abort_Reason_Undetermined: ::libc::c_uint = 5;
pub type CEC_ABORT_REASON_T = Enum_Unnamed189;
pub type Enum_Unnamed190 = ::libc::c_uint;
pub const CEC_DISPLAY_CONTROL_DEFAULT_TIME: ::libc::c_uint = 0;
pub const CEC_DISPLAY_CONTROL_UNTIL_CLEARED: ::libc::c_uint = 64;
pub const CEC_DISPLAY_CONTROL_CLEAR_PREV_MSG: ::libc::c_uint = 128;
pub type CEC_DISPLAY_CONTROL_T = Enum_Unnamed190;
pub type Enum_Unnamed191 = ::libc::c_uint;
pub const CEC_POWER_STATUS_ON: ::libc::c_uint = 0;
pub const CEC_POWER_STATUS_STANDBY: ::libc::c_uint = 1;
pub const CEC_POWER_STATUS_ON_PENDING: ::libc::c_uint = 2;
pub const CEC_POWER_STATUS_STANDBY_PENDING: ::libc::c_uint = 3;
pub type CEC_POWER_STATUS_T = Enum_Unnamed191;
pub type Enum_Unnamed192 = ::libc::c_uint;
pub const CEC_MENU_STATE_ACTIVATED: ::libc::c_uint = 0;
pub const CEC_MENU_STATE_DEACTIVATED: ::libc::c_uint = 1;
pub const CEC_MENU_STATE_QUERY: ::libc::c_uint = 2;
pub type CEC_MENU_STATE_T = Enum_Unnamed192;
pub type Enum_Unnamed193 = ::libc::c_uint;
pub const CEC_DECK_INFO_PLAY: ::libc::c_uint = 17;
pub const CEC_DECK_INFO_RECORD: ::libc::c_uint = 18;
pub const CEC_DECK_INFO_PLAY_REVERSE: ::libc::c_uint = 19;
pub const CEC_DECK_INFO_STILL: ::libc::c_uint = 20;
pub const CEC_DECK_INFO_SLOW: ::libc::c_uint = 21;
pub const CEC_DECK_INFO_SLOW_REVERSE: ::libc::c_uint = 22;
pub const CEC_DECK_INFO_SEARCH_FORWARD: ::libc::c_uint = 23;
pub const CEC_DECK_INFO_SEARCH_REVERSE: ::libc::c_uint = 24;
pub const CEC_DECK_INFO_NO_MEDIA: ::libc::c_uint = 25;
pub const CEC_DECK_INFO_STOP: ::libc::c_uint = 26;
pub const CEC_DECK_INFO_WIND: ::libc::c_uint = 27;
pub const CEC_DECK_INFO_REWIND: ::libc::c_uint = 28;
pub const CEC_DECK_IDX_SEARCH_FORWARD: ::libc::c_uint = 29;
pub const CEC_DECK_IDX_SEARCH_REVERSE: ::libc::c_uint = 30;
pub const CEC_DECK_OTHER_STATUS: ::libc::c_uint = 31;
pub type CEC_DECK_INFO_T = Enum_Unnamed193;
pub type Enum_Unnamed194 = ::libc::c_uint;
pub const CEC_DECK_CTRL_FORWARD: ::libc::c_uint = 1;
pub const CEC_DECK_CTRL_BACKWARD: ::libc::c_uint = 2;
pub const CEC_DECK_CTRL_STOP: ::libc::c_uint = 3;
pub const CEC_DECK_CTRL_EJECT: ::libc::c_uint = 4;
pub type CEC_DECK_CTRL_MODE_T = Enum_Unnamed194;
pub type Enum_Unnamed195 = ::libc::c_uint;
pub const CEC_PLAY_FORWARD: ::libc::c_uint = 36;
pub const CEC_PLAY_REVERSE: ::libc::c_uint = 32;
pub const CEC_PLAY_STILL: ::libc::c_uint = 37;
pub const CEC_PLAY_SCAN_FORWARD_MIN_SPEED: ::libc::c_uint = 5;
pub const CEC_PLAY_SCAN_FORWARD_MED_SPEED: ::libc::c_uint = 6;
pub const CEC_PLAY_SCAN_FORWARD_MAX_SPEED: ::libc::c_uint = 7;
pub const CEC_PLAY_SCAN_REVERSE_MIN_SPEED: ::libc::c_uint = 9;
pub const CEC_PLAY_SCAN_REVERSE_MED_SPEED: ::libc::c_uint = 10;
pub const CEC_PLAY_SCAN_REVERSE_MAX_SPEED: ::libc::c_uint = 11;
pub const CEC_PLAY_SLOW_FORWARD_MIN_SPEED: ::libc::c_uint = 21;
pub const CEC_PLAY_SLOW_FORWARD_MED_SPEED: ::libc::c_uint = 22;
pub const CEC_PLAY_SLOW_FORWARD_MAX_SPEED: ::libc::c_uint = 23;
pub const CEC_PLAY_SLOW_REVERSE_MIN_SPEED: ::libc::c_uint = 25;
pub const CEC_PLAY_SLOW_REVERSE_MED_SPEED: ::libc::c_uint = 26;
pub const CEC_PLAY_SLOW_REVERSE_MAX_SPEED: ::libc::c_uint = 27;
pub type CEC_PLAY_MODE_T = Enum_Unnamed195;
pub type Enum_Unnamed196 = ::libc::c_uint;
pub const CEC_DECK_STATUS_ON: ::libc::c_uint = 1;
pub const CEC_DECK_STATUS_OFF: ::libc::c_uint = 2;
pub const CEC_DECK_STATUS_ONCE: ::libc::c_uint = 3;
pub type CEC_DECK_STATUS_REQUEST_T = Enum_Unnamed196;
pub type Enum_Unnamed197 = ::libc::c_uint;
pub const CEC_User_Control_Select: ::libc::c_uint = 0;
pub const CEC_User_Control_Up: ::libc::c_uint = 1;
pub const CEC_User_Control_Down: ::libc::c_uint = 2;
pub const CEC_User_Control_Left: ::libc::c_uint = 3;
pub const CEC_User_Control_Right: ::libc::c_uint = 4;
pub const CEC_User_Control_RightUp: ::libc::c_uint = 5;
pub const CEC_User_Control_RightDown: ::libc::c_uint = 6;
pub const CEC_User_Control_LeftUp: ::libc::c_uint = 7;
pub const CEC_User_Control_LeftDown: ::libc::c_uint = 8;
pub const CEC_User_Control_RootMenu: ::libc::c_uint = 9;
pub const CEC_User_Control_SetupMenu: ::libc::c_uint = 10;
pub const CEC_User_Control_ContentsMenu: ::libc::c_uint = 11;
pub const CEC_User_Control_FavoriteMenu: ::libc::c_uint = 12;
pub const CEC_User_Control_Exit: ::libc::c_uint = 13;
pub const CEC_User_Control_Number0: ::libc::c_uint = 32;
pub const CEC_User_Control_Number1: ::libc::c_uint = 33;
pub const CEC_User_Control_Number2: ::libc::c_uint = 34;
pub const CEC_User_Control_Number3: ::libc::c_uint = 35;
pub const CEC_User_Control_Number4: ::libc::c_uint = 36;
pub const CEC_User_Control_Number5: ::libc::c_uint = 37;
pub const CEC_User_Control_Number6: ::libc::c_uint = 38;
pub const CEC_User_Control_Number7: ::libc::c_uint = 39;
pub const CEC_User_Control_Number8: ::libc::c_uint = 40;
pub const CEC_User_Control_Number9: ::libc::c_uint = 41;
pub const CEC_User_Control_Dot: ::libc::c_uint = 42;
pub const CEC_User_Control_Enter: ::libc::c_uint = 43;
pub const CEC_User_Control_Clear: ::libc::c_uint = 44;
pub const CEC_User_Control_ChannelUp: ::libc::c_uint = 48;
pub const CEC_User_Control_ChannelDown: ::libc::c_uint = 49;
pub const CEC_User_Control_PreviousChannel: ::libc::c_uint = 50;
pub const CEC_User_Control_SoundSelect: ::libc::c_uint = 51;
pub const CEC_User_Control_InputSelect: ::libc::c_uint = 52;
pub const CEC_User_Control_DisplayInformation: ::libc::c_uint = 53;
pub const CEC_User_Control_Help: ::libc::c_uint = 54;
pub const CEC_User_Control_PageUp: ::libc::c_uint = 55;
pub const CEC_User_Control_PageDown: ::libc::c_uint = 56;
pub const CEC_User_Control_Power: ::libc::c_uint = 64;
pub const CEC_User_Control_VolumeUp: ::libc::c_uint = 65;
pub const CEC_User_Control_VolumeDown: ::libc::c_uint = 66;
pub const CEC_User_Control_Mute: ::libc::c_uint = 67;
pub const CEC_User_Control_Play: ::libc::c_uint = 68;
pub const CEC_User_Control_Stop: ::libc::c_uint = 69;
pub const CEC_User_Control_Pause: ::libc::c_uint = 70;
pub const CEC_User_Control_Record: ::libc::c_uint = 71;
pub const CEC_User_Control_Rewind: ::libc::c_uint = 72;
pub const CEC_User_Control_FastForward: ::libc::c_uint = 73;
pub const CEC_User_Control_Eject: ::libc::c_uint = 74;
pub const CEC_User_Control_Forward: ::libc::c_uint = 75;
pub const CEC_User_Control_Backward: ::libc::c_uint = 76;
pub const CEC_User_Control_Angle: ::libc::c_uint = 80;
pub const CEC_User_Control_Subpicture: ::libc::c_uint = 81;
pub const CEC_User_Control_VideoOnDemand: ::libc::c_uint = 82;
pub const CEC_User_Control_EPG: ::libc::c_uint = 83;
pub const CEC_User_Control_TimerProgramming: ::libc::c_uint = 84;
pub const CEC_User_Control_InitialConfig: ::libc::c_uint = 85;
pub const CEC_User_Control_PlayFunction: ::libc::c_uint = 96;
pub const CEC_User_Control_PausePlayFunction: ::libc::c_uint = 97;
pub const CEC_User_Control_RecordFunction: ::libc::c_uint = 98;
pub const CEC_User_Control_PauseRecordFunction: ::libc::c_uint = 99;
pub const CEC_User_Control_StopFunction: ::libc::c_uint = 100;
pub const CEC_User_Control_MuteFunction: ::libc::c_uint = 101;
pub const CEC_User_Control_RestoreVolumeFunction: ::libc::c_uint = 102;
pub const CEC_User_Control_TuneFunction: ::libc::c_uint = 103;
pub const CEC_User_Control_SelectDiskFunction: ::libc::c_uint = 104;
pub const CEC_User_Control_SelectAVInputFunction: ::libc::c_uint = 105;
pub const CEC_User_Control_SelectAudioInputFunction: ::libc::c_uint = 106;
pub const CEC_User_Control_F1Blue: ::libc::c_uint = 113;
pub const CEC_User_Control_F2Red: ::libc::c_uint = 114;
pub const CEC_User_Control_F3Green: ::libc::c_uint = 115;
pub const CEC_User_Control_F4Yellow: ::libc::c_uint = 116;
pub const CEC_User_Control_F5: ::libc::c_uint = 117;
pub type CEC_USER_CONTROL_T = Enum_Unnamed197;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed198 {
    pub active_mask: uint16_t,
    pub num_devices: uint16_t,
    pub device_attr: [uint32_t; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed198 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed198 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VC_CEC_TOPOLOGY_T = Struct_Unnamed198;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed199 {
    pub length: uint32_t,
    pub initiator: CEC_AllDevices_T,
    pub follower: CEC_AllDevices_T,
    pub payload: [uint8_t; 16usize],
}
impl ::std::clone::Clone for Struct_Unnamed199 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed199 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type VC_CEC_MESSAGE_T = Struct_Unnamed199;
pub type Enum_Unnamed200 = ::libc::c_uint;
pub const VC_CEC_NOTIFY_NONE: ::libc::c_uint = 0;
pub const VC_CEC_TX: ::libc::c_uint = 1;
pub const VC_CEC_RX: ::libc::c_uint = 2;
pub const VC_CEC_BUTTON_PRESSED: ::libc::c_uint = 4;
pub const VC_CEC_BUTTON_RELEASE: ::libc::c_uint = 8;
pub const VC_CEC_REMOTE_PRESSED: ::libc::c_uint = 16;
pub const VC_CEC_REMOTE_RELEASE: ::libc::c_uint = 32;
pub const VC_CEC_LOGICAL_ADDR: ::libc::c_uint = 64;
pub const VC_CEC_TOPOLOGY: ::libc::c_uint = 128;
pub const VC_CEC_LOGICAL_ADDR_LOST: ::libc::c_uint = 32768;
pub type VC_CEC_NOTIFY_T = Enum_Unnamed200;
pub type CEC_CALLBACK_T =
    ::std::option::Option<extern "C" fn(client_p: *mut ::libc::c_void,
                                        reason: uint32_t, param1: uint32_t,
                                        param2: uint32_t, param3: uint32_t,
                                        param4: uint32_t) -> ()>;
pub type Enum_Unnamed201 = ::libc::c_uint;
pub const VC_CEC_SUCCESS: ::libc::c_uint = 0;
pub const VC_CEC_ERROR_NO_ACK: ::libc::c_uint = 1;
pub const VC_CEC_ERROR_SHUTDOWN: ::libc::c_uint = 2;
pub const VC_CEC_ERROR_BUSY: ::libc::c_uint = 3;
pub const VC_CEC_ERROR_NO_LA: ::libc::c_uint = 4;
pub const VC_CEC_ERROR_NO_PA: ::libc::c_uint = 5;
pub const VC_CEC_ERROR_NO_TOPO: ::libc::c_uint = 6;
pub const VC_CEC_ERROR_INVALID_FOLLOWER: ::libc::c_uint = 7;
pub const VC_CEC_ERROR_INVALID_ARGUMENT: ::libc::c_uint = 8;
pub type VC_CEC_ERROR_T = Enum_Unnamed201;
pub type Enum_Unnamed202 = ::libc::c_uint;
pub const VC_CEC_REGISTER_CMD: ::libc::c_uint = 0;
pub const VC_CEC_REGISTER_ALL: ::libc::c_uint = 1;
pub const VC_CEC_DEREGISTER_CMD: ::libc::c_uint = 2;
pub const VC_CEC_DEREGISTER_ALL: ::libc::c_uint = 3;
pub const VC_CEC_SEND_MSG: ::libc::c_uint = 4;
pub const VC_CEC_GET_LOGICAL_ADDR: ::libc::c_uint = 5;
pub const VC_CEC_ALLOC_LOGICAL_ADDR: ::libc::c_uint = 6;
pub const VC_CEC_RELEASE_LOGICAL_ADDR: ::libc::c_uint = 7;
pub const VC_CEC_GET_TOPOLOGY: ::libc::c_uint = 8;
pub const VC_CEC_SET_VENDOR_ID: ::libc::c_uint = 9;
pub const VC_CEC_SET_OSD_NAME: ::libc::c_uint = 10;
pub const VC_CEC_GET_PHYSICAL_ADDR: ::libc::c_uint = 11;
pub const VC_CEC_GET_VENDOR_ID: ::libc::c_uint = 12;
pub const VC_CEC_POLL_ADDR: ::libc::c_uint = 13;
pub const VC_CEC_SET_LOGICAL_ADDR: ::libc::c_uint = 14;
pub const VC_CEC_ADD_DEVICE: ::libc::c_uint = 15;
pub const VC_CEC_SET_PASSIVE: ::libc::c_uint = 16;
pub const VC_CEC_END_OF_LIST: ::libc::c_uint = 17;
pub type VC_CEC_CMD_CODE_T = Enum_Unnamed202;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed203 {
    pub follower: uint32_t,
    pub length: uint32_t,
    pub payload: [uint8_t; 16usize],
    pub is_reply: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed203 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed203 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CEC_SEND_MSG_PARAM_T = Struct_Unnamed203;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed204 {
    pub logical_address: uint32_t,
    pub device_type: uint32_t,
    pub vendor_id: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed204 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed204 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CEC_SET_LOGICAL_ADDR_PARAM_T = Struct_Unnamed204;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed205 {
    pub logical_address: uint32_t,
    pub physical_address: uint32_t,
    pub device_type: uint32_t,
    pub last_device: uint32_t,
}
impl ::std::clone::Clone for Struct_Unnamed205 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed205 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type CEC_ADD_DEVICE_PARAM_T = Struct_Unnamed205;
pub type CECSERVICE_CALLBACK_T =
    ::std::option::Option<extern "C" fn(callback_data: *mut ::libc::c_void,
                                        reason: uint32_t, param1: uint32_t,
                                        param2: uint32_t, param3: uint32_t,
                                        param4: uint32_t) -> ()>;
#[link(name = "bcm_host")]
extern "C" {
    pub static mut __tzname: [*mut ::libc::c_uchar; 2usize];
    pub static mut __daylight: ::libc::c_int;
    pub static mut __timezone: ::libc::c_long;
    pub static mut tzname: [*mut ::libc::c_uchar; 2usize];
    pub static mut daylight: ::libc::c_int;
    pub static mut timezone: ::libc::c_long;
    pub static mut __environ: *mut *mut ::libc::c_uchar;
    pub static mut optarg: *mut ::libc::c_uchar;
    pub static mut optind: ::libc::c_int;
    pub static mut opterr: ::libc::c_int;
    pub static mut optopt: ::libc::c_int;
    pub static mut _sys_siglist: [*const ::libc::c_uchar; 65usize];
    pub static mut sys_siglist: [*const ::libc::c_uchar; 65usize];
    pub static mut vcos_use_android_log: ::libc::c_int;
    pub static mut _vcos_thread_current_key: pthread_key_t;
    pub static mut interface_execute_fn: *mut INTERFACE_EXECUTE_FN_T;
    pub static mut cechost_log_category: VCOS_LOG_CAT_T;
}
#[link(name = "bcm_host")]
extern "C" {
    pub fn bcm_host_init() -> ();
    pub fn bcm_host_deinit() -> ();
    pub fn graphics_get_display_size(display_number: uint16_t,
                                     width: *mut uint32_t,
                                     height: *mut uint32_t) -> int32_t;
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
    pub fn strtoimax(__nptr: *const ::libc::c_uchar,
                     __endptr: *mut *mut ::libc::c_uchar,
                     __base: ::libc::c_int) -> intmax_t;
    pub fn strtoumax(__nptr: *const ::libc::c_uchar,
                     __endptr: *mut *mut ::libc::c_uchar,
                     __base: ::libc::c_int) -> uintmax_t;
    pub fn wcstoimax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::libc::c_int)
     -> intmax_t;
    pub fn wcstoumax(__nptr: *const __gwchar_t,
                     __endptr: *mut *mut __gwchar_t, __base: ::libc::c_int)
     -> uintmax_t;
    pub fn vcos_pthreads_logging_assert(file: *const ::libc::c_uchar,
                                        func: *const ::libc::c_uchar,
                                        line: ::libc::c_uint,
                                        fmt: *const ::libc::c_uchar, ...)
     -> ();
    pub fn vcos_verify_bkpts_enabled() -> ::libc::c_int;
    pub fn vcos_verify_bkpts_enable(enable: ::libc::c_int) -> ::libc::c_int;
    pub fn vcos_abort() -> ();
    pub fn vcos_backtrace_self() -> ();
    pub fn __sched_cpucount(__setsize: size_t, __setp: *const cpu_set_t)
     -> ::libc::c_int;
    pub fn __sched_cpualloc(__count: size_t) -> *mut cpu_set_t;
    pub fn __sched_cpufree(__set: *mut cpu_set_t) -> ();
    pub fn sched_setparam(__pid: __pid_t, __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn sched_getparam(__pid: __pid_t, __param: *mut Struct_sched_param)
     -> ::libc::c_int;
    pub fn sched_setscheduler(__pid: __pid_t, __policy: ::libc::c_int,
                              __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn sched_getscheduler(__pid: __pid_t) -> ::libc::c_int;
    pub fn sched_yield() -> ::libc::c_int;
    pub fn sched_get_priority_max(__algorithm: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sched_get_priority_min(__algorithm: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sched_rr_get_interval(__pid: __pid_t, __t: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock() -> clock_t;
    pub fn time(__timer: *mut time_t) -> time_t;
    pub fn difftime(__time1: time_t, __time0: time_t) -> ::libc::c_double;
    pub fn mktime(__tp: *mut Struct_tm) -> time_t;
    pub fn strftime(__s: *mut ::libc::c_uchar, __maxsize: size_t,
                    __format: *const ::libc::c_uchar, __tp: *const Struct_tm)
     -> size_t;
    pub fn strftime_l(__s: *mut ::libc::c_uchar, __maxsize: size_t,
                      __format: *const ::libc::c_uchar,
                      __tp: *const Struct_tm, __loc: __locale_t) -> size_t;
    pub fn gmtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn localtime(__timer: *const time_t) -> *mut Struct_tm;
    pub fn gmtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn localtime_r(__timer: *const time_t, __tp: *mut Struct_tm)
     -> *mut Struct_tm;
    pub fn asctime(__tp: *const Struct_tm) -> *mut ::libc::c_uchar;
    pub fn ctime(__timer: *const time_t) -> *mut ::libc::c_uchar;
    pub fn asctime_r(__tp: *const Struct_tm, __buf: *mut ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn ctime_r(__timer: *const time_t, __buf: *mut ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn tzset() -> ();
    pub fn stime(__when: *const time_t) -> ::libc::c_int;
    pub fn timegm(__tp: *mut Struct_tm) -> time_t;
    pub fn timelocal(__tp: *mut Struct_tm) -> time_t;
    pub fn dysize(__year: ::libc::c_int) -> ::libc::c_int;
    pub fn nanosleep(__requested_time: *const Struct_timespec,
                     __remaining: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getres(__clock_id: clockid_t, __res: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_gettime(__clock_id: clockid_t, __tp: *mut Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_settime(__clock_id: clockid_t, __tp: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn clock_nanosleep(__clock_id: clockid_t, __flags: ::libc::c_int,
                           __req: *const Struct_timespec,
                           __rem: *mut Struct_timespec) -> ::libc::c_int;
    pub fn clock_getcpuclockid(__pid: pid_t, __clock_id: *mut clockid_t)
     -> ::libc::c_int;
    pub fn timer_create(__clock_id: clockid_t, __evp: *mut Struct_sigevent,
                        __timerid: *mut timer_t) -> ::libc::c_int;
    pub fn timer_delete(__timerid: timer_t) -> ::libc::c_int;
    pub fn timer_settime(__timerid: timer_t, __flags: ::libc::c_int,
                         __value: *const Struct_itimerspec,
                         __ovalue: *mut Struct_itimerspec) -> ::libc::c_int;
    pub fn timer_gettime(__timerid: timer_t, __value: *mut Struct_itimerspec)
     -> ::libc::c_int;
    pub fn timer_getoverrun(__timerid: timer_t) -> ::libc::c_int;
    pub fn pthread_create(__newthread: *mut pthread_t,
                          __attr: *const pthread_attr_t,
                          __start_routine:
                              ::std::option::Option<extern "C" fn(arg1:
                                                                      *mut ::libc::c_void)
                                                        ->
                                                            *mut ::libc::c_void>,
                          __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn pthread_exit(__retval: *mut ::libc::c_void) -> ();
    pub fn pthread_join(__th: pthread_t,
                        __thread_return: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_detach(__th: pthread_t) -> ::libc::c_int;
    pub fn pthread_self() -> pthread_t;
    pub fn pthread_equal(__thread1: pthread_t, __thread2: pthread_t)
     -> ::libc::c_int;
    pub fn pthread_attr_init(__attr: *mut pthread_attr_t) -> ::libc::c_int;
    pub fn pthread_attr_destroy(__attr: *mut pthread_attr_t) -> ::libc::c_int;
    pub fn pthread_attr_getdetachstate(__attr: *const pthread_attr_t,
                                       __detachstate: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_setdetachstate(__attr: *mut pthread_attr_t,
                                       __detachstate: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getguardsize(__attr: *const pthread_attr_t,
                                     __guardsize: *mut size_t)
     -> ::libc::c_int;
    pub fn pthread_attr_setguardsize(__attr: *mut pthread_attr_t,
                                     __guardsize: size_t) -> ::libc::c_int;
    pub fn pthread_attr_getschedparam(__attr: *const pthread_attr_t,
                                      __param: *mut Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_attr_setschedparam(__attr: *mut pthread_attr_t,
                                      __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_attr_getschedpolicy(__attr: *const pthread_attr_t,
                                       __policy: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_setschedpolicy(__attr: *mut pthread_attr_t,
                                       __policy: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getinheritsched(__attr: *const pthread_attr_t,
                                        __inherit: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_setinheritsched(__attr: *mut pthread_attr_t,
                                        __inherit: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_getscope(__attr: *const pthread_attr_t,
                                 __scope: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_attr_setscope(__attr: *mut pthread_attr_t,
                                 __scope: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_attr_getstackaddr(__attr: *const pthread_attr_t,
                                     __stackaddr: *mut *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_attr_setstackaddr(__attr: *mut pthread_attr_t,
                                     __stackaddr: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_attr_getstacksize(__attr: *const pthread_attr_t,
                                     __stacksize: *mut size_t)
     -> ::libc::c_int;
    pub fn pthread_attr_setstacksize(__attr: *mut pthread_attr_t,
                                     __stacksize: size_t) -> ::libc::c_int;
    pub fn pthread_attr_getstack(__attr: *const pthread_attr_t,
                                 __stackaddr: *mut *mut ::libc::c_void,
                                 __stacksize: *mut size_t) -> ::libc::c_int;
    pub fn pthread_attr_setstack(__attr: *mut pthread_attr_t,
                                 __stackaddr: *mut ::libc::c_void,
                                 __stacksize: size_t) -> ::libc::c_int;
    pub fn pthread_setschedparam(__target_thread: pthread_t,
                                 __policy: ::libc::c_int,
                                 __param: *const Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_getschedparam(__target_thread: pthread_t,
                                 __policy: *mut ::libc::c_int,
                                 __param: *mut Struct_sched_param)
     -> ::libc::c_int;
    pub fn pthread_setschedprio(__target_thread: pthread_t,
                                __prio: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_once(__once_control: *mut pthread_once_t,
                        __init_routine:
                            ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn pthread_setcancelstate(__state: ::libc::c_int,
                                  __oldstate: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_setcanceltype(__type: ::libc::c_int,
                                 __oldtype: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_cancel(__th: pthread_t) -> ::libc::c_int;
    pub fn pthread_testcancel() -> ();
    pub fn __pthread_register_cancel(__buf: *mut __pthread_unwind_buf_t)
     -> ();
    pub fn __pthread_unregister_cancel(__buf: *mut __pthread_unwind_buf_t)
     -> ();
    pub fn __pthread_unwind_next(__buf: *mut __pthread_unwind_buf_t) -> ();
    pub fn __sigsetjmp(__env: *mut Struct___jmp_buf_tag,
                       __savemask: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_mutex_init(__mutex: *mut pthread_mutex_t,
                              __mutexattr: *const pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_destroy(__mutex: *mut pthread_mutex_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_trylock(__mutex: *mut pthread_mutex_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_lock(__mutex: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_mutex_timedlock(__mutex: *mut pthread_mutex_t,
                                   __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_mutex_unlock(__mutex: *mut pthread_mutex_t)
     -> ::libc::c_int;
    pub fn pthread_mutex_getprioceiling(__mutex: *const pthread_mutex_t,
                                        __prioceiling: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutex_setprioceiling(__mutex: *mut pthread_mutex_t,
                                        __prioceiling: ::libc::c_int,
                                        __old_ceiling: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutex_consistent(__mutex: *mut pthread_mutex_t)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_init(__attr: *mut pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_destroy(__attr: *mut pthread_mutexattr_t)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getpshared(__attr: *const pthread_mutexattr_t,
                                        __pshared: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setpshared(__attr: *mut pthread_mutexattr_t,
                                        __pshared: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_gettype(__attr: *const pthread_mutexattr_t,
                                     __kind: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_settype(__attr: *mut pthread_mutexattr_t,
                                     __kind: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_mutexattr_getprotocol(__attr: *const pthread_mutexattr_t,
                                         __protocol: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setprotocol(__attr: *mut pthread_mutexattr_t,
                                         __protocol: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getprioceiling(__attr:
                                                *const pthread_mutexattr_t,
                                            __prioceiling: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setprioceiling(__attr: *mut pthread_mutexattr_t,
                                            __prioceiling: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_getrobust(__attr: *const pthread_mutexattr_t,
                                       __robustness: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_mutexattr_setrobust(__attr: *mut pthread_mutexattr_t,
                                       __robustness: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlock_init(__rwlock: *mut pthread_rwlock_t,
                               __attr: *const pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_destroy(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_rdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_tryrdlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_timedrdlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_rwlock_wrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_trywrlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlock_timedwrlock(__rwlock: *mut pthread_rwlock_t,
                                      __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_rwlock_unlock(__rwlock: *mut pthread_rwlock_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_init(__attr: *mut pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_destroy(__attr: *mut pthread_rwlockattr_t)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_getpshared(__attr: *const pthread_rwlockattr_t,
                                         __pshared: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_setpshared(__attr: *mut pthread_rwlockattr_t,
                                         __pshared: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_getkind_np(__attr: *const pthread_rwlockattr_t,
                                         __pref: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_rwlockattr_setkind_np(__attr: *mut pthread_rwlockattr_t,
                                         __pref: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_cond_init(__cond: *mut pthread_cond_t,
                             __cond_attr: *const pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_cond_destroy(__cond: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_signal(__cond: *mut pthread_cond_t) -> ::libc::c_int;
    pub fn pthread_cond_broadcast(__cond: *mut pthread_cond_t)
     -> ::libc::c_int;
    pub fn pthread_cond_wait(__cond: *mut pthread_cond_t,
                             __mutex: *mut pthread_mutex_t) -> ::libc::c_int;
    pub fn pthread_cond_timedwait(__cond: *mut pthread_cond_t,
                                  __mutex: *mut pthread_mutex_t,
                                  __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn pthread_condattr_init(__attr: *mut pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_condattr_destroy(__attr: *mut pthread_condattr_t)
     -> ::libc::c_int;
    pub fn pthread_condattr_getpshared(__attr: *const pthread_condattr_t,
                                       __pshared: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_condattr_setpshared(__attr: *mut pthread_condattr_t,
                                       __pshared: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_condattr_getclock(__attr: *const pthread_condattr_t,
                                     __clock_id: *mut __clockid_t)
     -> ::libc::c_int;
    pub fn pthread_condattr_setclock(__attr: *mut pthread_condattr_t,
                                     __clock_id: __clockid_t)
     -> ::libc::c_int;
    pub fn pthread_spin_init(__lock: *mut pthread_spinlock_t,
                             __pshared: ::libc::c_int) -> ::libc::c_int;
    pub fn pthread_spin_destroy(__lock: *mut pthread_spinlock_t)
     -> ::libc::c_int;
    pub fn pthread_spin_lock(__lock: *mut pthread_spinlock_t)
     -> ::libc::c_int;
    pub fn pthread_spin_trylock(__lock: *mut pthread_spinlock_t)
     -> ::libc::c_int;
    pub fn pthread_spin_unlock(__lock: *mut pthread_spinlock_t)
     -> ::libc::c_int;
    pub fn pthread_barrier_init(__barrier: *mut pthread_barrier_t,
                                __attr: *const pthread_barrierattr_t,
                                __count: ::libc::c_uint) -> ::libc::c_int;
    pub fn pthread_barrier_destroy(__barrier: *mut pthread_barrier_t)
     -> ::libc::c_int;
    pub fn pthread_barrier_wait(__barrier: *mut pthread_barrier_t)
     -> ::libc::c_int;
    pub fn pthread_barrierattr_init(__attr: *mut pthread_barrierattr_t)
     -> ::libc::c_int;
    pub fn pthread_barrierattr_destroy(__attr: *mut pthread_barrierattr_t)
     -> ::libc::c_int;
    pub fn pthread_barrierattr_getpshared(__attr:
                                              *const pthread_barrierattr_t,
                                          __pshared: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_barrierattr_setpshared(__attr: *mut pthread_barrierattr_t,
                                          __pshared: ::libc::c_int)
     -> ::libc::c_int;
    pub fn pthread_key_create(__key: *mut pthread_key_t,
                              __destr_function:
                                  ::std::option::Option<extern "C" fn(arg1:
                                                                          *mut ::libc::c_void)
                                                            -> ()>)
     -> ::libc::c_int;
    pub fn pthread_key_delete(__key: pthread_key_t) -> ::libc::c_int;
    pub fn pthread_getspecific(__key: pthread_key_t) -> *mut ::libc::c_void;
    pub fn pthread_setspecific(__key: pthread_key_t,
                               __pointer: *const ::libc::c_void)
     -> ::libc::c_int;
    pub fn pthread_getcpuclockid(__thread_id: pthread_t,
                                 __clock_id: *mut __clockid_t)
     -> ::libc::c_int;
    pub fn pthread_atfork(__prepare:
                              ::std::option::Option<extern "C" fn() -> ()>,
                          __parent:
                              ::std::option::Option<extern "C" fn() -> ()>,
                          __child:
                              ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn select(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                  __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                  __timeout: *mut Struct_timeval) -> ::libc::c_int;
    pub fn pselect(__nfds: ::libc::c_int, __readfds: *mut fd_set,
                   __writefds: *mut fd_set, __exceptfds: *mut fd_set,
                   __timeout: *const Struct_timespec,
                   __sigmask: *const __sigset_t) -> ::libc::c_int;
    pub fn gnu_dev_major(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_minor(__dev: ::libc::c_ulonglong) -> ::libc::c_uint;
    pub fn gnu_dev_makedev(__major: ::libc::c_uint, __minor: ::libc::c_uint)
     -> ::libc::c_ulonglong;
    pub fn sem_init(__sem: *mut sem_t, __pshared: ::libc::c_int,
                    __value: ::libc::c_uint) -> ::libc::c_int;
    pub fn sem_destroy(__sem: *mut sem_t) -> ::libc::c_int;
    pub fn sem_open(__name: *const ::libc::c_uchar,
                    __oflag: ::libc::c_int, ...) -> *mut sem_t;
    pub fn sem_close(__sem: *mut sem_t) -> ::libc::c_int;
    pub fn sem_unlink(__name: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn sem_wait(__sem: *mut sem_t) -> ::libc::c_int;
    pub fn sem_timedwait(__sem: *mut sem_t, __abstime: *const Struct_timespec)
     -> ::libc::c_int;
    pub fn sem_trywait(__sem: *mut sem_t) -> ::libc::c_int;
    pub fn sem_post(__sem: *mut sem_t) -> ::libc::c_int;
    pub fn sem_getvalue(__sem: *mut sem_t, __sval: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn access(__name: *const ::libc::c_uchar, __type: ::libc::c_int)
     -> ::libc::c_int;
    pub fn faccessat(__fd: ::libc::c_int, __file: *const ::libc::c_uchar,
                     __type: ::libc::c_int, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn lseek(__fd: ::libc::c_int, __offset: __off_t,
                 __whence: ::libc::c_int) -> __off_t;
    pub fn close(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn read(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                __nbytes: size_t) -> ssize_t;
    pub fn write(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                 __n: size_t) -> ssize_t;
    pub fn pread(__fd: ::libc::c_int, __buf: *mut ::libc::c_void,
                 __nbytes: size_t, __offset: __off_t) -> ssize_t;
    pub fn pwrite(__fd: ::libc::c_int, __buf: *const ::libc::c_void,
                  __n: size_t, __offset: __off_t) -> ssize_t;
    pub fn pipe(__pipedes: *mut ::libc::c_int) -> ::libc::c_int;
    pub fn alarm(__seconds: ::libc::c_uint) -> ::libc::c_uint;
    pub fn sleep(__seconds: ::libc::c_uint) -> ::libc::c_uint;
    pub fn ualarm(__value: __useconds_t, __interval: __useconds_t)
     -> __useconds_t;
    pub fn usleep(__useconds: __useconds_t) -> ::libc::c_int;
    pub fn pause() -> ::libc::c_int;
    pub fn chown(__file: *const ::libc::c_uchar, __owner: __uid_t,
                 __group: __gid_t) -> ::libc::c_int;
    pub fn fchown(__fd: ::libc::c_int, __owner: __uid_t, __group: __gid_t)
     -> ::libc::c_int;
    pub fn lchown(__file: *const ::libc::c_uchar, __owner: __uid_t,
                  __group: __gid_t) -> ::libc::c_int;
    pub fn fchownat(__fd: ::libc::c_int, __file: *const ::libc::c_uchar,
                    __owner: __uid_t, __group: __gid_t, __flag: ::libc::c_int)
     -> ::libc::c_int;
    pub fn chdir(__path: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn fchdir(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn getcwd(__buf: *mut ::libc::c_uchar, __size: size_t)
     -> *mut ::libc::c_uchar;
    pub fn getwd(__buf: *mut ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn dup(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn dup2(__fd: ::libc::c_int, __fd2: ::libc::c_int) -> ::libc::c_int;
    pub fn execve(__path: *const ::libc::c_uchar,
                  __argv: *const *mut ::libc::c_uchar,
                  __envp: *const *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn fexecve(__fd: ::libc::c_int, __argv: *const *mut ::libc::c_uchar,
                   __envp: *const *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn execv(__path: *const ::libc::c_uchar,
                 __argv: *const *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn execle(__path: *const ::libc::c_uchar,
                  __arg: *const ::libc::c_uchar, ...) -> ::libc::c_int;
    pub fn execl(__path: *const ::libc::c_uchar,
                 __arg: *const ::libc::c_uchar, ...) -> ::libc::c_int;
    pub fn execvp(__file: *const ::libc::c_uchar,
                  __argv: *const *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn execlp(__file: *const ::libc::c_uchar,
                  __arg: *const ::libc::c_uchar, ...) -> ::libc::c_int;
    pub fn nice(__inc: ::libc::c_int) -> ::libc::c_int;
    pub fn _exit(__status: ::libc::c_int) -> ();
    pub fn pathconf(__path: *const ::libc::c_uchar, __name: ::libc::c_int)
     -> ::libc::c_long;
    pub fn fpathconf(__fd: ::libc::c_int, __name: ::libc::c_int)
     -> ::libc::c_long;
    pub fn sysconf(__name: ::libc::c_int) -> ::libc::c_long;
    pub fn confstr(__name: ::libc::c_int, __buf: *mut ::libc::c_uchar,
                   __len: size_t) -> size_t;
    pub fn getpid() -> __pid_t;
    pub fn getppid() -> __pid_t;
    pub fn getpgrp() -> __pid_t;
    pub fn __getpgid(__pid: __pid_t) -> __pid_t;
    pub fn getpgid(__pid: __pid_t) -> __pid_t;
    pub fn setpgid(__pid: __pid_t, __pgid: __pid_t) -> ::libc::c_int;
    pub fn setpgrp() -> ::libc::c_int;
    pub fn setsid() -> __pid_t;
    pub fn getsid(__pid: __pid_t) -> __pid_t;
    pub fn getuid() -> __uid_t;
    pub fn geteuid() -> __uid_t;
    pub fn getgid() -> __gid_t;
    pub fn getegid() -> __gid_t;
    pub fn getgroups(__size: ::libc::c_int, __list: *mut __gid_t)
     -> ::libc::c_int;
    pub fn setuid(__uid: __uid_t) -> ::libc::c_int;
    pub fn setreuid(__ruid: __uid_t, __euid: __uid_t) -> ::libc::c_int;
    pub fn seteuid(__uid: __uid_t) -> ::libc::c_int;
    pub fn setgid(__gid: __gid_t) -> ::libc::c_int;
    pub fn setregid(__rgid: __gid_t, __egid: __gid_t) -> ::libc::c_int;
    pub fn setegid(__gid: __gid_t) -> ::libc::c_int;
    pub fn fork() -> __pid_t;
    pub fn vfork() -> __pid_t;
    pub fn ttyname(__fd: ::libc::c_int) -> *mut ::libc::c_uchar;
    pub fn ttyname_r(__fd: ::libc::c_int, __buf: *mut ::libc::c_uchar,
                     __buflen: size_t) -> ::libc::c_int;
    pub fn isatty(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn ttyslot() -> ::libc::c_int;
    pub fn link(__from: *const ::libc::c_uchar, __to: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn linkat(__fromfd: ::libc::c_int, __from: *const ::libc::c_uchar,
                  __tofd: ::libc::c_int, __to: *const ::libc::c_uchar,
                  __flags: ::libc::c_int) -> ::libc::c_int;
    pub fn symlink(__from: *const ::libc::c_uchar,
                   __to: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn readlink(__path: *const ::libc::c_uchar,
                    __buf: *mut ::libc::c_uchar, __len: size_t) -> ssize_t;
    pub fn symlinkat(__from: *const ::libc::c_uchar, __tofd: ::libc::c_int,
                     __to: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn readlinkat(__fd: ::libc::c_int, __path: *const ::libc::c_uchar,
                      __buf: *mut ::libc::c_uchar, __len: size_t) -> ssize_t;
    pub fn unlink(__name: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn unlinkat(__fd: ::libc::c_int, __name: *const ::libc::c_uchar,
                    __flag: ::libc::c_int) -> ::libc::c_int;
    pub fn rmdir(__path: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn tcgetpgrp(__fd: ::libc::c_int) -> __pid_t;
    pub fn tcsetpgrp(__fd: ::libc::c_int, __pgrp_id: __pid_t)
     -> ::libc::c_int;
    pub fn getlogin() -> *mut ::libc::c_uchar;
    pub fn getlogin_r(__name: *mut ::libc::c_uchar, __name_len: size_t)
     -> ::libc::c_int;
    pub fn setlogin(__name: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn getopt(___argc: ::libc::c_int,
                  ___argv: *const *mut ::libc::c_uchar,
                  __shortopts: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn gethostname(__name: *mut ::libc::c_uchar, __len: size_t)
     -> ::libc::c_int;
    pub fn sethostname(__name: *const ::libc::c_uchar, __len: size_t)
     -> ::libc::c_int;
    pub fn sethostid(__id: ::libc::c_long) -> ::libc::c_int;
    pub fn getdomainname(__name: *mut ::libc::c_uchar, __len: size_t)
     -> ::libc::c_int;
    pub fn setdomainname(__name: *const ::libc::c_uchar, __len: size_t)
     -> ::libc::c_int;
    pub fn vhangup() -> ::libc::c_int;
    pub fn revoke(__file: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn profil(__sample_buffer: *mut ::libc::c_ushort, __size: size_t,
                  __offset: size_t, __scale: ::libc::c_uint) -> ::libc::c_int;
    pub fn acct(__name: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn getusershell() -> *mut ::libc::c_uchar;
    pub fn endusershell() -> ();
    pub fn setusershell() -> ();
    pub fn daemon(__nochdir: ::libc::c_int, __noclose: ::libc::c_int)
     -> ::libc::c_int;
    pub fn chroot(__path: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn getpass(__prompt: *const ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn fsync(__fd: ::libc::c_int) -> ::libc::c_int;
    pub fn gethostid() -> ::libc::c_long;
    pub fn sync() -> ();
    pub fn getpagesize() -> ::libc::c_int;
    pub fn getdtablesize() -> ::libc::c_int;
    pub fn truncate(__file: *const ::libc::c_uchar, __length: __off_t)
     -> ::libc::c_int;
    pub fn ftruncate(__fd: ::libc::c_int, __length: __off_t) -> ::libc::c_int;
    pub fn brk(__addr: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn sbrk(__delta: intptr_t) -> *mut ::libc::c_void;
    pub fn syscall(__sysno: ::libc::c_long, ...) -> ::libc::c_long;
    pub fn lockf(__fd: ::libc::c_int, __cmd: ::libc::c_int, __len: __off_t)
     -> ::libc::c_int;
    pub fn fdatasync(__fildes: ::libc::c_int) -> ::libc::c_int;
    pub fn __errno_location() -> *mut ::libc::c_int;
    pub fn memcpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                  __n: size_t) -> *mut ::libc::c_void;
    pub fn memmove(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __n: size_t) -> *mut ::libc::c_void;
    pub fn memccpy(__dest: *mut ::libc::c_void, __src: *const ::libc::c_void,
                   __c: ::libc::c_int, __n: size_t) -> *mut ::libc::c_void;
    pub fn memset(__s: *mut ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn memcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                  __n: size_t) -> ::libc::c_int;
    pub fn memchr(__s: *const ::libc::c_void, __c: ::libc::c_int, __n: size_t)
     -> *mut ::libc::c_void;
    pub fn strcpy(__dest: *mut ::libc::c_uchar, __src: *const ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn strncpy(__dest: *mut ::libc::c_uchar,
                   __src: *const ::libc::c_uchar, __n: size_t)
     -> *mut ::libc::c_uchar;
    pub fn strcat(__dest: *mut ::libc::c_uchar, __src: *const ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn strncat(__dest: *mut ::libc::c_uchar,
                   __src: *const ::libc::c_uchar, __n: size_t)
     -> *mut ::libc::c_uchar;
    pub fn strcmp(__s1: *const ::libc::c_uchar, __s2: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn strncmp(__s1: *const ::libc::c_uchar, __s2: *const ::libc::c_uchar,
                   __n: size_t) -> ::libc::c_int;
    pub fn strcoll(__s1: *const ::libc::c_uchar, __s2: *const ::libc::c_uchar)
     -> ::libc::c_int;
    pub fn strxfrm(__dest: *mut ::libc::c_uchar,
                   __src: *const ::libc::c_uchar, __n: size_t) -> size_t;
    pub fn strcoll_l(__s1: *const ::libc::c_uchar,
                     __s2: *const ::libc::c_uchar, __l: __locale_t)
     -> ::libc::c_int;
    pub fn strxfrm_l(__dest: *mut ::libc::c_uchar,
                     __src: *const ::libc::c_uchar, __n: size_t,
                     __l: __locale_t) -> size_t;
    pub fn strdup(__s: *const ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn strndup(__string: *const ::libc::c_uchar, __n: size_t)
     -> *mut ::libc::c_uchar;
    pub fn strchr(__s: *const ::libc::c_uchar, __c: ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn strrchr(__s: *const ::libc::c_uchar, __c: ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn strcspn(__s: *const ::libc::c_uchar,
                   __reject: *const ::libc::c_uchar) -> size_t;
    pub fn strspn(__s: *const ::libc::c_uchar,
                  __accept: *const ::libc::c_uchar) -> size_t;
    pub fn strpbrk(__s: *const ::libc::c_uchar,
                   __accept: *const ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn strstr(__haystack: *const ::libc::c_uchar,
                  __needle: *const ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn strtok(__s: *mut ::libc::c_uchar, __delim: *const ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn __strtok_r(__s: *mut ::libc::c_uchar,
                      __delim: *const ::libc::c_uchar,
                      __save_ptr: *mut *mut ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn strtok_r(__s: *mut ::libc::c_uchar,
                    __delim: *const ::libc::c_uchar,
                    __save_ptr: *mut *mut ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn strlen(__s: *const ::libc::c_uchar) -> size_t;
    pub fn strnlen(__string: *const ::libc::c_uchar, __maxlen: size_t)
     -> size_t;
    pub fn strerror(__errnum: ::libc::c_int) -> *mut ::libc::c_uchar;
    pub fn strerror_r(__errnum: ::libc::c_int, __buf: *mut ::libc::c_uchar,
                      __buflen: size_t) -> ::libc::c_int;
    pub fn strerror_l(__errnum: ::libc::c_int, __l: __locale_t)
     -> *mut ::libc::c_uchar;
    pub fn __bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcopy(__src: *const ::libc::c_void, __dest: *mut ::libc::c_void,
                 __n: size_t) -> ();
    pub fn bzero(__s: *mut ::libc::c_void, __n: size_t) -> ();
    pub fn bcmp(__s1: *const ::libc::c_void, __s2: *const ::libc::c_void,
                __n: size_t) -> ::libc::c_int;
    pub fn index(__s: *const ::libc::c_uchar, __c: ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn rindex(__s: *const ::libc::c_uchar, __c: ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn ffs(__i: ::libc::c_int) -> ::libc::c_int;
    pub fn strcasecmp(__s1: *const ::libc::c_uchar,
                      __s2: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn strncasecmp(__s1: *const ::libc::c_uchar,
                       __s2: *const ::libc::c_uchar, __n: size_t)
     -> ::libc::c_int;
    pub fn strsep(__stringp: *mut *mut ::libc::c_uchar,
                  __delim: *const ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn strsignal(__sig: ::libc::c_int) -> *mut ::libc::c_uchar;
    pub fn __stpcpy(__dest: *mut ::libc::c_uchar,
                    __src: *const ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn stpcpy(__dest: *mut ::libc::c_uchar, __src: *const ::libc::c_uchar)
     -> *mut ::libc::c_uchar;
    pub fn __stpncpy(__dest: *mut ::libc::c_uchar,
                     __src: *const ::libc::c_uchar, __n: size_t)
     -> *mut ::libc::c_uchar;
    pub fn stpncpy(__dest: *mut ::libc::c_uchar,
                   __src: *const ::libc::c_uchar, __n: size_t)
     -> *mut ::libc::c_uchar;
    pub fn __sigismember(arg1: *const __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sigaddset(arg1: *mut __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sigdelset(arg1: *mut __sigset_t, arg2: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __sysv_signal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn signal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn kill(__pid: __pid_t, __sig: ::libc::c_int) -> ::libc::c_int;
    pub fn killpg(__pgrp: __pid_t, __sig: ::libc::c_int) -> ::libc::c_int;
    pub fn raise(__sig: ::libc::c_int) -> ::libc::c_int;
    pub fn ssignal(__sig: ::libc::c_int, __handler: __sighandler_t)
     -> __sighandler_t;
    pub fn gsignal(__sig: ::libc::c_int) -> ::libc::c_int;
    pub fn psignal(__sig: ::libc::c_int, __s: *const ::libc::c_uchar) -> ();
    pub fn psiginfo(__pinfo: *const siginfo_t, __s: *const ::libc::c_uchar)
     -> ();
    pub fn __sigpause(__sig_or_mask: ::libc::c_int, __is_sig: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigblock(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn sigsetmask(__mask: ::libc::c_int) -> ::libc::c_int;
    pub fn siggetmask() -> ::libc::c_int;
    pub fn sigemptyset(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigfillset(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigaddset(__set: *mut sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigdelset(__set: *mut sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigismember(__set: *const sigset_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigprocmask(__how: ::libc::c_int, __set: *const sigset_t,
                       __oset: *mut sigset_t) -> ::libc::c_int;
    pub fn sigsuspend(__set: *const sigset_t) -> ::libc::c_int;
    pub fn sigaction(__sig: ::libc::c_int, __act: *const Struct_sigaction,
                     __oact: *mut Struct_sigaction) -> ::libc::c_int;
    pub fn sigpending(__set: *mut sigset_t) -> ::libc::c_int;
    pub fn sigwait(__set: *const sigset_t, __sig: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigwaitinfo(__set: *const sigset_t, __info: *mut siginfo_t)
     -> ::libc::c_int;
    pub fn sigtimedwait(__set: *const sigset_t, __info: *mut siginfo_t,
                        __timeout: *const Struct_timespec) -> ::libc::c_int;
    pub fn sigqueue(__pid: __pid_t, __sig: ::libc::c_int, __val: Union_sigval)
     -> ::libc::c_int;
    pub fn sigvec(__sig: ::libc::c_int, __vec: *const Struct_sigvec,
                  __ovec: *mut Struct_sigvec) -> ::libc::c_int;
    pub fn sigreturn(__scp: *mut Struct_sigcontext) -> ::libc::c_int;
    pub fn siginterrupt(__sig: ::libc::c_int, __interrupt: ::libc::c_int)
     -> ::libc::c_int;
    pub fn sigstack(__ss: *mut Struct_sigstack, __oss: *mut Struct_sigstack)
     -> ::libc::c_int;
    pub fn sigaltstack(__ss: *const Struct_sigaltstack,
                       __oss: *mut Struct_sigaltstack) -> ::libc::c_int;
    pub fn pthread_sigmask(__how: ::libc::c_int, __newmask: *const __sigset_t,
                           __oldmask: *mut __sigset_t) -> ::libc::c_int;
    pub fn pthread_kill(__threadid: pthread_t, __signo: ::libc::c_int)
     -> ::libc::c_int;
    pub fn __libc_current_sigrtmin() -> ::libc::c_int;
    pub fn __libc_current_sigrtmax() -> ::libc::c_int;
    pub fn __ctype_get_mb_cur_max() -> size_t;
    pub fn atof(__nptr: *const ::libc::c_uchar) -> ::libc::c_double;
    pub fn atoi(__nptr: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn atol(__nptr: *const ::libc::c_uchar) -> ::libc::c_long;
    pub fn atoll(__nptr: *const ::libc::c_uchar) -> ::libc::c_longlong;
    pub fn strtod(__nptr: *const ::libc::c_uchar,
                  __endptr: *mut *mut ::libc::c_uchar) -> ::libc::c_double;
    pub fn strtof(__nptr: *const ::libc::c_uchar,
                  __endptr: *mut *mut ::libc::c_uchar) -> ::libc::c_float;
    pub fn strtold(__nptr: *const ::libc::c_uchar,
                   __endptr: *mut *mut ::libc::c_uchar) -> ::libc::c_double;
    pub fn strtol(__nptr: *const ::libc::c_uchar,
                  __endptr: *mut *mut ::libc::c_uchar, __base: ::libc::c_int)
     -> ::libc::c_long;
    pub fn strtoul(__nptr: *const ::libc::c_uchar,
                   __endptr: *mut *mut ::libc::c_uchar, __base: ::libc::c_int)
     -> ::libc::c_ulong;
    pub fn strtoq(__nptr: *const ::libc::c_uchar,
                  __endptr: *mut *mut ::libc::c_uchar, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtouq(__nptr: *const ::libc::c_uchar,
                   __endptr: *mut *mut ::libc::c_uchar, __base: ::libc::c_int)
     -> ::libc::c_ulonglong;
    pub fn strtoll(__nptr: *const ::libc::c_uchar,
                   __endptr: *mut *mut ::libc::c_uchar, __base: ::libc::c_int)
     -> ::libc::c_longlong;
    pub fn strtoull(__nptr: *const ::libc::c_uchar,
                    __endptr: *mut *mut ::libc::c_uchar,
                    __base: ::libc::c_int) -> ::libc::c_ulonglong;
    pub fn l64a(__n: ::libc::c_long) -> *mut ::libc::c_uchar;
    pub fn a64l(__s: *const ::libc::c_uchar) -> ::libc::c_long;
    pub fn random() -> ::libc::c_long;
    pub fn srandom(__seed: ::libc::c_uint) -> ();
    pub fn initstate(__seed: ::libc::c_uint, __statebuf: *mut ::libc::c_uchar,
                     __statelen: size_t) -> *mut ::libc::c_uchar;
    pub fn setstate(__statebuf: *mut ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn random_r(__buf: *mut Struct_random_data, __result: *mut int32_t)
     -> ::libc::c_int;
    pub fn srandom_r(__seed: ::libc::c_uint, __buf: *mut Struct_random_data)
     -> ::libc::c_int;
    pub fn initstate_r(__seed: ::libc::c_uint,
                       __statebuf: *mut ::libc::c_uchar, __statelen: size_t,
                       __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn setstate_r(__statebuf: *mut ::libc::c_uchar,
                      __buf: *mut Struct_random_data) -> ::libc::c_int;
    pub fn rand() -> ::libc::c_int;
    pub fn srand(__seed: ::libc::c_uint) -> ();
    pub fn rand_r(__seed: *mut ::libc::c_uint) -> ::libc::c_int;
    pub fn drand48() -> ::libc::c_double;
    pub fn erand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_double;
    pub fn lrand48() -> ::libc::c_long;
    pub fn nrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn mrand48() -> ::libc::c_long;
    pub fn jrand48(__xsubi: *mut ::libc::c_ushort) -> ::libc::c_long;
    pub fn srand48(__seedval: ::libc::c_long) -> ();
    pub fn seed48(__seed16v: *mut ::libc::c_ushort) -> *mut ::libc::c_ushort;
    pub fn lcong48(__param: *mut ::libc::c_ushort) -> ();
    pub fn drand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn erand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_double) -> ::libc::c_int;
    pub fn lrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn nrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn mrand48_r(__buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn jrand48_r(__xsubi: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data,
                     __result: *mut ::libc::c_long) -> ::libc::c_int;
    pub fn srand48_r(__seedval: ::libc::c_long,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn seed48_r(__seed16v: *mut ::libc::c_ushort,
                    __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn lcong48_r(__param: *mut ::libc::c_ushort,
                     __buffer: *mut Struct_drand48_data) -> ::libc::c_int;
    pub fn malloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn calloc(__nmemb: size_t, __size: size_t) -> *mut ::libc::c_void;
    pub fn realloc(__ptr: *mut ::libc::c_void, __size: size_t)
     -> *mut ::libc::c_void;
    pub fn free(__ptr: *mut ::libc::c_void) -> ();
    pub fn cfree(__ptr: *mut ::libc::c_void) -> ();
    pub fn alloca(__size: size_t) -> *mut ::libc::c_void;
    pub fn valloc(__size: size_t) -> *mut ::libc::c_void;
    pub fn posix_memalign(__memptr: *mut *mut ::libc::c_void,
                          __alignment: size_t, __size: size_t)
     -> ::libc::c_int;
    pub fn abort() -> ();
    pub fn atexit(__func: ::std::option::Option<extern "C" fn() -> ()>)
     -> ::libc::c_int;
    pub fn on_exit(__func:
                       ::std::option::Option<extern "C" fn(__status:
                                                               ::libc::c_int,
                                                           __arg:
                                                               *mut ::libc::c_void)
                                                 -> ()>,
                   __arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn exit(__status: ::libc::c_int) -> ();
    pub fn _Exit(__status: ::libc::c_int) -> ();
    pub fn getenv(__name: *const ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn putenv(__string: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn setenv(__name: *const ::libc::c_uchar,
                  __value: *const ::libc::c_uchar, __replace: ::libc::c_int)
     -> ::libc::c_int;
    pub fn unsetenv(__name: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn clearenv() -> ::libc::c_int;
    pub fn mktemp(__template: *mut ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn mkstemp(__template: *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn mkstemps(__template: *mut ::libc::c_uchar,
                    __suffixlen: ::libc::c_int) -> ::libc::c_int;
    pub fn mkdtemp(__template: *mut ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn system(__command: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn realpath(__name: *const ::libc::c_uchar,
                    __resolved: *mut ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn bsearch(__key: *const ::libc::c_void,
                   __base: *const ::libc::c_void, __nmemb: size_t,
                   __size: size_t, __compar: __compar_fn_t)
     -> *mut ::libc::c_void;
    pub fn qsort(__base: *mut ::libc::c_void, __nmemb: size_t, __size: size_t,
                 __compar: __compar_fn_t) -> ();
    pub fn abs(__x: ::libc::c_int) -> ::libc::c_int;
    pub fn labs(__x: ::libc::c_long) -> ::libc::c_long;
    pub fn llabs(__x: ::libc::c_longlong) -> ::libc::c_longlong;
    pub fn div(__numer: ::libc::c_int, __denom: ::libc::c_int) -> div_t;
    pub fn ldiv(__numer: ::libc::c_long, __denom: ::libc::c_long) -> ldiv_t;
    pub fn lldiv(__numer: ::libc::c_longlong, __denom: ::libc::c_longlong)
     -> lldiv_t;
    pub fn ecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn fcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn gcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                __buf: *mut ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn qecvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn qfcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int)
     -> *mut ::libc::c_uchar;
    pub fn qgcvt(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                 __buf: *mut ::libc::c_uchar) -> *mut ::libc::c_uchar;
    pub fn ecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_uchar, __len: size_t)
     -> ::libc::c_int;
    pub fn fcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                  __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                  __buf: *mut ::libc::c_uchar, __len: size_t)
     -> ::libc::c_int;
    pub fn qecvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_uchar, __len: size_t)
     -> ::libc::c_int;
    pub fn qfcvt_r(__value: ::libc::c_double, __ndigit: ::libc::c_int,
                   __decpt: *mut ::libc::c_int, __sign: *mut ::libc::c_int,
                   __buf: *mut ::libc::c_uchar, __len: size_t)
     -> ::libc::c_int;
    pub fn mblen(__s: *const ::libc::c_uchar, __n: size_t) -> ::libc::c_int;
    pub fn mbtowc(__pwc: *mut wchar_t, __s: *const ::libc::c_uchar,
                  __n: size_t) -> ::libc::c_int;
    pub fn wctomb(__s: *mut ::libc::c_uchar, __wchar: wchar_t)
     -> ::libc::c_int;
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::libc::c_uchar,
                    __n: size_t) -> size_t;
    pub fn wcstombs(__s: *mut ::libc::c_uchar, __pwcs: *const wchar_t,
                    __n: size_t) -> size_t;
    pub fn rpmatch(__response: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn getsubopt(__optionp: *mut *mut ::libc::c_uchar,
                     __tokens: *const *mut ::libc::c_uchar,
                     __valuep: *mut *mut ::libc::c_uchar) -> ::libc::c_int;
    pub fn getloadavg(__loadavg: *mut ::libc::c_double,
                      __nelem: ::libc::c_int) -> ::libc::c_int;
    pub fn dlopen(__file: *const ::libc::c_uchar, __mode: ::libc::c_int)
     -> *mut ::libc::c_void;
    pub fn dlclose(__handle: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn dlsym(__handle: *mut ::libc::c_void,
                 __name: *const ::libc::c_uchar) -> *mut ::libc::c_void;
    pub fn dlerror() -> *mut ::libc::c_uchar;
    pub fn vcos_generic_event_flags_create(flags: *mut VCOS_EVENT_FLAGS_T,
                                           name: *const ::libc::c_uchar)
     -> VCOS_STATUS_T;
    pub fn vcos_generic_event_flags_set(flags: *mut VCOS_EVENT_FLAGS_T,
                                        events: VCOS_UNSIGNED,
                                        op: VCOS_OPTION) -> ();
    pub fn vcos_generic_event_flags_delete(arg1: *mut VCOS_EVENT_FLAGS_T)
     -> ();
    pub fn vcos_generic_event_flags_get(flags: *mut VCOS_EVENT_FLAGS_T,
                                        requested_events: VCOS_UNSIGNED,
                                        op: VCOS_OPTION,
                                        suspend: VCOS_UNSIGNED,
                                        retrieved_events: *mut VCOS_UNSIGNED)
     -> VCOS_STATUS_T;
    pub fn vcos_generic_blockpool_init(pool: *mut VCOS_BLOCKPOOL_T,
                                       num_blocks: VCOS_UNSIGNED,
                                       block_size: VCOS_UNSIGNED,
                                       start: *mut ::libc::c_void,
                                       pool_size: VCOS_UNSIGNED,
                                       align: VCOS_UNSIGNED,
                                       flags: VCOS_UNSIGNED,
                                       name: *const ::libc::c_uchar)
     -> VCOS_STATUS_T;
    pub fn vcos_generic_blockpool_create_on_heap(pool: *mut VCOS_BLOCKPOOL_T,
                                                 num_blocks: VCOS_UNSIGNED,
                                                 block_size: VCOS_UNSIGNED,
                                                 align: VCOS_UNSIGNED,
                                                 flags: VCOS_UNSIGNED,
                                                 name: *const ::libc::c_uchar)
     -> VCOS_STATUS_T;
    pub fn vcos_generic_blockpool_extend(pool: *mut VCOS_BLOCKPOOL_T,
                                         num_extensions: VCOS_UNSIGNED,
                                         num_blocks: VCOS_UNSIGNED)
     -> VCOS_STATUS_T;
    pub fn vcos_generic_blockpool_alloc(pool: *mut VCOS_BLOCKPOOL_T)
     -> *mut ::libc::c_void;
    pub fn vcos_generic_blockpool_calloc(pool: *mut VCOS_BLOCKPOOL_T)
     -> *mut ::libc::c_void;
    pub fn vcos_generic_blockpool_free(block: *mut ::libc::c_void) -> ();
    pub fn vcos_generic_blockpool_available_count(pool: *mut VCOS_BLOCKPOOL_T)
     -> VCOS_UNSIGNED;
    pub fn vcos_generic_blockpool_used_count(pool: *mut VCOS_BLOCKPOOL_T)
     -> VCOS_UNSIGNED;
    pub fn vcos_generic_blockpool_delete(pool: *mut VCOS_BLOCKPOOL_T) -> ();
    pub fn vcos_generic_blockpool_elem_to_handle(block: *mut ::libc::c_void)
     -> uint32_t;
    pub fn vcos_generic_blockpool_elem_from_handle(pool:
                                                       *mut VCOS_BLOCKPOOL_T,
                                                   handle: uint32_t)
     -> *mut ::libc::c_void;
    pub fn vcos_generic_blockpool_is_valid_elem(pool: *mut VCOS_BLOCKPOOL_T,
                                                block: *const ::libc::c_void)
     -> uint32_t;
    pub fn vcos_generic_mem_alloc(sz: VCOS_UNSIGNED,
                                  desc: *const ::libc::c_uchar)
     -> *mut ::libc::c_void;
    pub fn vcos_generic_mem_calloc(count: VCOS_UNSIGNED, sz: VCOS_UNSIGNED,
                                   descr: *const ::libc::c_uchar)
     -> *mut ::libc::c_void;
    pub fn vcos_generic_mem_free(ptr: *mut ::libc::c_void) -> ();
    pub fn vcos_generic_mem_alloc_aligned(sz: VCOS_UNSIGNED,
                                          align: VCOS_UNSIGNED,
                                          desc: *const ::libc::c_uchar)
     -> *mut ::libc::c_void;
    pub fn vcos_pthreads_map_error(error: ::libc::c_int) -> VCOS_STATUS_T;
    pub fn vcos_pthreads_map_errno() -> VCOS_STATUS_T;
    pub fn vcos_thread_at_exit(pfn:
                                   ::std::option::Option<extern "C" fn(arg1:
                                                                           *mut ::libc::c_void)
                                                             -> ()>,
                               cxt: *mut ::libc::c_void) -> VCOS_STATUS_T;
    pub fn _vcos_get_ticks_per_second() -> uint32_t;
    pub fn vcos_dummy_thread_create() -> *mut VCOS_THREAD_T;
    pub fn vcos_getmicrosecs64_internal() -> uint64_t;
    pub fn _vcos_log_platform_init() -> ();
    pub fn vcos_generic_reentrant_mutex_create(m: *mut VCOS_REENTRANT_MUTEX_T,
                                               name: *const ::libc::c_uchar)
     -> VCOS_STATUS_T;
    pub fn vcos_generic_reentrant_mutex_delete(m: *mut VCOS_REENTRANT_MUTEX_T)
     -> ();
    pub fn vcos_generic_reentrant_mutex_lock(m: *mut VCOS_REENTRANT_MUTEX_T)
     -> ();
    pub fn vcos_generic_reentrant_mutex_unlock(m: *mut VCOS_REENTRANT_MUTEX_T)
     -> ();
    pub fn vcos_generic_named_semaphore_create(sem:
                                                   *mut VCOS_NAMED_SEMAPHORE_T,
                                               name: *const ::libc::c_uchar,
                                               count: VCOS_UNSIGNED)
     -> VCOS_STATUS_T;
    pub fn vcos_named_semaphore_delete(sem: *mut VCOS_NAMED_SEMAPHORE_T)
     -> ();
    pub fn _vcos_named_semaphore_init() -> VCOS_STATUS_T;
    pub fn _vcos_named_semaphore_deinit() -> ();
    pub fn vcos_init() -> VCOS_STATUS_T;
    pub fn vcos_deinit() -> ();
    pub fn vcos_global_lock() -> ();
    pub fn vcos_global_unlock() -> ();
    pub fn vcos_set_args(argc: ::libc::c_int,
                         argv: *mut *const ::libc::c_uchar) -> ();
    pub fn vcos_get_argc() -> ::libc::c_int;
    pub fn vcos_get_argv() -> *mut *const ::libc::c_uchar;
    pub fn vcos_platform_init() -> VCOS_STATUS_T;
    pub fn vcos_platform_deinit() -> ();
    pub fn vcos_have_rtos() -> ::libc::c_int;
    pub fn vcos_thread_create(thread: *mut VCOS_THREAD_T,
                              name: *const ::libc::c_uchar,
                              attrs: *mut VCOS_THREAD_ATTR_T,
                              entry: VCOS_THREAD_ENTRY_FN_T,
                              arg: *mut ::libc::c_void) -> VCOS_STATUS_T;
    pub fn vcos_thread_exit(data: *mut ::libc::c_void) -> ();
    pub fn vcos_thread_join(thread: *mut VCOS_THREAD_T,
                            pData: *mut *mut ::libc::c_void) -> ();
    pub fn vcos_thread_create_classic(thread: *mut VCOS_THREAD_T,
                                      name: *const ::libc::c_uchar,
                                      entry:
                                          ::std::option::Option<extern "C" fn(arg:
                                                                                  *mut ::libc::c_void)
                                                                    ->
                                                                        *mut ::libc::c_void>,
                                      arg: *mut ::libc::c_void,
                                      stack: *mut ::libc::c_void,
                                      stacksz: VCOS_UNSIGNED,
                                      priaff: VCOS_UNSIGNED,
                                      timeslice: VCOS_UNSIGNED,
                                      autostart: VCOS_UNSIGNED)
     -> VCOS_STATUS_T;
    pub fn vcos_thread_get_affinity(thread: *mut VCOS_THREAD_T)
     -> VCOS_UNSIGNED;
    pub fn vcos_thread_relinquish() -> ();
    pub fn vcos_thread_get_name(thread: *const VCOS_THREAD_T)
     -> *const ::libc::c_uchar;
    pub fn vcos_change_preemption(pe: VCOS_UNSIGNED) -> VCOS_UNSIGNED;
    pub fn vcos_thread_running(thread: *mut VCOS_THREAD_T) -> ::libc::c_int;
    pub fn vcos_thread_resume(thread: *mut VCOS_THREAD_T) -> ();
    pub fn _vcos_task_timer_set(pfn:
                                    ::std::option::Option<extern "C" fn(arg1:
                                                                            *mut ::libc::c_void)
                                                              -> ()>,
                                arg1: *mut ::libc::c_void, ms: VCOS_UNSIGNED)
     -> ();
    pub fn _vcos_task_timer_cancel() -> ();
    pub fn vcos_kmalloc(size: VCOS_UNSIGNED,
                        description: *const ::libc::c_uchar)
     -> *mut ::libc::c_void;
    pub fn vcos_kcalloc(num: VCOS_UNSIGNED, size: VCOS_UNSIGNED,
                        description: *const ::libc::c_uchar)
     -> *mut ::libc::c_void;
    pub fn vcos_kfree(ptr: *mut ::libc::c_void) -> ();
    pub fn vcos_log_level_to_string(level: VCOS_LOG_LEVEL_T)
     -> *const ::libc::c_uchar;
    pub fn vcos_string_to_log_level(str: *const ::libc::c_uchar,
                                    level: *mut VCOS_LOG_LEVEL_T)
     -> VCOS_STATUS_T;
    pub fn vcos_log_impl(cat: *const VCOS_LOG_CAT_T, _level: VCOS_LOG_LEVEL_T,
                         fmt: *const ::libc::c_uchar, ...) -> ();
    pub fn vcos_logging_init() -> ();
    pub fn vcos_log_register(name: *const ::libc::c_uchar,
                             category: *mut VCOS_LOG_CAT_T) -> ();
    pub fn vcos_log_unregister(category: *mut VCOS_LOG_CAT_T) -> ();
    pub fn vcos_log_get_default_category() -> *const VCOS_LOG_CAT_T;
    pub fn vcos_set_log_options(opt: *const ::libc::c_uchar) -> ();
    pub fn vcos_log_dump_mem_impl(cat: *const VCOS_LOG_CAT_T,
                                  label: *const ::libc::c_uchar,
                                  addr: uint32_t,
                                  voidMem: *const ::libc::c_void,
                                  numBytes: size_t) -> ();
    pub fn vcos_cmd_error(param: *mut VCOS_CMD_PARAM_T,
                          fmt: *const ::libc::c_uchar, ...) -> ();
    pub fn vcos_cmd_printf(param: *mut VCOS_CMD_PARAM_T,
                           fmt: *const ::libc::c_uchar, ...) -> ();
    pub fn vcos_cmd_always_log_output(log_category: *mut VCOS_LOG_CAT_T)
     -> ();
    pub fn vcos_cmd_usage(param: *mut VCOS_CMD_PARAM_T) -> ();
    pub fn vcos_cmd_register(cmd_entry: *mut VCOS_CMD_T) -> VCOS_STATUS_T;
    pub fn vcos_cmd_register_multiple(cmd_entry: *mut VCOS_CMD_T)
     -> VCOS_STATUS_T;
    pub fn vcos_cmd_execute(argc: ::libc::c_int,
                            argv: *mut *mut ::libc::c_uchar,
                            result_size: size_t,
                            result_buf: *mut ::libc::c_uchar)
     -> VCOS_STATUS_T;
    pub fn vcos_cmd_shutdown() -> ();
    pub fn vcos_log_assert_cmd(param: *mut VCOS_CMD_PARAM_T) -> VCOS_STATUS_T;
    pub fn vcos_log_set_cmd(param: *mut VCOS_CMD_PARAM_T) -> VCOS_STATUS_T;
    pub fn vcos_log_status_cmd(param: *mut VCOS_CMD_PARAM_T) -> VCOS_STATUS_T;
    pub fn vcos_log_test_cmd(param: *mut VCOS_CMD_PARAM_T) -> VCOS_STATUS_T;
    pub fn vcos_safe_strcpy(dst: *mut ::libc::c_uchar,
                            src: *const ::libc::c_uchar, dstlen: size_t,
                            offset: size_t) -> size_t;
    pub fn vcos_thread_attr_init(attrs: *mut VCOS_THREAD_ATTR_T) -> ();
    pub fn vcos_timer_init() -> VCOS_STATUS_T;
    pub fn vcos_timer_create(timer: *mut VCOS_TIMER_T,
                             name: *const ::libc::c_uchar,
                             expiration_routine:
                                 ::std::option::Option<extern "C" fn(context:
                                                                         *mut ::libc::c_void)
                                                           -> ()>,
                             context: *mut ::libc::c_void) -> VCOS_STATUS_T;
    pub fn vcos_timer_set(timer: *mut VCOS_TIMER_T, delay: VCOS_UNSIGNED)
     -> ();
    pub fn vcos_timer_cancel(timer: *mut VCOS_TIMER_T) -> ();
    pub fn vcos_timer_reset(timer: *mut VCOS_TIMER_T, delay: VCOS_UNSIGNED)
     -> ();
    pub fn vcos_timer_delete(timer: *mut VCOS_TIMER_T) -> ();
    pub fn vcos_once(once_control: *mut VCOS_ONCE_T,
                     init_routine:
                         ::std::option::Option<extern "C" fn() -> ()>)
     -> VCOS_STATUS_T;
    pub fn vchi_create_connection(function_table:
                                      *const VCHI_CONNECTION_API_T,
                                  low_level: *const VCHI_MESSAGE_DRIVER_T)
     -> *mut VCHI_CONNECTION_T;
    pub fn vchi_initialise(instance_handle: *mut VCHI_INSTANCE_T) -> int32_t;
    pub fn vchi_connect(connections: *mut *mut VCHI_CONNECTION_T,
                        num_connections: uint32_t,
                        instance_handle: VCHI_INSTANCE_T) -> int32_t;
    pub fn vchi_disconnect(instance_handle: VCHI_INSTANCE_T) -> int32_t;
    pub fn vchi_crc_control(connection: *mut VCHI_CONNECTION_T,
                            control: VCHI_CRC_CONTROL_T) -> int32_t;
    pub fn vchi_allocate_buffer(handle: VCHI_SERVICE_HANDLE_T,
                                length: *mut uint32_t) -> *mut ::libc::c_void;
    pub fn vchi_free_buffer(handle: VCHI_SERVICE_HANDLE_T,
                            address: *mut ::libc::c_void) -> ();
    pub fn vchi_current_time(instance_handle: VCHI_INSTANCE_T) -> uint32_t;
    pub fn vchi_service_create(instance_handle: VCHI_INSTANCE_T,
                               setup: *mut SERVICE_CREATION_T,
                               handle: *mut VCHI_SERVICE_HANDLE_T) -> int32_t;
    pub fn vchi_service_destroy(handle: VCHI_SERVICE_HANDLE_T) -> int32_t;
    pub fn vchi_service_open(instance_handle: VCHI_INSTANCE_T,
                             setup: *mut SERVICE_CREATION_T,
                             handle: *mut VCHI_SERVICE_HANDLE_T) -> int32_t;
    pub fn vchi_get_peer_version(handle: VCHI_SERVICE_HANDLE_T,
                                 peer_version: *mut ::libc::c_short)
     -> int32_t;
    pub fn vchi_service_close(handle: VCHI_SERVICE_HANDLE_T) -> int32_t;
    pub fn vchi_service_use(handle: VCHI_SERVICE_HANDLE_T) -> int32_t;
    pub fn vchi_service_release(handle: VCHI_SERVICE_HANDLE_T) -> int32_t;
    pub fn vchi_service_set_option(handle: VCHI_SERVICE_HANDLE_T,
                                   option: VCHI_SERVICE_OPTION_T,
                                   value: ::libc::c_int) -> int32_t;
    pub fn vchi_msg_queue(handle: VCHI_SERVICE_HANDLE_T,
                          data: *const ::libc::c_void, data_size: uint32_t,
                          flags: VCHI_FLAGS_T,
                          msg_handle: *mut ::libc::c_void) -> int32_t;
    pub fn vchi_msg_queuev_ex(handle: VCHI_SERVICE_HANDLE_T,
                              vector: *mut VCHI_MSG_VECTOR_EX_T,
                              count: uint32_t, flags: VCHI_FLAGS_T,
                              msg_handle: *mut ::libc::c_void) -> int32_t;
    pub fn vchi_msg_queuev(handle: VCHI_SERVICE_HANDLE_T,
                           vector: *mut VCHI_MSG_VECTOR_T, count: uint32_t,
                           flags: VCHI_FLAGS_T,
                           msg_handle: *mut ::libc::c_void) -> int32_t;
    pub fn vchi_msg_dequeue(handle: VCHI_SERVICE_HANDLE_T,
                            data: *mut ::libc::c_void,
                            max_data_size_to_read: uint32_t,
                            actual_msg_size: *mut uint32_t,
                            flags: VCHI_FLAGS_T) -> int32_t;
    pub fn vchi_msg_peek(handle: VCHI_SERVICE_HANDLE_T,
                         data: *mut *mut ::libc::c_void,
                         msg_size: *mut uint32_t, flags: VCHI_FLAGS_T)
     -> int32_t;
    pub fn vchi_msg_remove(handle: VCHI_SERVICE_HANDLE_T) -> int32_t;
    pub fn vchi_msg_hold(handle: VCHI_SERVICE_HANDLE_T,
                         data: *mut *mut ::libc::c_void,
                         msg_size: *mut uint32_t, flags: VCHI_FLAGS_T,
                         message_descriptor: *mut VCHI_HELD_MSG_T) -> int32_t;
    pub fn vchi_msg_look_ahead(handle: VCHI_SERVICE_HANDLE_T,
                               iter: *mut VCHI_MSG_ITER_T,
                               flags: VCHI_FLAGS_T) -> int32_t;
    pub fn vchi_held_msg_ptr(message: *const VCHI_HELD_MSG_T)
     -> *mut ::libc::c_void;
    pub fn vchi_held_msg_size(message: *const VCHI_HELD_MSG_T) -> int32_t;
    pub fn vchi_held_msg_tx_timestamp(message: *const VCHI_HELD_MSG_T)
     -> uint32_t;
    pub fn vchi_held_msg_rx_timestamp(message: *const VCHI_HELD_MSG_T)
     -> uint32_t;
    pub fn vchi_held_msg_release(message: *mut VCHI_HELD_MSG_T) -> int32_t;
    pub fn vchi_msg_iter_has_next(iter: *const VCHI_MSG_ITER_T)
     -> vcos_bool_t;
    pub fn vchi_msg_iter_next(iter: *mut VCHI_MSG_ITER_T,
                              data: *mut *mut ::libc::c_void,
                              msg_size: *mut uint32_t) -> int32_t;
    pub fn vchi_msg_iter_remove(iter: *mut VCHI_MSG_ITER_T) -> int32_t;
    pub fn vchi_msg_iter_hold(iter: *mut VCHI_MSG_ITER_T,
                              message: *mut VCHI_HELD_MSG_T) -> int32_t;
    pub fn vchi_msg_iter_hold_next(iter: *mut VCHI_MSG_ITER_T,
                                   data: *mut *mut ::libc::c_void,
                                   msg_size: *mut uint32_t,
                                   message: *mut VCHI_HELD_MSG_T) -> int32_t;
    pub fn vchi_bulk_queue_receive(handle: VCHI_SERVICE_HANDLE_T,
                                   data_dst: *mut ::libc::c_void,
                                   data_size: uint32_t, flags: VCHI_FLAGS_T,
                                   transfer_handle: *mut ::libc::c_void)
     -> int32_t;
    pub fn vchi_bulk_queue_receive_reloc(handle: VCHI_SERVICE_HANDLE_T,
                                         h_dst: VCHI_MEM_HANDLE_T,
                                         offset: uint32_t,
                                         data_size: uint32_t,
                                         flags: VCHI_FLAGS_T,
                                         bulk_handle: *mut ::libc::c_void)
     -> int32_t;
    pub fn vchi_bulk_queue_receive_reloc_func(handle: VCHI_SERVICE_HANDLE_T,
                                              h_dst: VCHI_MEM_HANDLE_T,
                                              offset: uint32_t,
                                              data_size: uint32_t,
                                              flags: VCHI_FLAGS_T,
                                              bulk_handle:
                                                  *mut ::libc::c_void,
                                              copy_pagelist:
                                                  ::std::option::Option<extern "C" fn()
                                                                            ->
                                                                                ::libc::c_int>)
     -> int32_t;
    pub fn vchi_bulk_queue_transmit(handle: VCHI_SERVICE_HANDLE_T,
                                    data_src: *const ::libc::c_void,
                                    data_size: uint32_t, flags: VCHI_FLAGS_T,
                                    transfer_handle: *mut ::libc::c_void)
     -> int32_t;
    pub fn single_get_func_table() -> *const VCHI_CONNECTION_API_T;
    pub fn vchi_mphi_message_driver_func_table()
     -> *const VCHI_MESSAGE_DRIVER_T;
    pub fn vchi_bulk_queue_transmit_reloc(handle: VCHI_SERVICE_HANDLE_T,
                                          h_src: VCHI_MEM_HANDLE_T,
                                          offset: uint32_t,
                                          data_size: uint32_t,
                                          flags: VCHI_FLAGS_T,
                                          transfer_handle:
                                              *mut ::libc::c_void) -> int32_t;
    pub fn vc_dispman_init() -> ::libc::c_int;
    pub fn vc_dispmanx_stop() -> ();
    pub fn vc_dispmanx_rect_set(rect: *mut VC_RECT_T, x_offset: uint32_t,
                                y_offset: uint32_t, width: uint32_t,
                                height: uint32_t) -> ::libc::c_int;
    pub fn vc_dispmanx_resource_create(_type: VC_IMAGE_TYPE_T,
                                       width: uint32_t, height: uint32_t,
                                       native_image_handle: *mut uint32_t)
     -> DISPMANX_RESOURCE_HANDLE_T;
    pub fn vc_dispmanx_resource_write_data(res: DISPMANX_RESOURCE_HANDLE_T,
                                           src_type: VC_IMAGE_TYPE_T,
                                           src_pitch: ::libc::c_int,
                                           src_address: *mut ::libc::c_void,
                                           rect: *const VC_RECT_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_resource_write_data_handle(res:
                                                      DISPMANX_RESOURCE_HANDLE_T,
                                                  src_type: VC_IMAGE_TYPE_T,
                                                  src_pitch: ::libc::c_int,
                                                  handle: VCHI_MEM_HANDLE_T,
                                                  offset: uint32_t,
                                                  rect: *const VC_RECT_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_resource_read_data(handle: DISPMANX_RESOURCE_HANDLE_T,
                                          p_rect: *const VC_RECT_T,
                                          dst_address: *mut ::libc::c_void,
                                          dst_pitch: uint32_t)
     -> ::libc::c_int;
    pub fn vc_dispmanx_resource_delete(res: DISPMANX_RESOURCE_HANDLE_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_display_open(device: uint32_t)
     -> DISPMANX_DISPLAY_HANDLE_T;
    pub fn vc_dispmanx_display_open_mode(device: uint32_t, mode: uint32_t)
     -> DISPMANX_DISPLAY_HANDLE_T;
    pub fn vc_dispmanx_display_open_offscreen(dest:
                                                  DISPMANX_RESOURCE_HANDLE_T,
                                              orientation:
                                                  DISPMANX_TRANSFORM_T)
     -> DISPMANX_DISPLAY_HANDLE_T;
    pub fn vc_dispmanx_display_reconfigure(display: DISPMANX_DISPLAY_HANDLE_T,
                                           mode: uint32_t) -> ::libc::c_int;
    pub fn vc_dispmanx_display_set_destination(display:
                                                   DISPMANX_DISPLAY_HANDLE_T,
                                               dest:
                                                   DISPMANX_RESOURCE_HANDLE_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_display_set_background(update:
                                                  DISPMANX_UPDATE_HANDLE_T,
                                              display:
                                                  DISPMANX_DISPLAY_HANDLE_T,
                                              red: uint8_t, green: uint8_t,
                                              blue: uint8_t) -> ::libc::c_int;
    pub fn vc_dispmanx_display_get_info(display: DISPMANX_DISPLAY_HANDLE_T,
                                        pinfo: *mut DISPMANX_MODEINFO_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_display_close(display: DISPMANX_DISPLAY_HANDLE_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_update_start(priority: int32_t)
     -> DISPMANX_UPDATE_HANDLE_T;
    pub fn vc_dispmanx_element_add(update: DISPMANX_UPDATE_HANDLE_T,
                                   display: DISPMANX_DISPLAY_HANDLE_T,
                                   layer: int32_t,
                                   dest_rect: *const VC_RECT_T,
                                   src: DISPMANX_RESOURCE_HANDLE_T,
                                   src_rect: *const VC_RECT_T,
                                   protection: DISPMANX_PROTECTION_T,
                                   alpha: *mut VC_DISPMANX_ALPHA_T,
                                   clamp: *mut DISPMANX_CLAMP_T,
                                   transform: DISPMANX_TRANSFORM_T)
     -> DISPMANX_ELEMENT_HANDLE_T;
    pub fn vc_dispmanx_element_change_source(update: DISPMANX_UPDATE_HANDLE_T,
                                             element:
                                                 DISPMANX_ELEMENT_HANDLE_T,
                                             src: DISPMANX_RESOURCE_HANDLE_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_element_change_layer(update: DISPMANX_UPDATE_HANDLE_T,
                                            element:
                                                DISPMANX_ELEMENT_HANDLE_T,
                                            layer: int32_t) -> ::libc::c_int;
    pub fn vc_dispmanx_element_modified(update: DISPMANX_UPDATE_HANDLE_T,
                                        element: DISPMANX_ELEMENT_HANDLE_T,
                                        rect: *const VC_RECT_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_element_remove(update: DISPMANX_UPDATE_HANDLE_T,
                                      element: DISPMANX_ELEMENT_HANDLE_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_update_submit(update: DISPMANX_UPDATE_HANDLE_T,
                                     cb_func: DISPMANX_CALLBACK_FUNC_T,
                                     cb_arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn vc_dispmanx_update_submit_sync(update: DISPMANX_UPDATE_HANDLE_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_query_image_formats(supported_formats: *mut uint32_t)
     -> ::libc::c_int;
    pub fn vc_dispmanx_element_change_attributes(update:
                                                     DISPMANX_UPDATE_HANDLE_T,
                                                 element:
                                                     DISPMANX_ELEMENT_HANDLE_T,
                                                 change_flags: uint32_t,
                                                 layer: int32_t,
                                                 opacity: uint8_t,
                                                 dest_rect: *const VC_RECT_T,
                                                 src_rect: *const VC_RECT_T,
                                                 mask:
                                                     DISPMANX_RESOURCE_HANDLE_T,
                                                 transform:
                                                     DISPMANX_TRANSFORM_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_resource_get_image_handle(res:
                                                     DISPMANX_RESOURCE_HANDLE_T)
     -> uint32_t;
    pub fn vc_vchi_dispmanx_init(initialise_instance: VCHI_INSTANCE_T,
                                 connections: *mut *mut VCHI_CONNECTION_T,
                                 num_connections: uint32_t) -> ();
    pub fn vc_dispmanx_snapshot(display: DISPMANX_DISPLAY_HANDLE_T,
                                snapshot_resource: DISPMANX_RESOURCE_HANDLE_T,
                                transform: DISPMANX_TRANSFORM_T)
     -> ::libc::c_int;
    pub fn vc_dispmanx_resource_set_palette(handle:
                                                DISPMANX_RESOURCE_HANDLE_T,
                                            src_address: *mut ::libc::c_void,
                                            offset: ::libc::c_int,
                                            size: ::libc::c_int)
     -> ::libc::c_int;
    pub fn vc_dispmanx_vsync_callback(display: DISPMANX_DISPLAY_HANDLE_T,
                                      cb_func: DISPMANX_CALLBACK_FUNC_T,
                                      cb_arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn vc_vchi_tv_init(initialise_instance: VCHI_INSTANCE_T,
                           connections: *mut *mut VCHI_CONNECTION_T,
                           num_connections: uint32_t) -> ::libc::c_int;
    pub fn vc_vchi_tv_stop() -> ();
    pub fn vc_tv_register_callback(callback: TVSERVICE_CALLBACK_T,
                                   callback_data: *mut ::libc::c_void) -> ();
    pub fn vc_tv_unregister_callback(callback: TVSERVICE_CALLBACK_T) -> ();
    pub fn vc_tv_unregister_callback_full(callback: TVSERVICE_CALLBACK_T,
                                          callback_data: *mut ::libc::c_void)
     -> ();
    pub fn vc_tv_get_state(tvstate: *mut TV_GET_STATE_RESP_T)
     -> ::libc::c_int;
    pub fn vc_tv_get_display_state(tvstate: *mut TV_DISPLAY_STATE_T)
     -> ::libc::c_int;
    pub fn vc_tv_hdmi_power_on_preferred() -> ::libc::c_int;
    pub fn vc_tv_hdmi_power_on_preferred_3d() -> ::libc::c_int;
    pub fn vc_tv_hdmi_power_on_best(width: uint32_t, height: uint32_t,
                                    frame_rate: uint32_t,
                                    scan_mode: HDMI_INTERLACED_T,
                                    match_flags: EDID_MODE_MATCH_FLAG_T)
     -> ::libc::c_int;
    pub fn vc_tv_hdmi_power_on_best_3d(width: uint32_t, height: uint32_t,
                                       frame_rate: uint32_t,
                                       scan_mode: HDMI_INTERLACED_T,
                                       match_flags: EDID_MODE_MATCH_FLAG_T)
     -> ::libc::c_int;
    pub fn vc_tv_hdmi_power_on_explicit_new(mode: HDMI_MODE_T,
                                            group: HDMI_RES_GROUP_T,
                                            code: uint32_t) -> ::libc::c_int;
    pub fn vc_tv_sdtv_power_on(mode: SDTV_MODE_T,
                               options: *mut SDTV_OPTIONS_T) -> ::libc::c_int;
    pub fn vc_tv_power_off() -> ::libc::c_int;
    pub fn vc_tv_hdmi_get_supported_modes_new(group: HDMI_RES_GROUP_T,
                                              supported_modes:
                                                  *mut TV_SUPPORTED_MODE_NEW_T,
                                              max_supported_modes: uint32_t,
                                              preferred_group:
                                                  *mut HDMI_RES_GROUP_T,
                                              preferred_mode: *mut uint32_t)
     -> ::libc::c_int;
    pub fn vc_tv_hdmi_mode_supported(group: HDMI_RES_GROUP_T, mode: uint32_t)
     -> ::libc::c_int;
    pub fn vc_tv_hdmi_audio_supported(audio_format: uint32_t,
                                      num_channels: uint32_t,
                                      fs: EDID_AudioSampleRate,
                                      bitrate: uint32_t) -> ::libc::c_int;
    pub fn vc_tv_enable_copyprotect(cp_mode: uint32_t, timeout: uint32_t)
     -> ::libc::c_int;
    pub fn vc_tv_disable_copyprotect() -> ::libc::c_int;
    pub fn vc_tv_show_info(show: uint32_t) -> ::libc::c_int;
    pub fn vc_tv_hdmi_get_av_latency() -> ::libc::c_int;
    pub fn vc_tv_hdmi_set_hdcp_key(key: *const uint8_t) -> ::libc::c_int;
    pub fn vc_tv_hdmi_set_hdcp_revoked_list(list: *const uint8_t,
                                            num_keys: uint32_t)
     -> ::libc::c_int;
    pub fn vc_tv_hdmi_set_spd(manufacturer: *const ::libc::c_uchar,
                              description: *const ::libc::c_uchar,
                              _type: HDMI_SPD_TYPE_CODE_T) -> ::libc::c_int;
    pub fn vc_tv_hdmi_set_display_options(aspect: HDMI_ASPECT_T,
                                          left_bar_width: uint32_t,
                                          right_bar_width: uint32_t,
                                          top_bar_height: uint32_t,
                                          bottom_bar_height: uint32_t,
                                          overscan_flags: uint32_t)
     -> ::libc::c_int;
    pub fn vc_tv_test_mode_start(colour: uint32_t, test_mode: TV_TEST_MODE_T)
     -> ::libc::c_int;
    pub fn vc_tv_test_mode_stop() -> ::libc::c_int;
    pub fn vc_tv_hdmi_ddc_read(offset: uint32_t, length: uint32_t,
                               buffer: *mut uint8_t) -> ::libc::c_int;
    pub fn vc_tv_hdmi_set_attached(attached: uint32_t) -> ::libc::c_int;
    pub fn vc_tv_hdmi_set_property(property: *const HDMI_PROPERTY_PARAM_T)
     -> ::libc::c_int;
    pub fn vc_tv_hdmi_get_property(property: *mut HDMI_PROPERTY_PARAM_T)
     -> ::libc::c_int;
    pub fn vc_tv_notification_name(reason: VC_HDMI_NOTIFY_T)
     -> *const ::libc::c_uchar;
    pub fn vc_tv_get_device_id(id: *mut TV_DEVICE_ID_T) -> ::libc::c_int;
    pub fn vc_tv_hdmi_get_supported_modes(group: HDMI_RES_GROUP_T,
                                          supported_modes:
                                              *mut TV_SUPPORTED_MODE_T,
                                          max_supported_modes: uint32_t,
                                          preferred_group:
                                              *mut HDMI_RES_GROUP_T,
                                          preferred_mode: *mut uint32_t)
     -> ::libc::c_int;
    pub fn vc_tv_hdmi_power_on_explicit(mode: HDMI_MODE_T,
                                        group: HDMI_RES_GROUP_T,
                                        code: uint32_t) -> ::libc::c_int;
    pub fn vc_vchi_cec_init(initialise_instance: VCHI_INSTANCE_T,
                            connections: *mut *mut VCHI_CONNECTION_T,
                            num_connections: uint32_t) -> ();
    pub fn vc_vchi_cec_stop() -> ();
    pub fn vc_cec_register_callback(callback: CECSERVICE_CALLBACK_T,
                                    callback_data: *mut ::libc::c_void) -> ();
    pub fn vc_cec_register_command(opcode: CEC_OPCODE_T) -> ::libc::c_int;
    pub fn vc_cec_register_all() -> ::libc::c_int;
    pub fn vc_cec_deregister_command(opcode: CEC_OPCODE_T) -> ::libc::c_int;
    pub fn vc_cec_deregister_all() -> ::libc::c_int;
    pub fn vc_cec_send_message(follower: uint32_t, payload: *const uint8_t,
                               length: uint32_t, is_reply: vcos_bool_t)
     -> ::libc::c_int;
    pub fn vc_cec_get_logical_address(logical_address: *mut CEC_AllDevices_T)
     -> ::libc::c_int;
    pub fn vc_cec_alloc_logical_address() -> ::libc::c_int;
    pub fn vc_cec_release_logical_address() -> ::libc::c_int;
    pub fn vc_cec_get_topology(topology: *mut VC_CEC_TOPOLOGY_T)
     -> ::libc::c_int;
    pub fn vc_cec_set_vendor_id(id: uint32_t) -> ::libc::c_int;
    pub fn vc_cec_set_osd_name(name: *const ::libc::c_uchar) -> ::libc::c_int;
    pub fn vc_cec_get_physical_address(physical_address: *mut uint16_t)
     -> ::libc::c_int;
    pub fn vc_cec_get_vendor_id(logical_address: CEC_AllDevices_T,
                                vendor_id: *mut uint32_t) -> ::libc::c_int;
    pub fn vc_cec_device_type(logical_address: CEC_AllDevices_T)
     -> CEC_DEVICE_TYPE_T;
    pub fn vc_cec_send_message2(message: *const VC_CEC_MESSAGE_T)
     -> ::libc::c_int;
    pub fn vc_cec_param2message(reason: uint32_t, param1: uint32_t,
                                param2: uint32_t, param3: uint32_t,
                                param4: uint32_t,
                                message: *mut VC_CEC_MESSAGE_T)
     -> ::libc::c_int;
    pub fn vc_cec_poll_address(logical_address: CEC_AllDevices_T)
     -> ::libc::c_int;
    pub fn vc_cec_set_logical_address(logical_address: CEC_AllDevices_T,
                                      device_type: CEC_DEVICE_TYPE_T,
                                      vendor_id: uint32_t) -> ::libc::c_int;
    pub fn vc_cec_add_device(logical_address: CEC_AllDevices_T,
                             physical_address: uint16_t,
                             device_type: CEC_DEVICE_TYPE_T,
                             last_device: vcos_bool_t) -> ::libc::c_int;
    pub fn vc_cec_set_passive(enabled: vcos_bool_t) -> ::libc::c_int;
    pub fn vc_cec_send_FeatureAbort(follower: uint32_t, opcode: CEC_OPCODE_T,
                                    reason: CEC_ABORT_REASON_T)
     -> ::libc::c_int;
    pub fn vc_cec_send_ActiveSource(physical_address: uint16_t,
                                    is_reply: vcos_bool_t) -> ::libc::c_int;
    pub fn vc_cec_send_ImageViewOn(follower: uint32_t, is_reply: vcos_bool_t)
     -> ::libc::c_int;
    pub fn vc_cec_send_SetOSDString(follower: uint32_t,
                                    disp_ctrl: CEC_DISPLAY_CONTROL_T,
                                    string: *const ::libc::c_uchar,
                                    is_reply: vcos_bool_t) -> ::libc::c_int;
    pub fn vc_cec_send_Standby(follower: uint32_t, is_reply: vcos_bool_t)
     -> ::libc::c_int;
    pub fn vc_cec_send_MenuStatus(follower: uint32_t,
                                  menu_state: CEC_MENU_STATE_T,
                                  is_reply: vcos_bool_t) -> ::libc::c_int;
    pub fn vc_cec_send_ReportPhysicalAddress(physical_address: uint16_t,
                                             device_type: CEC_DEVICE_TYPE_T,
                                             is_reply: vcos_bool_t)
     -> ::libc::c_int;
    pub fn vc_os_close() -> ();
    pub fn vc_vchi_gencmd_init(initialise_instance: VCHI_INSTANCE_T,
                               connections: *mut *mut VCHI_CONNECTION_T,
                               num_connections: uint32_t) -> ();
    pub fn vc_gencmd_init() -> ::libc::c_int;
    pub fn vc_gencmd_stop() -> ();
    pub fn vc_gencmd_inum() -> ::libc::c_int;
    pub fn vc_gencmd_send(format: *const ::libc::c_uchar, ...)
     -> ::libc::c_int;
    pub fn vc_gencmd_read_response(response: *mut ::libc::c_uchar,
                                   maxlen: ::libc::c_int) -> ::libc::c_int;
    pub fn vc_gencmd(response: *mut ::libc::c_uchar, maxlen: ::libc::c_int,
                     format: *const ::libc::c_uchar, ...) -> ::libc::c_int;
    pub fn vc_gencmd_read_response_partial(response: *mut ::libc::c_uchar,
                                           nbytes: ::libc::c_int)
     -> ::libc::c_int;
    pub fn vc_gencmd_close_response_partial() -> ::libc::c_int;
    pub fn vc_gencmd_read_partial_state() -> ::libc::c_int;
    pub fn vc_gencmd_string_property(text: *mut ::libc::c_uchar,
                                     property: *const ::libc::c_uchar,
                                     value: *mut *mut ::libc::c_uchar,
                                     length: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn vc_gencmd_number_property(text: *mut ::libc::c_uchar,
                                     property: *const ::libc::c_uchar,
                                     number: *mut ::libc::c_int)
     -> ::libc::c_int;
    pub fn vc_gencmd_until(cmd: *mut ::libc::c_uchar,
                           property: *const ::libc::c_uchar,
                           value: *mut ::libc::c_uchar,
                           error_string: *const ::libc::c_uchar,
                           timeout: ::libc::c_int) -> ::libc::c_int;
}
}
